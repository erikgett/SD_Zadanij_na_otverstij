{
  "Uuid": "13c43291-cf2b-418a-b8f8-03e738a2805c",
  "IsCustomNode": false,
  "Description": null,
  "Name": "430_2_Определение статуса заданий",
  "ElementResolver": {
    "ResolutionMap": {
      "Math": {
        "Key": "DSCore.Math",
        "Value": "DSCoreNodes.dll"
      },
      "Vector": {
        "Key": "Autodesk.DesignScript.Geometry.Vector",
        "Value": "ProtoGeometry.dll"
      },
      "Level.Name": {
        "Key": "Revit.Elements.Level",
        "Value": "RevitNodes.dll"
      }
    }
  },
  "Inputs": [],
  "Outputs": [
    {
      "Id": "b72b167db48349a6b85b51b51aa42de3",
      "Name": "Напоминание:",
      "Type": "string",
      "InitialValue": "Запускать скрипт с плана, разреза, фасада, 3д вида!!",
      "Description": "Визуализация входного элемента узла."
    }
  ],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "[\nNameFile\n];",
      "Id": "f84108b986ab442fa1a9a3e4fe6d965e",
      "Inputs": [
        {
          "Id": "a94ac7941d844bc382192c52c22aff92",
          "Name": "NameFile",
          "Description": "NameFile",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e271d633a47e4e76ab66cde160d588af",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "2f69c25b9086405096b51b83ac49dd32",
      "Inputs": [
        {
          "Id": "d19e4e521e55499483883e3aba1719b0",
          "Name": "Category",
          "Description": "Категория",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "06a43b52507843858a91aa18b9beb112",
          "Name": "Elements",
          "Description": "Тип элемента.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Получение из модели всех элементов определенной категории."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 68,
      "SelectedString": "OST_DuctCurves",
      "NodeType": "ExtensionNode",
      "Id": "436fea4d82ea46c589c32644834e0a14",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a61babbd8a4d436db3033a38ec571671",
          "Name": "Category",
          "Description": "Выбранная категория.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Все предопределенные категории."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfType, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "de901e6228fe4443924db1d4680425b6",
      "Inputs": [
        {
          "Id": "d64488b18a524aff98434bba7b8fa3df",
          "Name": "element type",
          "Description": "Тип элемента.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4ae1be0373844f0c91b8b27c21766ee5",
          "Name": "elements",
          "Description": "Все элементы в активном документе данного типа.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Все элементы в активном документе данного типа."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementTypes, DSRevitNodesUI",
      "SelectedIndex": 278,
      "SelectedString": "RevitLinkInstance",
      "NodeType": "ExtensionNode",
      "Id": "f5aa30a9606c4aea8a849d9abb2b8bb9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "20d39307e559429294c4f43217bfb377",
          "Name": "Types",
          "Description": "Выбрано Types",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Все подтипы элементов."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Name",
      "Id": "a223f2e4eeff45ab9f06e215479fd57d",
      "Inputs": [
        {
          "Id": "a56ddfcbd3c54dec8c4690a1b029f2f3",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "32bcc44d7519450d881baf49a22d6ece",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение имени элемента\n\nElement.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.ElementType",
      "Id": "e110eb485b4c4fb3a40282cdd917b883",
      "Inputs": [
        {
          "Id": "b7ca1a1579d646ba80c7b84313387aca",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c10bdd81a7564436a7c44837de224d2b",
          "Name": "ElementType",
          "Description": "Тип элемента или нулевое значение.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Возврат типа ElementType для элемента. Возврат нулевого значения, если элементу нельзя назначить тип ElementType.\n\nElement.ElementType: ElementType"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.Contains@string,string,bool",
      "Id": "b2286d7ac15a40e99d110bb238c8f655",
      "Inputs": [
        {
          "Id": "ffdf036b1bfd49f3808154a74c562618",
          "Name": "str",
          "Description": "Строка для поиска.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b38a2281079c4bfe9a538d5f193859e4",
          "Name": "searchFor",
          "Description": "Подстрока для поиска.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "029e060f53e542928f049f40cd07e603",
          "Name": "ignoreCase",
          "Description": "Учитывается ли при сравнении регистр.\n\nbool\nЗначение по умолчанию : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4a63187b49a942a598fcd19e7f5de5bc",
          "Name": "bool",
          "Description": "Содержит ли строка подстроку.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "CrossProduct",
      "Description": "Определение того, содержит ли данная строка подстроку.\n\nString.Contains (str: string, searchFor: string, ignoreCase: bool = false): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.AllFalse@var[]..[]",
      "Id": "a49ca1a4713143b88dbcb3e24cf98bb5",
      "Inputs": [
        {
          "Id": "459512a9729e4ba98084a96a41d98c7d",
          "Name": "list",
          "Description": "Список, который необходимо проверить на присвоение всем элементам значения «False».\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b22de98a08df46b6a5a5f68e64c5a259",
          "Name": "bool",
          "Description": "Присвоение всем элементам значения «False».",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Определяет, являются ли все элементы заданного списка логическими и имеют ли они значение «False».\n\nList.AllFalse (list: var[]..[]): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "e47048782ae24816b2716ab7177e3a8e",
      "Inputs": [
        {
          "Id": "4feb2f5f1a0a401487a2898420393f70",
          "Name": "list",
          "Description": "Список, который требуется отфильтровать.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "39d6ea0f48824a92a9ce96dfc0554856",
          "Name": "mask",
          "Description": "Список логических операций, представляющих маску.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "25edf82b0b1d484d908e0ec6c7556e5a",
          "Name": "in",
          "Description": "Элементы, индекс маски которых имеет значение «истина».",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "76f41a65e23047cfb4ed16bf0aeb34e9",
          "Name": "out",
          "Description": "Элементы, индекс маски которых имеет значение «ложь».",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Фильтрация последовательности путем поиска соответствующих индексов в отдельном списке логических операций.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 588,
      "SelectedString": "OST_PipeCurves",
      "NodeType": "ExtensionNode",
      "Id": "4a0300e2c53143e583e5c2b9cf8d17e8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ab60f46fc2d146c6992587c514332f6b",
          "Name": "Category",
          "Description": "Выбранная категория.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Все предопределенные категории."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "3df89a2902e746199b306d89d6216c17",
      "Inputs": [
        {
          "Id": "40d49dd3058e46e98d935abae06af1a2",
          "Name": "Category",
          "Description": "Категория",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "805d4fb883b2462babdddb5528d85e0c",
          "Name": "Elements",
          "Description": "Тип элемента.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Получение из модели всех элементов определенной категории."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "6ea14ab69f974716b63d433d9cc6e8cb",
      "Inputs": [
        {
          "Id": "ba9cc4f6141b4b74a2f969a3db526038",
          "Name": "list0",
          "Description": "Списки для объединения в один.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "44daf3c7c90e46b4935300088f9dd528",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "284b3ae496574c5ba7f27273cc228281",
          "Name": "list2",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "93393a57ed034f5e90d5a8580269cdf5",
          "Name": "list",
          "Description": "Объединенный список.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Объединение всех имеющихся списков в один.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Диаметр\";",
      "Id": "d54bfccc2d8f4c8e909ee5542d98355f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2e9db2548e5649e7a8962e89beb80254",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "DSCore.List.FilterByBoolMask(l,m>=D)[\"in\"];",
      "Id": "661a95a8bc4b40e6a2e27ec0dd88ce31",
      "Inputs": [
        {
          "Id": "d8f437276b854c85bd280deca6778ff3",
          "Name": "l",
          "Description": "l",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4a78e9b36e9c4f14a60c7b788e044df7",
          "Name": "m",
          "Description": "m",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "674811c7029d4c8d83bff8b9b8d582a3",
          "Name": "D",
          "Description": "D",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c2aee47404f34971ad724f839e7e17a4",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "94672cdf4ade4b1cabc8943bd55ed952",
      "Inputs": [
        {
          "Id": "7c7166def3544b57a1332c8a7a6b218b",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "13aa1ceaf4884ade892ebae16a7a861a",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1b61a492c5ba45ffa500ea5320f7d293",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "DSCore.List.FilterByBoolMask(l,ln>lnmin)[\"in\"];",
      "Id": "0cff9d8c818a4c4d8ee2e818780b77fe",
      "Inputs": [
        {
          "Id": "9a12564a4be94ad99ed53b9e0dd34e1f",
          "Name": "l",
          "Description": "l",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3b3ec8e289e64cc880facd23badd818a",
          "Name": "ln",
          "Description": "ln",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fc12eb3620b24e88872f9a97a2cdbeb8",
          "Name": "lnmin",
          "Description": "lnmin",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7291a05fd93340968a674fdd0b71eef8",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetLocation",
      "Id": "721e24b9705241bab99276278965d699",
      "Inputs": [
        {
          "Id": "7e55649b23044f828c7d9cbf66fcceda",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6af8594bda64495396902c4afa6f03d0",
          "Name": "Geometry",
          "Description": "Геометрия местоположения",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение местоположения для имеющегося элемента\n\nElement.GetLocation ( ): Geometry"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Curve.Length",
      "Id": "7322bedb0c76439a935079155bc054f8",
      "Inputs": [
        {
          "Id": "0dc78a051a5047f5bc0a489f73b10656",
          "Name": "curve",
          "Description": "Autodesk.DesignScript.Geometry.Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "de050d1943a14570bc9620b5a070fad3",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Общая длина дуги кривой\n\nCurve.Length: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "DSCore.List.FilterByBoolMask(l,DSCore.String.Contains(m,\"Вн_О\")||DSCore.String.Contains(m,\"Нр_О\"))[\"out\"];",
      "Id": "dfab32748ac146ccaf4e2b72237ca3c5",
      "Inputs": [
        {
          "Id": "037e9366c9b44b5c9ea6eba138c49ee4",
          "Name": "l",
          "Description": "l",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "dfa83f3dc8ec4c5cb89e23df5127173d",
          "Name": "m",
          "Description": "m",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3897edf47e1e48d88d6895ce2b014f5b",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Name",
      "Id": "4f83a11eb6b54df4b8474d73cc09a308",
      "Inputs": [
        {
          "Id": "f69e1a917d3846e5a1ebe7e83fffac04",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4435285b70c04bfaba7977187c2f6e92",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение имени элемента\n\nElement.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "f05dc3803d42422ca6e5136af20b072e",
      "Inputs": [
        {
          "Id": "f9d29f495e2f430bb254496701899f33",
          "Name": "list",
          "Description": "Список для выравнивания.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f1a82650993742f5af306c175710a43a",
          "Name": "amt",
          "Description": "Слои вложения для удаления.\n\nint\nЗначение по умолчанию : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0133d2f37ba14ec499621cfe3c1a0597",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выравнивание вложенного списка списков по определенному количественному значению.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.OfCategory@var,Revit.Elements.Category",
      "Id": "06713f3e186843d7b4822a40e82755d8",
      "Inputs": [
        {
          "Id": "d8289462234a4f74acf3a0ae74e0622c",
          "Name": "linkInstance",
          "Description": "Input the Revit link instance.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0cc0c25168594a97b73f0465257a207a",
          "Name": "Category",
          "Description": "Input the Element Category.\n\nCategory",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e3f71876478d47cba57d11419367765f",
          "Name": "LinkElement[]",
          "Description": "LinkElement[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get LinkElements from a Revit LinkInstance by Category. LinkElements are optimised for use with BimorphNodes Element and BoundingBox nodes and are compatible with all nodes that accept Elements as inputs.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.OfCategory (linkInstance: var, Category: Category): LinkElement[]"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 550,
      "SelectedString": "OST_Walls",
      "NodeType": "ExtensionNode",
      "Id": "f7d0a7510796458cb05af8a72731d42d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "560cb3a07e0846108239228ffc82c646",
          "Name": "Category",
          "Description": "Выбранная категория.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Все предопределенные категории."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 128,
      "SelectedString": "OST_CableTray",
      "NodeType": "ExtensionNode",
      "Id": "272c9a8e373947e3b05de94b3d00da98",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2c7f8203cf93440abef65f0eb5a2f782",
          "Name": "Category",
          "Description": "Выбранная категория.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Все предопределенные категории."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "63a64d5aa0d44c539c2a068612114680",
      "Inputs": [
        {
          "Id": "6c15b84a76084339ba395621ecb23884",
          "Name": "Category",
          "Description": "Категория",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "40c03a2923904786a38d82334237191c",
          "Name": "Elements",
          "Description": "Тип элемента.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Получение из модели всех элементов определенной категории."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.Element",
      "Id": "7752a4e89dd64076a54148b16354c704",
      "Inputs": [
        {
          "Id": "64d2611126af4bfb936710685d620e8f",
          "Name": "linkElement",
          "Description": "Revit.LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "794e12e82e0e482e8f47c895172226cf",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Element stored in this LinkElement. Use the Element with any nodes that are incompatible with the LinkElement.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.Element: Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "4796d57c-a1a0-4676-b524-57abb5fa73be",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "5c59b9bb7de34ad289c31255aa069721",
      "Inputs": [
        {
          "Id": "39b40381009046f4b6ca5712e4afda2d",
          "Name": "element",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "02f0f2b49e954d40bfc5ad7cf54a3edc",
          "Name": "type",
          "Description": "возвращаемое значение",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Gets the family type of a given element (if applicable). Unlike the OOTB node, it also works for elements in linked models."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "str==null?\"Вн_О\":str;",
      "Id": "d752164309ff4ba0a33764d597ef808a",
      "Inputs": [
        {
          "Id": "27b32b54915b46299efb39304e1522a2",
          "Name": "str",
          "Description": "str",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2a436693289148a8a1c6e41f5a432905",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "b2e8e485e36a4a74bd79f0d4b21ee98c",
      "Inputs": [
        {
          "Id": "754e9dad5a6046d9bff722e752d88293",
          "Name": "list",
          "Description": "Список для выравнивания.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "770bdbcdb7b94e339d97d97d601dcbac",
          "Name": "amt",
          "Description": "Слои вложения для удаления.\n\nint\nЗначение по умолчанию : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2e8e8a68421b4746a082f0122f08cdf2",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выравнивание вложенного списка списков по определенному количественному значению.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.OfCategory@var,Revit.Elements.Category",
      "Id": "c262b70c7f564d42bba05c4efae029ec",
      "Inputs": [
        {
          "Id": "0dfd730dc05c4096ad76f3fcba447a86",
          "Name": "linkInstance",
          "Description": "Input the Revit link instance.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b20f951852cb4380aad1485d8e85d574",
          "Name": "Category",
          "Description": "Input the Element Category.\n\nCategory",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2446421dead24808b8a8db550390821b",
          "Name": "LinkElement[]",
          "Description": "LinkElement[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get LinkElements from a Revit LinkInstance by Category. LinkElements are optimised for use with BimorphNodes Element and BoundingBox nodes and are compatible with all nodes that accept Elements as inputs.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.OfCategory (linkInstance: var, Category: Category): LinkElement[]"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 390,
      "SelectedString": "OST_GenericModel",
      "NodeType": "ExtensionNode",
      "Id": "c2fb2a4d66714f38a85b2df69e629a78",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "991a20cada114179953acadaf0eeef5b",
          "Name": "Category",
          "Description": "Выбранная категория.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Все предопределенные категории."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.Element",
      "Id": "b3126314765e4bccbbe68e0ae6c2b6ea",
      "Inputs": [
        {
          "Id": "d3a73707834e4b18810a147df9c87f02",
          "Name": "linkElement",
          "Description": "Revit.LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d10ccd90dd35433f8565e7b93457a401",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Element stored in this LinkElement. Use the Element with any nodes that are incompatible with the LinkElement.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.Element: Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyInstance.GetFamily",
      "Id": "dc8ce536f5e84f9aae179010f58801a7",
      "Inputs": [
        {
          "Id": "694bea8849ce4771959f3bdc97021a31",
          "Name": "familyInstance",
          "Description": "Revit.Elements.FamilyInstance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dc1194fb162f427586cc534c7cbc887f",
          "Name": "Family",
          "Description": "Family",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение семейства для данного экземпляра семейства\n\nFamilyInstance.GetFamily: Family"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Name",
      "Id": "78bd9da1e856429a9fe8061e06078770",
      "Inputs": [
        {
          "Id": "73a7450dfdaf471ebba4ccc52c54a0ff",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8c1728d2f3bc4100b073a915782d2333",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение имени элемента\n\nElement.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "2c656fd0f0bb490db709ebc03d0e2c05",
      "Inputs": [
        {
          "Id": "790ed50adf684225915e17cf87866038",
          "Name": "list0",
          "Description": "Списки для объединения в один.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "098cb1bb0f8e4160bc4daf06a44414cf",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "355299ffc4244a0698b61e597793894d",
          "Name": "list",
          "Description": "Объединенный список.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Объединение всех имеющихся списков в один.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "89fe93ee50eb4cdfbe452387ffb13533",
      "Inputs": [
        {
          "Id": "3c4f0c626ece4881a3159b7c505525ee",
          "Name": "list0",
          "Description": "Списки для объединения в один.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d164f41d37f04ac5b92f68ba5be078bc",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "93be078b4d1746fdb8e9cbf7eedc1221",
          "Name": "list2",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3ffb5e5c670d4faea3f95e4b84c94e0a",
          "Name": "list3",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "96f1e0c19bed4162983ed19470a8cd51",
          "Name": "list",
          "Description": "Объединенный список.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Объединение всех имеющихся списков в один.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "a894a806b28d4580a7576f47ab6e76c9",
      "Inputs": [
        {
          "Id": "a3031266e9784725826e930800852920",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "025e46405bee4f62b1f0b513c5600b36",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f098273ffd3247808467cde825cb6717",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9df0f11210e24371bd926c681d204bed",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Версия задания\";",
      "Id": "ddbdd124e6a345539a95d4ab945d08e5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6f8fea666f554d5d915fec390780d6c8",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//Параметр;\n\"SD_Версия задания\";",
      "Id": "e4f7bdb1b9da4e71a40f4bfc62474a60",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f678fa2de1f64e74a14ac92ce0cb3993",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "5bc8ed4c43134eaab5ecbd6e9b6b8b82",
      "Inputs": [
        {
          "Id": "c7d82e30083f4ebfb6f92c2db5038b70",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "03ee84ef24aa4fb58419ccd382308e31",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8a71e416aef345e0a9ef15cac6829370",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\nOUT = []\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\nfor i in IN[0]:\r\n\tsplit_list = split_string(i,'|')\r\n\tnew_str=''\r\n\ttry:\r\n\t\tsplit_list.pop(8)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\tsplit_list.append('Актуальное')\r\n\tfor i in split_list:\r\n\t\tnew_str+=i+'|'\r\n\tnew_str = new_str[:-1]\r\n\tOUT.Add(new_str)",
      "VariableInputPorts": true,
      "Id": "7e9753cf12e9447db51dcfb5806e42e5",
      "Inputs": [
        {
          "Id": "6fff7645352d48b6ba7a65e5f414642a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "072984e07fde4b2fb3624b33529d8473",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.SetDifference@var[],var[]",
      "Id": "88118973411f49d294b7ce7cc84638f1",
      "Inputs": [
        {
          "Id": "ab9f199d386b4e2884c0f7b4a6cfe34c",
          "Name": "list1",
          "Description": "Список объектов, которые будут включены в новый список.\n\nvar[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fb76b52b1ed847cdba41ad53bcb95388",
          "Name": "list2",
          "Description": "Список объектов, которые будут исключены из нового списка.\n\nvar[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1f950145d0e747479a0848024c430e1e",
          "Name": "newList",
          "Description": "Новый список, в котором содержатся объекты из Списка1 и отсутствуют из Списка2.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Возвращает новый список, в котором содержатся объекты из Списка1, но отсутствуют объекты из Списка2.\n\nList.SetDifference (list1: var[], list2: var[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "DSCore.List.FilterByBoolMask(l,n==\"Отверстие в стене_Прямоугольное\")[\"in\"];",
      "Id": "c6d9f781d5e04b0caa014db95ff0bf96",
      "Inputs": [
        {
          "Id": "ba5d21857b1d4698b4e9aa77516b487b",
          "Name": "l",
          "Description": "l",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1d86e1803eba4d339044502d9cb8e4b9",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "276b1716921f4f119ab6dcb69de9fd1a",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "DSCore.List.FilterByBoolMask(l,n==\"Отверстие в стене_Прямоугольное1\")[\"in\"];",
      "Id": "264a947abf1d4eadb4e8dbc64f6f2351",
      "Inputs": [
        {
          "Id": "b9febde62c3240f7b3555bcbd71d3d02",
          "Name": "l",
          "Description": "l",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b052a075d7be4f1b95f48be727ca13d1",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7bac371366aa4e0688d695fb5e220eda",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "DSCore.List.FilterByBoolMask(l,n==\"Отверстие в стене_Прямоугольное1\")[\"in\"];",
      "Id": "e60995124cbe4aea8cc60d3985707ae3",
      "Inputs": [
        {
          "Id": "806c7e2dd02c44d48bb8af83bef90069",
          "Name": "l",
          "Description": "l",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d2a6822dacaa4bdca5da34b160a3972f",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f1970d1e7d3b47a1bf82525b2eb8988e",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "c90f22494a994163b6c8d3d00dac1fae",
      "Inputs": [
        {
          "Id": "50b2f73272aa4d70bb3e77e3e2131cfc",
          "Name": "list0",
          "Description": "Списки для объединения в один.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8eda90fd841e441cb20b03d272991717",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a3688513e4884fc5bca5188707d4849b",
          "Name": "list",
          "Description": "Объединенный список.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Объединение всех имеющихся списков в один.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.Location",
      "Id": "e8a5dd27f51b4709a816e7adf4f28dbd",
      "Inputs": [
        {
          "Id": "29e1c9368a0348e19b7b74a2374a1648",
          "Name": "linkElement",
          "Description": "Revit.LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b15d7d5ecbea4af19a22c23e1c691ca4",
          "Name": "Geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the location of this LinkElement at its host location.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.Location: Geometry"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.XAxis",
      "Id": "e8f76166f00e48f2a9fad1ecf6a19e8e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e5be8ec1783d46bda09377c81e4d1608",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение канонического вектора оси X (1; 0; 0)\n\nVector.XAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Id",
      "Id": "0778048fd18243d0a2ece200d6e66110",
      "Inputs": [
        {
          "Id": "f0f141c4ded6420c8bde056a4da807fe",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "76d5cd2378e745768308f3701f6bf35b",
          "Name": "int",
          "Description": "int",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение идентификатора для данного элемента\n\nElement.Id: int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Толщина\";",
      "Id": "167cf29bf05a4a3f93092554f0359368",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "10a6b675d4fe48a8b911c8021f098676",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "3605d70956b94ad0bf9c61220ff0e320",
      "Inputs": [
        {
          "Id": "48ca6b44b2094aba965979706bc98fa7",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8350c80d7bbc4d53aa57c3db2982434d",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ec02877881864ec281e3b995b7f6af1c",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "f3228c78-e4a0-42f0-8ec3-a19daf7157bb",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "dda32d1a3f804734a6eca8fceb165905",
      "Inputs": [
        {
          "Id": "512f95d9f3744f8da4aa3b2179c20ead",
          "Name": "element",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dfd52a70cae9469aabaf65deeafc7f4e",
          "Name": "Host",
          "Description": "возвращаемое значение",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Gets the host of the element.\r\nUnlike the OOTB node FamilyInstance.GetHost, it also works for elements hosted by a linked document, wall sweeps, foundations, railings and builing pads.\r\nBased on a Clockwork's node"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nfrom Autodesk.Revit.DB import Floor, Element\r\n\r\nfloors = UnwrapElement(IN[0])\r\nOUT = []\r\n\r\nfor f in floors:\r\n\tif f.GetType() == Floor:\r\n\t\tOUT.Add(f.FloorType)\r\n\telse:\r\n\t\tOUT.Add(f.Symbol)",
      "VariableInputPorts": true,
      "Id": "401d5a48043b49a5961dcdaabf73a954",
      "Inputs": [
        {
          "Id": "98c2f221136640eb945c4acfd1cd0b5e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c59cb0a0123a471dbb0882f32445f4e0",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "DSCore.List.FilterByBoolMask(l,n==\"(Отверстие) Перекрытие\")[\"in\"];",
      "Id": "ef8c860960e64635aabad6c0a2de95f5",
      "Inputs": [
        {
          "Id": "0351203f88854194b818f08c41e13c2d",
          "Name": "l",
          "Description": "l",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8c40ac1bf64d4d008d6732935d74eb45",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "71eb1e4972c340ff971e8731f56159e3",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitAPIUI\")\r\n\r\nfrom Autodesk.Revit.DB import * \r\n\r\n# Import DocumentManager\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\nlink_walls = IN[0]\r\nwalls = UnwrapElement(IN[0])\r\nidwalls =IN[1]\r\n\r\nallid= []\r\nOUT =[]\r\nfor wall in walls:\r\n\tallid.Add(str(wall.Id))\r\n\t\r\n# Разместите код под этой строкой\r\nfor wallId in idwalls:\r\n\twallId = str(wallId)\r\n\telementId = allid.index(wallId)\r\n\tOUT.Add(link_walls[elementId])\r\n\r\n\r\n\t\t\t\r\n# Назначьте вывод переменной OUT.\r\n",
      "VariableInputPorts": true,
      "Id": "1657c510a32745d783bd208ebd2e3f9d",
      "Inputs": [
        {
          "Id": "bec83875173849cabd5ab96e504f4d0a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ff8ede7424fa473ebdc5b3f84cfe0c7d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5bf9803eccb3468691d27d71d769b70a",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cc59f57af6b3446a950bf5557a386769",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "2f7f529281b04a83b5e4c95281e8a911",
      "Inputs": [
        {
          "Id": "85c4f463c0d44fa985d9e40270c27d0d",
          "Name": "list",
          "Description": "Список для выравнивания.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1278bf491b5044e6bde018f9f655b098",
          "Name": "amt",
          "Description": "Слои вложения для удаления.\n\nint\nЗначение по умолчанию : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "12c303b0b6464e1186430b66a218f3eb",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выравнивание вложенного списка списков по определенному количественному значению.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.OfCategory@var,Revit.Elements.Category",
      "Id": "2e7dc57e12e6458f95aac49dea4cd8c1",
      "Inputs": [
        {
          "Id": "874ac22a6c8648db9ee510acb1cf2ed0",
          "Name": "linkInstance",
          "Description": "Input the Revit link instance.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7b4c38269f19431bb7ffcbb7d72b68e9",
          "Name": "Category",
          "Description": "Input the Element Category.\n\nCategory",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0cdc50887d634c278a9bcef35baf517c",
          "Name": "LinkElement[]",
          "Description": "LinkElement[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get LinkElements from a Revit LinkInstance by Category. LinkElements are optimised for use with BimorphNodes Element and BoundingBox nodes and are compatible with all nodes that accept Elements as inputs.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.OfCategory (linkInstance: var, Category: Category): LinkElement[]"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 390,
      "SelectedString": "OST_GenericModel",
      "NodeType": "ExtensionNode",
      "Id": "be754a17dc6e401285bd12acbb8ab9b4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b6e8b60d5c624386996e6949f6bf1af2",
          "Name": "Category",
          "Description": "Выбранная категория.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Все предопределенные категории."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.Element",
      "Id": "e1cbc1f0706d401bb6f9e62ce6b03342",
      "Inputs": [
        {
          "Id": "03058bb175f748a5abeededc84f2cf86",
          "Name": "linkElement",
          "Description": "Revit.LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "266141f68aa2472c922fe497f87e6461",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Element stored in this LinkElement. Use the Element with any nodes that are incompatible with the LinkElement.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.Element: Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyInstance.GetFamily",
      "Id": "feb21ca536d04dd6a50d19ccdc9b0f6e",
      "Inputs": [
        {
          "Id": "ca32a1b93fb54442aa8347ff82c2e3a9",
          "Name": "familyInstance",
          "Description": "Revit.Elements.FamilyInstance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a2f5684b5fa04436bc06a1f9d5e0a001",
          "Name": "Family",
          "Description": "Family",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение семейства для данного экземпляра семейства\n\nFamilyInstance.GetFamily: Family"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Name",
      "Id": "b9589d09063049118f1f7006663b476f",
      "Inputs": [
        {
          "Id": "012cf7412dcb467093e8102b955e505c",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1ac874b644b5464ca8c285e6c517a314",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение имени элемента\n\nElement.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.TotalTransform",
      "Id": "cdbea3a49f7b477ebbe18aafd5268b9f",
      "Inputs": [
        {
          "Id": "479c6ad47483429f96d0200914853691",
          "Name": "linkElement",
          "Description": "Revit.LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b7b5087098ae478bb42d4b23a4d71bc9",
          "Name": "CoordinateSystem",
          "Description": "CoordinateSystem",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The total transform of the RevitLinkInstance from where this LinkElement derived.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.TotalTransform: CoordinateSystem"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.ZAxis",
      "Id": "c0ecaee5745b4f6e87b2e2097d8361f8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "da1efa3f811847a797fa4c5c1a2c88a0",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение канонического вектора оси Z (0; 0; 1)\n\nVector.ZAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.AngleAboutAxis@Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector",
      "Id": "ac2917d4d79d4a9ab9d70f7f879703ce",
      "Inputs": [
        {
          "Id": "11b490519d6943b5a08a085aa1b613f5",
          "Name": "vector",
          "Description": "Autodesk.DesignScript.Geometry.Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ec111e1e7443428fb8de5329785540b2",
          "Name": "otherVector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3cb31da4ec004603b57d4d68022ac97f",
          "Name": "rotationAxis",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dc4be96f4823413a9764c63a5ea8713d",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение угла между двумя векторами в следующем диапазоне градусов: [0, 360]. Для определения направления угла используется ось вращения.\n\nVector.AngleAboutAxis (otherVector: Vector, rotationAxis: Vector): double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x.XAxis;",
      "Id": "62901d2ea12e47d98881abb3d858d23f",
      "Inputs": [
        {
          "Id": "82f692959d62486390986d14046b22fe",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6dd3ca7511bd4474b40277fb38853b4b",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"(Отв_Задание)_Перекрытия_Прямоугольное\";",
      "Id": "57339e0c785946bc9a5875e4581d1962",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c0824a8a708a466b861b03b7a81a88b7",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "2317b43360d94d5f924761d5d75fd8e7",
      "Inputs": [
        {
          "Id": "97cf320d576e45019f3d47a675cfd07d",
          "Name": "name",
          "Description": "Имя FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e2012871b78a46caa7502fedec098469",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выберите FamilyType, указав его имя. При наличии двух и более FamilyType с одинаковым именем этот метод вернет первый найденный FamilyType.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfFamilyType, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "c47623009412409ea7bdbd78f711f68b",
      "Inputs": [
        {
          "Id": "8e4d210c8fba4ff29f527d0b22bca875",
          "Name": "Family Type",
          "Description": "Тип семейства.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ace4a8166481419ba57d7467b27047e4",
          "Name": "Elements",
          "Description": "Список элементов, соответствующих запросу.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Получение из модели всех элементов определенного типа семейства."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e5e89beb3bfe4a14aa5637d3194a5078",
      "Inputs": [
        {
          "Id": "f223d1338a694cc792f1c35b49cc42c2",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4b2f904757b6433e9c4749285019b7b2",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "28ca23cf37b44ad189259323570ad30a",
      "Inputs": [
        {
          "Id": "6d5fe9ed774642558768f0fff45110de",
          "Name": "list",
          "Description": "Список для выравнивания.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "656154a96fe5422494662e04a8b995e1",
          "Name": "amt",
          "Description": "Слои вложения для удаления.\n\nint\nЗначение по умолчанию : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "11528855ebcf4d86a20b7ae7e3ea89cc",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выравнивание вложенного списка списков по определенному количественному значению.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Solids",
      "Id": "b5a2cee5dad74e6a938d56d804feed7b",
      "Inputs": [
        {
          "Id": "0f498dfc4d97469a8c6060ef788ce0bf",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "df2433c649b04944b0d202fbb3530239",
          "Name": "Solid[]",
          "Description": "Solid[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Твердые тела в данном элементе\n\nElement.Solids: Solid[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//Параметр;\n\"SD_Версия задания\";",
      "Id": "b5b97c5c46e3433d9cddbb7489868303",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "aae09442950b4db08ebc25962f012965",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "4eb6323f17c74384a878471d93f76320",
      "Inputs": [
        {
          "Id": "8fce3460f85e44f3ad454b3805fd19f8",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "aa30604d008d4576a19880dac2962ab9",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "820aff517f354488976da3bdaca6db89",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Версия задания\";",
      "Id": "c50a48c769a943858172500321cd7241",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2012237fd8944ad1be396f5d721d0264",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\nOUT = []\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\nfor i in IN[0]:\r\n\tsplit_list = split_string(i,'|')\r\n\tnew_str=''\r\n\ttry:\r\n\t\tsplit_list.pop(8)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\tsplit_list.append('Не актуально')\r\n\tfor i in split_list:\r\n\t\tnew_str+=i+'|'\r\n\tnew_str = new_str[:-1]\r\n\tOUT.Add(new_str)",
      "VariableInputPorts": true,
      "Id": "8cde88eac19a4532ab8624ed6eba673c",
      "Inputs": [
        {
          "Id": "18f36256df9b41c09b7134bbd8f560c1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f5afde33d5c84ff1bf0b401578c9cbe3",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "792f95e5c919426eb588d08309e06de7",
      "Inputs": [
        {
          "Id": "4f6b23e5ca4d49bab917db53ea9400e6",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "036e10dcf38d4f2b977560fdfc4fc68f",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "983601cb5dbe48af84206c09fad2a714",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5475ab0fea3946ce901d28bc3387b4aa",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.Solids",
      "Id": "77e4a37d435548618ec170edd4aa7da7",
      "Inputs": [
        {
          "Id": "7f087515bcb542bc9868e5fdc4ced15b",
          "Name": "linkElement",
          "Description": "Revit.LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c6fbbfaf4701417b839bbeed5f6e430a",
          "Name": "Solid[]",
          "Description": "Solid[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The Solids in this LinkElement at its host location.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.Solids: Solid[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "d363fc10220340b58b8a18bfde066a61",
      "Inputs": [
        {
          "Id": "572d41b3796d41b9bc2ee360cfdba2c4",
          "Name": "list",
          "Description": "Список, который требуется отфильтровать.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "abb7939d554e46128c31a0097e1568b0",
          "Name": "mask",
          "Description": "Список логических операций, представляющих маску.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d8119cb8aed34546aeb524afc0493c30",
          "Name": "in",
          "Description": "Элементы, индекс маски которых имеет значение «истина».",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c4a4309590d04c18b0a8e3ee55103515",
          "Name": "out",
          "Description": "Элементы, индекс маски которых имеет значение «ложь».",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Фильтрация последовательности путем поиска соответствующих индексов в отдельном списке логических операций.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.IsEmpty@var[]..[]",
      "Id": "d82098c7322645ecbdc40c77bac9827d",
      "Inputs": [
        {
          "Id": "fb85afcef91246d6bda9d2ceef9efdfd",
          "Name": "list",
          "Description": "Список для проверки элементов.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cbd138336b3c40319f9be5fb372f3553",
          "Name": "bool",
          "Description": "Пуст ли список.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Определение того, пуст ли данный список.\n\nList.IsEmpty (list: var[]..[]): bool"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "!x;",
      "Id": "805d8a304eb847b9aa3482744d8d2624",
      "Inputs": [
        {
          "Id": "eaebea366a83403f98f83b8ebec2a506",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "46455265b6714759840595cd43004441",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "str==null?\"Вн_О\":str;",
      "Id": "ab1491871e194ab1a34614d85a4e35dc",
      "Inputs": [
        {
          "Id": "ff4d22a7b0334f52a78c129bc61a844b",
          "Name": "str",
          "Description": "str",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "36a515b57093434db316220baccc5040",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "DSCore.List.FilterByBoolMask(l,DSCore.String.Contains(m,\"Вн_О\")||DSCore.String.Contains(m,\"Нр_О\"))[\"out\"];",
      "Id": "212fb647625e4c2f9bef67a91ea39a39",
      "Inputs": [
        {
          "Id": "3024846ca6db49d9bb4c6e898c30217f",
          "Name": "l",
          "Description": "l",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6bd4b20a9ddc4f19a2f1a29d80f4f5d4",
          "Name": "m",
          "Description": "m",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d74fe63a73734f60b544fa80f0dab04a",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "4fe530680ed64cf0b569db6f3633190a",
      "Inputs": [
        {
          "Id": "2d2100fd3cc449a8ab57ae6c0f00f597",
          "Name": "list",
          "Description": "Список для выравнивания.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f506fb560c3b4d82bb194bcda15cbd12",
          "Name": "amt",
          "Description": "Слои вложения для удаления.\n\nint\nЗначение по умолчанию : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0568b97f4bcb4392a3bb6932a258a995",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выравнивание вложенного списка списков по определенному количественному значению.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "4796d57c-a1a0-4676-b524-57abb5fa73be",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "b61f9389425b4ef7ae704498f0b094e5",
      "Inputs": [
        {
          "Id": "61d60baff68a4356927eae5785974e3b",
          "Name": "element",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e6be2b40f3174ec2ba618a663e8289ff",
          "Name": "type",
          "Description": "возвращаемое значение",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Gets the family type of a given element (if applicable). Unlike the OOTB node, it also works for elements in linked models."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Name",
      "Id": "60b8b6f1337240cbb960181bd0f3aae3",
      "Inputs": [
        {
          "Id": "e27a494b1e2c441fac37bc761bf56c5e",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "43a4c07c33994bf0aa1ebc37911922e5",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение имени элемента\n\nElement.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.OfCategory@var,Revit.Elements.Category",
      "Id": "d2587c439594406faec50a2b7cdf7e63",
      "Inputs": [
        {
          "Id": "c9b737b2f6bc4f31abdadba96afe4eec",
          "Name": "linkInstance",
          "Description": "Input the Revit link instance.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "feb14f385df44d3faffc8394ac17bae3",
          "Name": "Category",
          "Description": "Input the Element Category.\n\nCategory",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "73c1caaf3fed4ae9879f9d30f7533e57",
          "Name": "LinkElement[]",
          "Description": "LinkElement[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get LinkElements from a Revit LinkInstance by Category. LinkElements are optimised for use with BimorphNodes Element and BoundingBox nodes and are compatible with all nodes that accept Elements as inputs.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.OfCategory (linkInstance: var, Category: Category): LinkElement[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.Element",
      "Id": "7abdb1674e9d49ba94d54d81c629ba93",
      "Inputs": [
        {
          "Id": "337c55db8e2a4fcbb61738853d2f1e4b",
          "Name": "linkElement",
          "Description": "Revit.LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b7970f4a409540c3b51e21feb1eb7022",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Element stored in this LinkElement. Use the Element with any nodes that are incompatible with the LinkElement.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.Element: Element"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 459,
      "SelectedString": "OST_Floors",
      "NodeType": "ExtensionNode",
      "Id": "0f3bcef79662439dbb3b1fbbee7c907c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "41f642f400954a139f368f1459487f77",
          "Name": "Category",
          "Description": "Выбранная категория.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Все предопределенные категории."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nimport math\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\notvs= UnwrapElement(IN[0])\r\notv_locs1 = IN[1]\r\ndelta = IN[4]\r\notv_ccs_angle = IN[2]\r\notv_depth = IN[3]\r\n\r\notv_locs = []\r\notv_rot =[]\r\notv_width =[]\r\notv_lenth =[]\r\notv_hight =[]\r\n\r\nOUT=[]\r\n\r\n\r\n\r\n\r\n\r\n# созданные функции\r\n\r\ndef get_parameters_elements(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\totv_lenth.Add(i)\r\n\treturn otv_lenth\r\n\r\n\r\ndef surfase(pO, angle, width, len, delta,Ez, el):\r\n\tOE = float(width)/2 \r\n\tOF = float(len)/2 \r\n\tpoint_list = []\r\n\r\n\tEx = pO.X * 304.8 + (OE+delta)*math.cos(math.radians(float(angle))) \r\n\tEy = pO.Y * 304.8 + (OE+delta)*math.sin(math.radians(float(angle)))\r\n\t\r\n\tGx = pO.X * 304.8 - (OE+delta)*math.cos(math.radians(float(angle)))\r\n\tGy = pO.Y * 304.8 - (OE+delta)*math.sin(math.radians(float(angle)))\t\r\n\t\r\n\tAx = Gx\r\n\tAy = Gy\r\n\tAz = pO.Z * 304.8+(OF+delta)\r\n\t\r\n\tBx = Ex\r\n\tBy = Ey\r\n\tBz = pO.Z * 304.8+(OF+delta)\r\n\t\r\n\tDx = Gx\r\n\tDy = Gy\r\n\tDz = pO.Z * 304.8-(OF+delta)\r\n\t\r\n\tCx = Ex\r\n\tCy = Ey\r\n\tCz = pO.Z * 304.8-(OF+delta)\r\n\t\r\n\tpoint_list.append(Point.ByCoordinates(Ax, Ay, Az))\r\n\tpoint_list.append(Point.ByCoordinates(Bx, By, Bz))\r\n\tpoint_list.append(Point.ByCoordinates(Cx, Cy, Cz))\r\n\tpoint_list.append(Point.ByCoordinates(Dx,Dy,Dz))\r\n\tsurface = Surface.ByPerimeterPoints(point_list)\r\n\t\r\n\treturn surface\r\n\t\r\ndef surfaces(elements, locs_list, rot_list, width_list, lenth_list, delta, tz_depth):\r\n\ttest =[]\r\n\tsufraces_list = []\r\n\tfor i, el in enumerate(elements):\r\n\t\ttest.Add(i)\r\n\t\tpO = locs_list[i]\r\n\t\tangle = rot_list[i]\r\n\t\twidth = width_list[i]\r\n\t\tlen = lenth_list[i]\r\n\t\t\r\n\t\tdepth = float(tz_depth[i]) - 60\r\n\t\tEz = pO.Z * 304.8 + depth/2\r\n\t\t\t\r\n\t\t\r\n\t\tsufraces_list.Add(surfase(pO, angle, width, len, delta,Ez,el))\r\n\treturn sufraces_list\r\n\r\ndef solid_from_surface(surface, centrP, depth):\r\n\tdelta = depth/2\r\n\tcentrP = Point.ByCoordinates(centrP.X*304.8,centrP.Y*304.8,centrP.Z*304.8)\r\n\tnorkvector = Surface.NormalAtParameter(surface)\r\n\tnorkvector = Vector.ByCoordinates(norkvector.X*delta, norkvector.Y*delta, norkvector.Z*delta)\r\n\tStartPoint = Point.Add(centrP,norkvector)\r\n\tEndPoint = Point.Subtract(centrP,norkvector)\r\n\t\r\n\tline = Line.ByStartPointEndPoint(StartPoint,EndPoint)\r\n\tline1 = Line.ByStartPointEndPoint(EndPoint,centrP)\r\n\tline2 = Line.ByStartPointEndPoint(centrP,StartPoint)\r\n\tStartSurface = Surface.Offset(surface, depth)\r\n\t\r\n\t\r\n\t\r\n\tperimetrlines = Surface.PerimeterCurves(surface)\r\n\tperimetrcurve = Curve.Join(perimetrlines[0],perimetrlines[1:])\r\n\tsolid1 = Solid.BySweep(perimetrcurve,line1)\r\n\tsolid2 = Solid.BySweep(perimetrcurve,line2)\r\n\tsol = Solid.ByUnion([solid1,solid2])\r\n\t\r\n\treturn sol\r\n\r\n\r\ndef solids_from_surfaces(surfaces, centrPs, depth):\r\n\tsolids = []\r\n\tfor i, surf in enumerate(surfaces):\r\n\t\tsol = solid_from_surface(surf, centrPs[i], depth[i])\r\n\t\tsolids.Add(sol)\r\n\treturn solids\r\n\r\n\r\n# Разместите код под этой строкой\r\n\r\notv_hight = get_parameters_elements(otvs, \"ADSK_Отверстие_Отметка от нуля\")\r\notv_lenth = get_parameters_elements(otvs, \"ADSK_Отверстие_Высота\")\r\notv_width = get_parameters_elements(otvs, \"ADSK_Отверстие_Ширина\")\r\n\r\nfor i, otv in enumerate(otv_locs1):\r\n\tpO = Point.ByCoordinates(otv.X/304.8,otv.Y/304.8,otv.Z/304.8+float(otv_hight[i])/304.8+float(otv_lenth[i])/304.8/2)\r\n\totv_locs.Add(pO)\r\n\r\nfor i,otv in enumerate(otvs):\r\n\totv_rot.Add(math.degrees(otv.Location.Rotation) + otv_ccs_angle[i])\r\n\t\r\n\r\n#map(lambda x:x+150, otv_depth)\r\n\r\n\r\n\r\notv_surfaces= surfaces(otvs,otv_locs,otv_rot,otv_width,otv_lenth, delta,otv_depth)\r\nsolids=solids_from_surfaces(otv_surfaces, otv_locs, otv_depth)\r\nOUT.Add(solids)\r\n\r\n\r\n\r\n\r\n#OUT.Add(otv_surfaces)\r\n\r\n# Назначьте вывод переменной OUT.\r\n",
      "VariableInputPorts": true,
      "Id": "63bc6c8ee041415fb8fcfdde8ed771c2",
      "Inputs": [
        {
          "Id": "be6e3e64b0654cb099de60b4feb42616",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d2cf9cd63d5b43daa9aa921da680f748",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2b93d656e27740958fa44e9a2a3a90eb",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6d8545b4ffd74e30b19ed44c6017f265",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "832874c0293c4bcebbad30bcfe39e715",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "578922d8a12145ceb598ab94df6f6d94",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.Location",
      "Id": "d48b84c11ad74d2ca2565a7fb95baf60",
      "Inputs": [
        {
          "Id": "9d4b60c3dbb74698a3f5db6ca5c3fc8e",
          "Name": "linkElement",
          "Description": "Revit.LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "091c194e42aa4085b61b89150df73c65",
          "Name": "Geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the location of this LinkElement at its host location.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.Location: Geometry"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.TotalTransform",
      "Id": "45c3c5800d4d4f9f9a4bfc4508c484e6",
      "Inputs": [
        {
          "Id": "12aef50b59b943d99ca58c1e4229ed1b",
          "Name": "linkElement",
          "Description": "Revit.LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2619e395d46842b8bfb902fe48fd4723",
          "Name": "CoordinateSystem",
          "Description": "CoordinateSystem",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The total transform of the RevitLinkInstance from where this LinkElement derived.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.TotalTransform: CoordinateSystem"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.AngleAboutAxis@Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector",
      "Id": "6cb5c58f8f6240af813d6845a07c84f7",
      "Inputs": [
        {
          "Id": "096b620279624843a84a6272bad984cb",
          "Name": "vector",
          "Description": "Autodesk.DesignScript.Geometry.Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4730cd9fd1d74260a9639dffa958555d",
          "Name": "otherVector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2042a0e325b7490a8c4e88a23b18398e",
          "Name": "rotationAxis",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6e5fb215d91549e3ac0c7ef234759355",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение угла между двумя векторами в следующем диапазоне градусов: [0, 360]. Для определения направления угла используется ось вращения.\n\nVector.AngleAboutAxis (otherVector: Vector, rotationAxis: Vector): double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.ZAxis",
      "Id": "3ab0a1b03ee84e95944d47bf17d7a250",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5012b114c3034d53864f7fe2f30fdc38",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение канонического вектора оси Z (0; 0; 1)\n\nVector.ZAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.XAxis",
      "Id": "59a962fbac9e4bf3bcadc42f2dd1afe1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "83499b6795554a48b27420fb910796fc",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение канонического вектора оси X (1; 0; 0)\n\nVector.XAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x.XAxis;",
      "Id": "2d328a9ce8824e2bbefe6ec2ef8de253",
      "Inputs": [
        {
          "Id": "b404940e5a7e48c1a6805c6f5fc8d222",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a93c7e1c938147af82c30a02d5a04167",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "f4516cb20e4d485097ab8db3b6cdd381",
      "Inputs": [
        {
          "Id": "c6de120b85a2463499b8b00e871edba0",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c007199102ba4a298ae7eda94f3e908d",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nwalls = UnwrapElement(IN[0])\r\nOUT = map(lambda x: (x.WallType.Width*304.8+100),walls)",
      "VariableInputPorts": true,
      "Id": "1973514e77d041fe82c6f23928d61d63",
      "Inputs": [
        {
          "Id": "28fc42dd6c634741a905d3fe1cbaf757",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b3cca59ae0444fc69af9da023360ec8b",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Id",
      "Id": "e482c82e66c94b698c8ba3d094f383ba",
      "Inputs": [
        {
          "Id": "4d78b5ec2c2f4e989a8b38adab7e735d",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "43b16b7c8b654ea1a45ffb4f75b493c5",
          "Name": "int",
          "Description": "int",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение идентификатора для данного элемента\n\nElement.Id: int"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitAPIUI\")\r\n\r\nfrom Autodesk.Revit.DB import * \r\n\r\n# Import DocumentManager\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\nlink_walls = IN[0]\r\nwalls = UnwrapElement(IN[0])\r\nidwalls =IN[1]\r\n\r\nallid= []\r\nOUT =[]\r\nfor wall in walls:\r\n\tallid.Add(str(wall.Id))\r\n\t\r\n# Разместите код под этой строкой\r\nfor wallId in idwalls:\r\n\twallId = str(wallId)\r\n\telementId = allid.index(wallId)\r\n\tOUT.Add(link_walls[elementId])\r\n\r\n\r\n\t\t\t\r\n# Назначьте вывод переменной OUT.\r\n",
      "VariableInputPorts": true,
      "Id": "d933b6c142e1435c913fe99e24eb7a69",
      "Inputs": [
        {
          "Id": "e2fc2468e6614374a37837b939b7f7df",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "39c9eca713f4430fbef67f0167cc87e2",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d3c5d1a107644510a386a9780d007811",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9f26c73c64f54e2884a4450927c3f617",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "f3228c78-e4a0-42f0-8ec3-a19daf7157bb",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "b24d6cb364bc4f438f6513f303647b5d",
      "Inputs": [
        {
          "Id": "5c4b2797e5424e54bf5f37c4ec1c440d",
          "Name": "element",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6284b1368c834eb096faec4a1a0c019e",
          "Name": "Host",
          "Description": "возвращаемое значение",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Gets the host of the element.\r\nUnlike the OOTB node FamilyInstance.GetHost, it also works for elements hosted by a linked document, wall sweeps, foundations, railings and builing pads.\r\nBased on a Clockwork's node"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "46d8f7a2335f4ff5843a1907f1dce395",
      "Inputs": [
        {
          "Id": "bea22f48c5224d9d9f6b343bc26e36b9",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "74f5f2dcfd494a41b82564acb6bc7f70",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b1c3db4e975144f583e67a929321a56a",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f32b88ccd5be40039b547a5699faba0e",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Версия задания\";",
      "Id": "f04e193837064b0b864c7c0819344ff4",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "258074da705742098e4b92233c25a1c3",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\nOUT = []\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\nfor i in IN[0]:\r\n\tsplit_list = split_string(i,'|')\r\n\tnew_str=''\r\n\ttry:\r\n\t\tsplit_list.pop(8)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\tsplit_list.append('Отработано')\r\n\tfor i in split_list:\r\n\t\tnew_str+=i+'|'\r\n\tnew_str = new_str[:-1]\r\n\tOUT.Add(new_str)",
      "VariableInputPorts": true,
      "Id": "d48a9fd5e21147f7b03cfeaf5afe00e0",
      "Inputs": [
        {
          "Id": "05afd62adba0465a9c088e131ffef0f9",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "554b54c0ab704460ba402335a71c8de2",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "d908e15e2a064d12a739443a28dc61ff",
      "Inputs": [
        {
          "Id": "f06c5d86f3ac4c9189a3b334e0a889d2",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "60538dce55d84ad499572ecfa7fc77c7",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cea122197ed04ccb99f1ab36cc760a79",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//Параметр;\n\"SD_Версия задания\";",
      "Id": "9b37b4c302fb4911a99f4ebd6c6851ef",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6c7e8f7adf2241648a4a03acb3f380c1",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "88526819623249a881be13cda3851031",
      "Inputs": [
        {
          "Id": "e34372e04dd34d169744f5ada1912838",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5524640958764d8a8657c9b1e36e7141",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2cc8be59c822422b8ffd34c4135fe543",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b1627441d4b64aaf8e6234afadc487b2",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//Параметр;\n\"SD_Версия задания\";",
      "Id": "f013859cc7104119a97ddbbf5e024bf3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a363841048b94be887e73ae8af23c016",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "dfab9b683b154afcb362111333293bb5",
      "Inputs": [
        {
          "Id": "f0ba6145631e44afb84a63e7ed9e3612",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a3a325fcac204e5081e3eaa4f7277706",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "10ccf1aa92ce456e95baa032ae58c64d",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Версия задания\";",
      "Id": "693c378008f84c2c89de65fa95f3affa",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "69e65fdb320f4599829e69c74ae91285",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\nOUT = []\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\nfor i in IN[0]:\r\n\tsplit_list = split_string(i,'|')\r\n\tnew_str=''\r\n\ttry:\r\n\t\tsplit_list.pop(8)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\tsplit_list.append('Не актуально')\r\n\tfor i in split_list:\r\n\t\tnew_str+=i+'|'\r\n\tnew_str = new_str[:-1]\r\n\tOUT.Add(new_str)",
      "VariableInputPorts": true,
      "Id": "817d43c93b88494aa74d62d5febde1ba",
      "Inputs": [
        {
          "Id": "0b5271626ae34d2fb10c4b768d2b572b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "514b9466b45a402388eeea0439328f62",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\ndataEnteringNode = IN\r\n\r\n# Разместите код под этой строкой\r\notv_solids =IN[0]\r\ntz_solids = IN[1]\r\ntzs =IN[2]\r\n# Назначьте вывод переменной OUT.\r\nOUT = []\r\n\r\nsolids_diff = []\r\nsolids_diff_area = []\r\nfor i, ot_solid in enumerate(otv_solids):\r\n\tfor j, tz_solid in enumerate(tz_solids):\r\n\t\r\n\t\tsolids_diff.Add(Solid.Difference(tz_solid,ot_solid))\r\n\t\tarea = Solid.Difference(tz_solid,ot_solid).Area\r\n\t\tsolids_diff_area.Add(area)\r\n\t\t\r\n\t\tif area >= 0 and area < 20:\r\n\t\t\tOUT.Add(tzs[j])\r\n\r\n\t",
      "VariableInputPorts": true,
      "Id": "f49d002bbf4248b5a7aa3127227a6a9b",
      "Inputs": [
        {
          "Id": "43790b4a10404e77af4ca4278cc000a6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "147134c6849040ac8f94d02c4e5e0eb1",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "457d99a170bf4ca69223dfee793ec05b",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "749904d6e41840ffa1aa3b2d1efc7c51",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "91788e67384747ed8578cacb5a85e2db",
      "Inputs": [
        {
          "Id": "bb5881e51b1a4dfc897261f7121dc9c6",
          "Name": "list",
          "Description": "Список для выравнивания.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "188b7b2890ab4b819e6472550478e38a",
          "Name": "amt",
          "Description": "Слои вложения для удаления.\n\nint\nЗначение по умолчанию : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "661f072ad2274e69bee5099be5b61691",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выравнивание вложенного списка списков по определенному количественному значению.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "8e40832771094586be8d185f08085b4d",
      "Inputs": [
        {
          "Id": "9d51cf6bbc2040c998ef5addac5e70e5",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c0ddcb08146940acbe0eead11684bb17",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"(Отв_Задание)_Стены_Прямоугольное\";",
      "Id": "d668ff4a6163496f9392fb136f35bf44",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3386e22863d448618f4a23111c80f539",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "402226d2250447aebcde0048373096c7",
      "Inputs": [
        {
          "Id": "8047aace059a49ecb82814f59c8815b5",
          "Name": "name",
          "Description": "Имя FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e2cd58a23e54401e9309ee0fd906a4ac",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выберите FamilyType, указав его имя. При наличии двух и более FamilyType с одинаковым именем этот метод вернет первый найденный FamilyType.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfFamilyType, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "1098ff3e2bfa439da1e0eb3719cb2c7e",
      "Inputs": [
        {
          "Id": "341be58c30fa486faa00b135d6e66e0c",
          "Name": "Family Type",
          "Description": "Тип семейства.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c2ce0473db9e4b69bc96684ab8b3c3f2",
          "Name": "Elements",
          "Description": "Список элементов, соответствующих запросу.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Получение из модели всех элементов определенного типа семейства."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nimport math\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\notvs= UnwrapElement(IN[0])\r\notv_locs1 = IN[1]\r\ndelta = IN[4]\r\nz_zapas = 150\r\notv_ccs_angle = IN[2]\r\notv_depth = IN[3]\r\n\r\notv_locs = []\r\notv_rot =[]\r\notv_width =[]\r\notv_lenth =[]\r\notv_depth = map(lambda x: x + z_zapas, otv_depth)\r\n\r\nOUT=[]\r\n\r\n\r\nfor otv in otv_locs1:\r\n\tpO = Point.ByCoordinates(otv.X/304.8,otv.Y/304.8,otv.Z/304.8+(z_zapas/304.8)/2)\r\n\totv_locs.Add(pO)\r\n\r\n\r\n\r\n# созданные функции\r\n\r\ndef get_parameters_elements(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\totv_lenth.Add(i)\r\n\treturn otv_lenth\r\n\r\n\r\ndef surfase(pO, angle, width, len, delta,Ez, el):\r\n\tOE = float(width)/2 \r\n\tOF = float(len)/2 \r\n\tpoint_list = []\r\n\t\r\n\tEx = pO.X * 304.8 + (OE+delta)*math.cos(math.radians(float(angle))) \r\n\tEy = pO.Y * 304.8 + (OE+delta)*math.sin(math.radians(float(angle)))\r\n\t\r\n\t\r\n\t\r\n\tTx = pO.X * 304.8 + (OF+delta)*math.sin(math.radians(float(angle)))\r\n\tTy = pO.Y * 304.8 - (OF+delta)*math.cos(math.radians(float(angle)))\r\n\t\r\n\tFx = pO.X * 304.8 - (OF+delta)*math.sin(math.radians(float(angle)))\r\n\tFy = pO.Y * 304.8 + (OF+delta)*math.cos(math.radians(float(angle)))\r\n\t\r\n\tGx = pO.X * 304.8 - (OE+delta)*math.cos(math.radians(float(angle)))\r\n\tGy = pO.Y * 304.8 - (OE+delta)*math.sin(math.radians(float(angle)))\r\n\t\r\n\t\r\n\t\r\n\tCx = round(Ex + (OF+delta)*math.sin(math.radians(float(angle))),3)\r\n\tCy = round(Ey - (OF+delta)*math.cos(math.radians(float(angle))),3)\r\n\t\r\n\tBx = round(Fx + (OE+delta)*math.cos(math.radians(float(angle))),3)\r\n\tBy = round(Fy + (OE+delta)*math.sin(math.radians(float(angle))),3)\r\n\t\r\n\tAx = round(Fx - (OE+delta)*math.cos(math.radians(float(angle))),3)\r\n\tAy = round(Fy - (OE+delta)*math.sin(math.radians(float(angle))),3)\r\n\t\r\n\tDx = round(Tx - (OE+delta)*math.cos(math.radians(float(angle))),3)\r\n\tDy = round(Ty - (OE+delta)*math.sin(math.radians(float(angle))),3)\r\n\t\r\n\t\r\n\tpoint_list.append(Point.ByCoordinates(Ax,Ay,Ez))\r\n\tpoint_list.append(Point.ByCoordinates(Bx,By,Ez))\r\n\tpoint_list.append(Point.ByCoordinates(Cx,Cy,Ez))\r\n\tpoint_list.append(Point.ByCoordinates(Dx,Dy,Ez))\r\n\tsurface = Surface.ByPerimeterPoints(point_list)\r\n\t\r\n\treturn surface\r\n\t\r\ndef surfaces(elements, locs_list, rot_list, width_list, lenth_list, delta, tz_depth):\r\n\ttest =[]\r\n\tsufraces_list = []\r\n\tfor i, el in enumerate(elements):\r\n\t\ttest.Add(i)\r\n\t\tpO = locs_list[i]\r\n\t\tangle = rot_list[i]\r\n\t\twidth = width_list[i]\r\n\t\tlen = lenth_list[i]\r\n\t\tif el.Name == \"(Отв_Задание)_Перекрытия_Прямоугольное\":\r\n\t\t\tdepth = float(tz_depth[i])\r\n\t\t\tEz = pO.Z * 304.8 + depth/2\r\n\t\t\t\r\n\t\telse:\r\n\t\t\tdepth = 0\r\n\t\t\tEz = pO.Z * 304.8\r\n\t\tsufraces_list.Add(surfase(pO, angle, width, len, delta,Ez,el))\r\n\treturn sufraces_list\r\n\r\ndef solid_from_surface(surface, centrP, depth):\r\n\tdelta = depth\r\n\tcentrP = Point.ByCoordinates(centrP.X*304.8,centrP.Y*304.8,centrP.Z*304.8)\r\n\tnorkvector = Surface.NormalAtParameter(surface)\r\n\tnorkvector = Vector.ByCoordinates(norkvector.X*delta, norkvector.Y*delta, norkvector.Z*delta)\r\n\tStartPoint = Point.Add(centrP,norkvector)\r\n\tEndPoint = Point.Subtract(centrP,norkvector)\r\n\t\r\n\tline = Line.ByStartPointEndPoint(StartPoint,EndPoint)\r\n\tline1 = Line.ByStartPointEndPoint(centrP,EndPoint)\r\n\tline2 = Line.ByStartPointEndPoint(centrP,StartPoint)\r\n\tStartSurface = Surface.Offset(surface, depth)\r\n\t\r\n\t\r\n\t\r\n\tperimetrlines = Surface.PerimeterCurves(surface)\r\n\tperimetrcurve = Curve.Join(perimetrlines[0],perimetrlines[1:])\r\n\tsolid1 = Solid.BySweep(perimetrcurve,line1)\r\n\tsolid2 = Solid.BySweep(perimetrcurve,line2)\r\n\tsol = Solid.ByUnion([solid1,solid2])\r\n\t\r\n\treturn solid2\r\n\r\n\r\ndef solids_from_surfaces(surfaces, centrPs, depth):\r\n\tsolids = []\r\n\tfor i, surf in enumerate(surfaces):\r\n\t\tsol = solid_from_surface(surf, centrPs[i], depth[i])\r\n\t\tsolids.Add(sol)\r\n\treturn solids\r\n\r\n\r\n# Разместите код под этой строкой\r\n\r\nfor i,otv in enumerate(otvs):\r\n\totv_rot.Add(math.degrees(otv.Location.Rotation) + otv_ccs_angle[i])\r\n\totv_depth.Add(10)\r\n\r\notv_lenth = get_parameters_elements(otvs, \":H отверстия\")\r\notv_width = get_parameters_elements(otvs, \":B отверстия\")\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\notv_surfaces= surfaces(otvs,otv_locs,otv_rot,otv_width,otv_lenth, delta,otv_depth)\r\nsolids=solids_from_surfaces(otv_surfaces, otv_locs, otv_depth)\r\nOUT.Add(solids)\r\n\r\n\r\n\r\n\r\n#OUT.Add(otv_surfaces)\r\n\r\n# Назначьте вывод переменной OUT.\r\n",
      "VariableInputPorts": true,
      "Id": "02c33796c7cc48a588baf4c89a7eb6fe",
      "Inputs": [
        {
          "Id": "139354eab1d44026a0d109769091c20e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6946bf01963b40f4b88e243c94410673",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f55fcbe651f74dbb9bc0cad80ce545ac",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b8d45d555cac4c35b663d4c932ccac3d",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0282e6a454b74bb69516ca1275c15d79",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "647452b51b6d4d58bc7904ef1b38da7c",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Element.IntersectsSolid@Autodesk.DesignScript.Geometry.Solid[],Revit.Elements.Element[]",
      "Id": "9c6b1c855882482ab7c73e5db7f281d2",
      "Inputs": [
        {
          "Id": "d35b5982d2ff4981829f992c33069197",
          "Name": "solids",
          "Description": "Input a list of solid objects to perform the interference check.\n\nSolid[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "aa00f1d3375948fa9763e8d6a8c866ab",
          "Name": "elements",
          "Description": "Input a list of Revit elements to test for interference against each of the solid objects.\n\nElement[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "05d81bf9afc44d05ba3f909008cc3258",
          "Name": "Element[][]",
          "Description": "Element[][]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6aa54c41339a4a5d8443f7d322da1b82",
          "Name": "intersectsWith[]",
          "Description": "Solid[]\r\rMap the indices from this list to the corresponding indices in the Element[][] output to group the clashing elements.\r\rVisit bimorph.com/bimorph-nodes for support",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f1279e0fd6034547944d13a691d9bf7f",
          "Name": "exceptions[]",
          "Description": "int[]\r\rReturns indexes of any solids that fail solid conversion by the Revit API Shape Builder and cannot be processed.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Finds intersections (clash detection) between Solids and Revit elements. Elements that intersect a Solid are ouput into sublists.\r\rThe node is optimsed to output rapid results up to 99.5% faster than any other intersection technique.\r\rThe exceptions output returns indexes of any solids that cant be processed by the intersection function.\r\rUse IsElementSupported to check that elements are supported by the node.\r\rVisit bimorph.com/bimorph-nodes for support\n\nElement.IntersectsSolid (solids: Solid[], elements: Element[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.SetDifference@var[],var[]",
      "Id": "fd1dd4c80eb848a3885727c3f3eed986",
      "Inputs": [
        {
          "Id": "78494ec87a9c4839ab83952395006a14",
          "Name": "list1",
          "Description": "Список объектов, которые будут включены в новый список.\n\nvar[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "596e28d8dfee41148659152ca3d85a4c",
          "Name": "list2",
          "Description": "Список объектов, которые будут исключены из нового списка.\n\nvar[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "88b193987fef428b81fb034236424e1b",
          "Name": "newList",
          "Description": "Новый список, в котором содержатся объекты из Списка1 и отсутствуют из Списка2.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Возвращает новый список, в котором содержатся объекты из Списка1, но отсутствуют объекты из Списка2.\n\nList.SetDifference (list1: var[], list2: var[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\nOUT = []\r\notv_who_intr_tz =  IN[0][0]\r\n\r\nall_otv = IN[1][0]\r\nall_otv_sol = IN[2][0]\r\n# Разместите код под этой строкой\r\nfor i,otv in enumerate(otv_who_intr_tz):\r\n\tif len(otv)>0:\r\n\t\tOUT.Add(all_otv_sol[i])\r\n# Назначьте вывод переменной OUT.\r\n",
      "VariableInputPorts": true,
      "Id": "1f97062e385f43ca8bd088a410592b9f",
      "Inputs": [
        {
          "Id": "4d966dfc6f5b43a0bfce83507d8083f1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "da4a7dcdbee340ef8614945680df7839",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "41e5fbab8c344304b7f187a97d0c37a4",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5f538cc78d994eb6b18496aaa62e6b5b",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "00d20fe1866f44c9bb972bbb84fda4a0",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "906832f1aa3a41d4bbcd229ee08bce8f",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\ndataEnteringNode = IN\r\n\r\n# Разместите код под этой строкой\r\notv_solids =IN[0]\r\ntz_solids = IN[1]\r\ntzs =IN[2]\r\n# Назначьте вывод переменной OUT.\r\nOUT = []\r\n\r\nsolids_diff = []\r\nsolids_diff_area = []\r\nfor i, ot_solid in enumerate(otv_solids):\r\n\tfor j, tz_solid in enumerate(tz_solids):\r\n\t\r\n\t\tsolids_diff.Add(Solid.Difference(tz_solid,ot_solid))\r\n\t\tarea = Solid.Difference(tz_solid,ot_solid).Area\r\n\t\tsolids_diff_area.Add(area)\r\n\t\t\r\n\t\tif area >= 0 and area < 20:\r\n\t\t\tOUT.Add(tzs[j])\r\n\r\n\t",
      "VariableInputPorts": true,
      "Id": "02670742e5424f4d8eb38f903072ca10",
      "Inputs": [
        {
          "Id": "a4865df07d6a4208b3bfaa09ededd8bf",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b1ec34f00a644633bc934706dc79232a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3eb6f260a7574ba2ae31ecf107cc5510",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c51e5d9ea69c4bf0ae0db5055393da5f",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//Параметр;\n\"SD_Версия задания\";",
      "Id": "f025f3279811477481492023c4ce49fe",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ad383f4246b04c5c89d15eb6671167c6",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "3ce897f30624477691772bac3c3ac5c7",
      "Inputs": [
        {
          "Id": "0a53b5c27b2546d6a46b63978b740540",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5bf732fdf85742ce84af8e65549629f3",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "28df807152664cd0bfb27f20afbfc3cb",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Версия задания\";",
      "Id": "b7b55cd2b2f54c7eae45199063270714",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ca08d14d5b634855b05bb284ca5c9b55",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\nOUT = []\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\nfor i in IN[0]:\r\n\tsplit_list = split_string(i,'|')\r\n\tnew_str=''\r\n\ttry:\r\n\t\tsplit_list.pop(8)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\tsplit_list.append('Отработано')\r\n\tfor i in split_list:\r\n\t\tnew_str+=i+'|'\r\n\tnew_str = new_str[:-1]\r\n\tOUT.Add(new_str)",
      "VariableInputPorts": true,
      "Id": "b9e7875170fb4029b11559aa5957f555",
      "Inputs": [
        {
          "Id": "972e28450b004116a5e3959b94813d88",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6b7813fa84034cb0b074a8fcde9bc38d",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "0a30fd3d95d0416fb66ae96e79708863",
      "Inputs": [
        {
          "Id": "f26141a607d444358db7f22030ef4bb4",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e0c1e1b2e2634e31bbfc6b1a0b1285c3",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "34f594cf99c0467ea8668002a80a3e10",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5fe2a05be37f436e8101da8020923282",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\n\r\ntry:\r\n\tif len(IN[0])==0:\r\n\t\tOUT = IN[0]\r\n\tif len(IN[0])>0:\r\n\t\tOUT = IN[0]\r\n\t\r\nexcept:\r\n\tOUT =[\"\"]\r\n",
      "VariableInputPorts": true,
      "Id": "fa000d12a0624a68930b4befba71f80e",
      "Inputs": [
        {
          "Id": "b97c402477fa42ea8c8a5ad5f700f4b4",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "12c2066007ca484ea3165b4a9354682f",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\n\r\ntry:\r\n\tif len(IN[0])==0:\r\n\t\tOUT = IN[0]\r\n\tif len(IN[0])>0:\r\n\t\tOUT = IN[0]\r\n\t\r\nexcept:\r\n\tOUT =[\"\"]\r\n",
      "VariableInputPorts": true,
      "Id": "c3ed735afb974749b85cd26446f8dd52",
      "Inputs": [
        {
          "Id": "1192ec9c515b452398446d288ce8081c",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3835675dc4fb44fabeeef0af91a67f1e",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\n\r\ntry:\r\n\tif len(IN[0])==0:\r\n\t\tOUT = IN[0]\r\n\tif len(IN[0])>0:\r\n\t\tOUT = IN[0]\r\n\t\r\nexcept:\r\n\tOUT =[\"\"]\r\n",
      "VariableInputPorts": true,
      "Id": "05b9993eb51b4f309d1848fef7571dc2",
      "Inputs": [
        {
          "Id": "7d1c574c03b24fb8b7a48ef9d5a90cf5",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a312577657fe4cf2bd2ea829a6d7d66a",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\n\r\ntry:\r\n\tif len(IN[0])==0:\r\n\t\tOUT = IN[0]\r\n\tif len(IN[0])>0:\r\n\t\tOUT = IN[0]\r\n\t\r\nexcept:\r\n\tOUT =[\"\"]\r\n",
      "VariableInputPorts": true,
      "Id": "6751bd1a3de64fff9d2b4f45ec5b580e",
      "Inputs": [
        {
          "Id": "a43b41f4407b4a43ab4da4ae0f1e0679",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "757b221649b04044945e6c4f59819896",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\ndataEnteringNode = IN\r\n\r\n# Разместите код под этой строкой\r\notv_solids =IN[0]\r\ntz_solids = IN[1]\r\ntzs =IN[2]\r\n# Назначьте вывод переменной OUT.\r\nOUT = []\r\n\r\nsolids_diff = []\r\nsolids_diff_area = []\r\nfor i, ot_solid in enumerate(otv_solids):\r\n\tfor j, tz_solid in enumerate(tz_solids):\r\n\t\r\n\t\tsolids_diff.Add(Solid.Difference(tz_solid,ot_solid))\r\n\t\tarea = Solid.Difference(tz_solid,ot_solid).Area\r\n\t\tsolids_diff_area.Add(area)\r\n\t\t\r\n\t\tif area >= 0 and area < 20:\r\n\t\t\tOUT.Add(tzs[j])\r\n\r\n\t",
      "VariableInputPorts": true,
      "Id": "1953c272a7cf43ca8adc891ca046f9e3",
      "Inputs": [
        {
          "Id": "00e1e19c1afe4026911927b7ef6a28a6",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "40269f37449849f58d4de6e45435582a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8490dc80773a4cf197c08cfad913d141",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6254d65224934fb99426f7a25c26cd92",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "0613adaebdd841a9a0050484031f9a4c",
      "Inputs": [
        {
          "Id": "557807427e8c42e0a0bae4d09524c011",
          "Name": "list",
          "Description": "Список для выравнивания.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a22686cd98684977b343cd658cecbec9",
          "Name": "amt",
          "Description": "Слои вложения для удаления.\n\nint\nЗначение по умолчанию : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "525a5f1a4d054fd7b9e5b769b883fe6f",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выравнивание вложенного списка списков по определенному количественному значению.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "972a9031e7c64de19681f006f74298f2",
      "Inputs": [
        {
          "Id": "3fb7f5fca4aa40a4820ceb9b1090ec31",
          "Name": "list",
          "Description": "Список для выравнивания.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "374d520e87c0414abcc29edd0a1ba8df",
          "Name": "amt",
          "Description": "Слои вложения для удаления.\n\nint\nЗначение по умолчанию : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "67fb63d173c840ef89c169df13f3973e",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выравнивание вложенного списка списков по определенному количественному значению.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Solids",
      "Id": "5ca27c3742ae4e08a3e8a248ebddf90e",
      "Inputs": [
        {
          "Id": "41e1f1ad682b4e5ea20421e558e1d8f5",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2e7aefd7f19c4a1d8efddaac9628c198",
          "Name": "Solid[]",
          "Description": "Solid[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Твердые тела в данном элементе\n\nElement.Solids: Solid[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nimport math\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\notvs= UnwrapElement(IN[0])\r\notv_locs1 = IN[1]\r\ndelta = IN[5]\r\notv_ccs_angle = IN[2]\r\notv_depth = IN[3]\r\notv_families =IN[4]\r\n\r\notv_locs = []\r\notv_rot =[]\r\notv_width =[]\r\notv_lenth =[]\r\notv_hight =[]\r\n\r\nOUT=[]\r\n\r\n\r\n\r\n\r\n\r\n# созданные функции\r\n\r\ndef get_parameters_elements(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\totv_lenth.Add(i)\r\n\treturn otv_lenth\r\n\r\n\r\ndef surfase(pO, angle, width, len, delta,Ez, el):\r\n\tOE = float(width)/2 \r\n\tOF = float(len)/2 \r\n\tpoint_list = []\r\n\r\n\tEx = pO.X * 304.8 + (OE+delta)*math.cos(math.radians(float(angle))) \r\n\tEy = pO.Y * 304.8 + (OE+delta)*math.sin(math.radians(float(angle)))\r\n\t\r\n\tGx = pO.X * 304.8 - (OE+delta)*math.cos(math.radians(float(angle)))\r\n\tGy = pO.Y * 304.8 - (OE+delta)*math.sin(math.radians(float(angle)))\t\r\n\t\r\n\tAx = Gx\r\n\tAy = Gy\r\n\tAz = pO.Z * 304.8+(OF+delta)\r\n\t\r\n\tBx = Ex\r\n\tBy = Ey\r\n\tBz = pO.Z * 304.8+(OF+delta)\r\n\t\r\n\tDx = Gx\r\n\tDy = Gy\r\n\tDz = pO.Z * 304.8-(OF+delta)\r\n\t\r\n\tCx = Ex\r\n\tCy = Ey\r\n\tCz = pO.Z * 304.8-(OF+delta)\r\n\t\r\n\tpoint_list.append(Point.ByCoordinates(Ax, Ay, Az))\r\n\tpoint_list.append(Point.ByCoordinates(Bx, By, Bz))\r\n\tpoint_list.append(Point.ByCoordinates(Cx, Cy, Cz))\r\n\tpoint_list.append(Point.ByCoordinates(Dx,Dy,Dz))\r\n\tsurface = Surface.ByPerimeterPoints(point_list)\r\n\t\r\n\treturn surface\r\n\t\r\ndef surfaces(elements, locs_list, rot_list, width_list, lenth_list, delta, tz_depth):\r\n\ttest =[]\r\n\tsufraces_list = []\r\n\tfor i, el in enumerate(elements):\r\n\t\ttest.Add(i)\r\n\t\tpO = locs_list[i]\r\n\t\tangle = rot_list[i]\r\n\t\twidth = width_list[i]\r\n\t\tlen = lenth_list[i]\r\n\t\t\r\n\t\tdepth = float(tz_depth[i]) - 60\r\n\t\tEz = pO.Z * 304.8 + depth/2\r\n\t\t\t\r\n\t\t\r\n\t\tsufraces_list.Add(surfase(pO, angle, width, len, delta,Ez,el))\r\n\treturn sufraces_list\r\n\r\ndef solid_from_surface(surface, centrP, depth):\r\n\tdelta = depth/2\r\n\tcentrP = Point.ByCoordinates(centrP.X*304.8,centrP.Y*304.8,centrP.Z*304.8)\r\n\tnorkvector = Surface.NormalAtParameter(surface)\r\n\tnorkvector = Vector.ByCoordinates(norkvector.X*delta, norkvector.Y*delta, norkvector.Z*delta)\r\n\tStartPoint = Point.Add(centrP,norkvector)\r\n\tEndPoint = Point.Subtract(centrP,norkvector)\r\n\t\r\n\tline = Line.ByStartPointEndPoint(StartPoint,EndPoint)\r\n\tline1 = Line.ByStartPointEndPoint(EndPoint,centrP)\r\n\tline2 = Line.ByStartPointEndPoint(centrP,StartPoint)\r\n\tStartSurface = Surface.Offset(surface, depth)\r\n\t\r\n\t\r\n\t\r\n\tperimetrlines = Surface.PerimeterCurves(surface)\r\n\tperimetrcurve = Curve.Join(perimetrlines[0],perimetrlines[1:])\r\n\tsolid1 = Solid.BySweep(perimetrcurve,line1)\r\n\tsolid2 = Solid.BySweep(perimetrcurve,line2)\r\n\tsol = Solid.ByUnion([solid1,solid2])\r\n\t\r\n\treturn sol\r\n\r\n\r\ndef solids_from_surfaces(surfaces, centrPs, depth):\r\n\tsolids = []\r\n\tfor i, surf in enumerate(surfaces):\r\n\t\tsol = solid_from_surface(surf, centrPs[i], depth[i])\r\n\t\tsolids.Add(sol)\r\n\treturn solids\r\n\r\n\r\n# Разместите код под этой строкой\r\n\r\n\r\notv_lenth = get_parameters_elements(otvs, \":H отверстия\")\r\notv_width = get_parameters_elements(otvs, \":B отверстия\")\r\n\r\nfor i, otv in enumerate(otv_locs1):\r\n\t\r\n\tif otv_families[i] == \"(Отверстие) Стена\":\r\n\t\tpO = Point.ByCoordinates(otv.X/304.8,otv.Y/304.8,otv.Z/304.8)\r\n\t\r\n\telif otv_families[i] == \"(Отверстие) Стена_Глубина\":\r\n\t\tpO = Point.ByCoordinates(otv.X/304.8,otv.Y/304.8,otv.Z/304.8+float(otv_lenth[i])/2/304.8)\r\n\t\r\n\telse:\r\n\t\tpO = Point.ByCoordinates(otv.X/304.8,otv.Y/304.8,otv.Z/304.8)\t\r\n\t\t\r\n\totv_locs.Add(pO)\r\n\r\nfor i,otv in enumerate(otvs):\r\n\totv_rot.Add(math.degrees(otv.Location.Rotation) + otv_ccs_angle[i])\r\n\t\r\n\r\n\r\n\r\notv_surfaces= surfaces(otvs,otv_locs,otv_rot,otv_width,otv_lenth, delta,otv_depth)\r\nsolids=solids_from_surfaces(otv_surfaces, otv_locs, otv_depth)\r\nOUT.Add(solids)\r\n\r\n\r\n\r\n\r\n#OUT.Add(otv_surfaces)\r\n\r\n# Назначьте вывод переменной OUT.\r\n",
      "VariableInputPorts": true,
      "Id": "24567a432c334c4cbc5e3fd403d278f3",
      "Inputs": [
        {
          "Id": "7aeaab734cf44684bef890697bddb689",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "47df89e266514c819a682026421bbf6d",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b501163fed4a4ab2b5d982bd9ed92636",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "de5d68003a2f433fad4c6378fd340a8e",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "41e3b762291f41a5986ddb5342a4e050",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "82e22d29756b4cc4ac4c60e3c7cf851b",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1f367e84f8cb45108318420cb77a3a98",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.Location",
      "Id": "27ecb7caa00e4864af32f13df41b1442",
      "Inputs": [
        {
          "Id": "5ef491baff7f400aaeccba0903037ac5",
          "Name": "linkElement",
          "Description": "Revit.LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c1ebc7f86e42405da5cd9ecd40635a10",
          "Name": "Geometry",
          "Description": "Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the location of this LinkElement at its host location.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.Location: Geometry"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.AngleAboutAxis@Autodesk.DesignScript.Geometry.Vector,Autodesk.DesignScript.Geometry.Vector",
      "Id": "44e090e933b24aaaad5160dc412e67a3",
      "Inputs": [
        {
          "Id": "34291a514045479ba02e1572adba665e",
          "Name": "vector",
          "Description": "Autodesk.DesignScript.Geometry.Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cb3cf0a7e5b64ba4b969de016fd81d71",
          "Name": "otherVector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4a772a7ef8644dea814ae62270267238",
          "Name": "rotationAxis",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cdaaaaa5db5046b18eaf81e166426922",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение угла между двумя векторами в следующем диапазоне градусов: [0, 360]. Для определения направления угла используется ось вращения.\n\nVector.AngleAboutAxis (otherVector: Vector, rotationAxis: Vector): double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.ZAxis",
      "Id": "cee9a552f2794f2680529a60c8d6ebf3",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ab8e8c97dd9f402b91ab970792b55adc",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение канонического вектора оси Z (0; 0; 1)\n\nVector.ZAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Vector.XAxis",
      "Id": "a707d17a2fa049b3b43125bfefb6262b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b9be907eaedb4f24819bc57cec95bed8",
          "Name": "Vector",
          "Description": "Vector",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение канонического вектора оси X (1; 0; 0)\n\nVector.XAxis ( ): Vector"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x.XAxis;",
      "Id": "3c1ee00ed927486f924e4a9cb0b207e2",
      "Inputs": [
        {
          "Id": "ce439048628e4f1c939498abe7e704aa",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c1396f69d0704097b91a16de80544f2b",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\n\r\nwalls = UnwrapElement(IN[0])\r\nOUT = map(lambda x: (x.WallType.Width*304.8+100),walls)",
      "VariableInputPorts": true,
      "Id": "5c041bed4ad54e78a1cced02acd86497",
      "Inputs": [
        {
          "Id": "5ee5060211314925ab875a134e404e35",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "72e48d9e62d24c81976ae67d9718ca75",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitAPIUI\")\r\n\r\nfrom Autodesk.Revit.DB import * \r\n\r\n# Import DocumentManager\r\nclr.AddReference(\"RevitServices\")\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\n\r\nclr.AddReference(\"RevitNodes\")\r\nimport Revit\r\nclr.ImportExtensions(Revit.Elements)\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\nlink_walls = IN[0]\r\nwalls = UnwrapElement(IN[0])\r\nidwalls =IN[1]\r\n\r\nallid= []\r\nOUT =[]\r\nfor wall in walls:\r\n\tallid.Add(str(wall.Id))\r\n\t\r\n# Разместите код под этой строкой\r\nfor wallId in idwalls:\r\n\twallId = str(wallId)\r\n\telementId = allid.index(wallId)\r\n\tOUT.Add(link_walls[elementId])\r\n\r\n\r\n\t\t\t\r\n# Назначьте вывод переменной OUT.\r\n",
      "VariableInputPorts": true,
      "Id": "5f29b82ecc83439baeea1f6aa9c9ebe7",
      "Inputs": [
        {
          "Id": "f2888620c9da40f19a7848b1ec3c6b59",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f666fe321d004ac5a6ecd07e2bf1d2d6",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a7314770329c471d94d100dd4905bfcc",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5bc90c09a4504a51b618561c6e0552ec",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.TotalTransform",
      "Id": "b6332398b39b48ca9f1182c7a1122b20",
      "Inputs": [
        {
          "Id": "1ea1c326ea0b481aa777d9f5cac7b127",
          "Name": "linkElement",
          "Description": "Revit.LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bdda59c97e714be9b6443cc3e805d9e4",
          "Name": "CoordinateSystem",
          "Description": "CoordinateSystem",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The total transform of the RevitLinkInstance from where this LinkElement derived.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.TotalTransform: CoordinateSystem"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Id",
      "Id": "0a8df9811e9d4fe39fec71267742fedb",
      "Inputs": [
        {
          "Id": "43aa1a86d929459caa6a629239aba454",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3cbd02454cee4e9fa3cd44e4a228a4d8",
          "Name": "int",
          "Description": "int",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение идентификатора для данного элемента\n\nElement.Id: int"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "f3228c78-e4a0-42f0-8ec3-a19daf7157bb",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "1adf7a29f0cc48ef96495a8106814b22",
      "Inputs": [
        {
          "Id": "30a0ff7d0b954b11a6c72c7393628ed2",
          "Name": "element",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e6c8998ae6324febaae00044defbe844",
          "Name": "Host",
          "Description": "возвращаемое значение",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Gets the host of the element.\r\nUnlike the OOTB node FamilyInstance.GetHost, it also works for elements hosted by a linked document, wall sweeps, foundations, railings and builing pads.\r\nBased on a Clockwork's node"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "0e90807c3025420190d3bbe393aa51f5",
      "Inputs": [
        {
          "Id": "201a43fa294a498ca1bcdb5a833e365f",
          "Name": "list0",
          "Description": "Списки для объединения в один.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "183161ac710b40b1ac1c802c96ae89d5",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "df42b3435f024ec59f4d2eda0b0196e4",
          "Name": "list",
          "Description": "Объединенный список.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Объединение всех имеющихся списков в один.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "DSCore.List.FilterByBoolMask(l,n==\"(Отверстие) Стена\")[\"in\"];",
      "Id": "0a8b9efbc7794a5bbe7f336b93cf308d",
      "Inputs": [
        {
          "Id": "030d054073914c4589e08610a1038d14",
          "Name": "l",
          "Description": "l",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6747cd70aa0749cab1f028b66251d30f",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d7583a0f022d4c15b468b9341bea45c8",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "DSCore.List.FilterByBoolMask(l,n==\"(Отверстие) Стена_Глубина\")[\"in\"];",
      "Id": "bdb14ad903754c6c8f09eb9276626c79",
      "Inputs": [
        {
          "Id": "424e162e76ad48308ca09b9835c60178",
          "Name": "l",
          "Description": "l",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a915a67263b64442b3622998855914c1",
          "Name": "n",
          "Description": "n",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "977544ec0a1a46798a298a64f0bedb51",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "3b1a5c599248487c87e03afe97c7bd99",
      "Inputs": [
        {
          "Id": "3cff142858bc458bb54250e10ec00872",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "34d52ce6fc1c4d36afba5f8edf1eb339",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.OfCategory@var,Revit.Elements.Category",
      "Id": "75bcee57b2d44b399da50889b1b612ab",
      "Inputs": [
        {
          "Id": "9f065299d7cc4a22bcdcf80e4a9138de",
          "Name": "linkInstance",
          "Description": "Input the Revit link instance.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5076925b325c4d3ea93af591a70f0b63",
          "Name": "Category",
          "Description": "Input the Element Category.\n\nCategory",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a96df49dab1e4277898cd702a4b0485d",
          "Name": "LinkElement[]",
          "Description": "LinkElement[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get LinkElements from a Revit LinkInstance by Category. LinkElements are optimised for use with BimorphNodes Element and BoundingBox nodes and are compatible with all nodes that accept Elements as inputs.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.OfCategory (linkInstance: var, Category: Category): LinkElement[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.Element",
      "Id": "2bccd166993e421d91c4872b5e376dc2",
      "Inputs": [
        {
          "Id": "b6a23f28aaac44929f9a46938c1f6eb8",
          "Name": "linkElement",
          "Description": "Revit.LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "89f58a63d73b488595481d50e6fb1ba3",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Element stored in this LinkElement. Use the Element with any nodes that are incompatible with the LinkElement.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.Element: Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyInstance.GetFamily",
      "Id": "ac2565c081ca472db4639bf0bf7f38c7",
      "Inputs": [
        {
          "Id": "16e72a36f04c4c8f81162d8feb700911",
          "Name": "familyInstance",
          "Description": "Revit.Elements.FamilyInstance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bb37ab2226e54ceb8aece066c3404590",
          "Name": "Family",
          "Description": "Family",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение семейства для данного экземпляра семейства\n\nFamilyInstance.GetFamily: Family"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Name",
      "Id": "c3c8cef03f7143978ef0f9b8ea4610fe",
      "Inputs": [
        {
          "Id": "908dd451c5c7415bb21b63cbb5892871",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "739594ca886c4618b6d3070148af3bb9",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение имени элемента\n\nElement.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "12ebe0a8785b4d50a919edf1724cfefb",
      "Inputs": [
        {
          "Id": "af85be0b5c874d9eb1adcfb8f9b2df23",
          "Name": "list",
          "Description": "Список для выравнивания.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ceec242bd88f49bc80e07540f8fa527f",
          "Name": "amt",
          "Description": "Слои вложения для удаления.\n\nint\nЗначение по умолчанию : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "94c5e2d5e00d46bea1ad9d4d307d2a65",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выравнивание вложенного списка списков по определенному количественному значению.\n\nList.Flatten (list: var[]..[], amt: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 390,
      "SelectedString": "OST_GenericModel",
      "NodeType": "ExtensionNode",
      "Id": "8f32ebebed024a489085d566d277cd1f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e039640299454677ad1691698e5a68b9",
          "Name": "Category",
          "Description": "Выбранная категория.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Все предопределенные категории."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.Name",
      "Id": "7a1e40e7721749018526b31b54587ef4",
      "Inputs": [
        {
          "Id": "2078e75bda8646f1b3bc19b54cd9edc1",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b8567b385351466ea75313f4af0fea9f",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение имени элемента\n\nElement.Name: string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyInstance.GetFamily",
      "Id": "9c31c434a2a54288aa475d3b732bda31",
      "Inputs": [
        {
          "Id": "546e5e731d2d41deb6ad64cdf9780ab6",
          "Name": "familyInstance",
          "Description": "Revit.Elements.FamilyInstance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f6c2ca5049074be4b61fb7640f632920",
          "Name": "Family",
          "Description": "Family",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение семейства для данного экземпляра семейства\n\nFamilyInstance.GetFamily: Family"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.LinkElement.Element",
      "Id": "b5ce41cad8f746e0aa1fd3e753c31bd5",
      "Inputs": [
        {
          "Id": "1c45cc21f7224d9eae912b71ed46a72b",
          "Name": "linkElement",
          "Description": "Revit.LinkElement",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e718e2ec6ad7457987e562089c7e393c",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Element stored in this LinkElement. Use the Element with any nodes that are incompatible with the LinkElement.\r\rVisit bimorph.com/bimorph-nodes for support\n\nLinkElement.Element: Element"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "d578e9522cfc459b86bb94e8dcc25dac",
      "Inputs": [
        {
          "Id": "a0c076da71fc461f9ea6e45661191f7a",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d19788b2c96b4dbf863eae666703503a",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x;",
      "Id": "919bb92bebed43ee9c5dc38f7bf9b62a",
      "Inputs": [
        {
          "Id": "bfb34ec3f4a64e7586e3b18228a1e61a",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "981750dd0b724f56a0a0998f10a66ebc",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x;",
      "Id": "b07be767b3484e34af9e49f2e522058d",
      "Inputs": [
        {
          "Id": "33bb2e9573df4db08709f7dfe168aca6",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dd5858f8bd574c27b0cd3bd37917977d",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];\nx[1];\nx[2];\nx[3];",
      "Id": "af4a1c3141b9418c93e2a108102c6a01",
      "Inputs": [
        {
          "Id": "1d79655277d845b296bfa43bafcbd8d8",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0fa3300c58d041f1ab2e64997b62203a",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cebf0842ecf54569b3999b30331631f3",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7f71294c203f4c50a38b51a006dcf76d",
          "Name": "",
          "Description": "Значение выражения в строке 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9211cffd3f984d2a998e6a17db6c2d61",
          "Name": "",
          "Description": "Значение выражения в строке 4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"(Отв_Задание)_Перекрытия_Прямоугольное\";",
      "Id": "aec3891052194133a8d84cec24abd138",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fc84d965cc194498a87bb950321fb2da",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"(Отв_Задание)_Стены_Прямоугольное\";",
      "Id": "9b23960a92d443e4814b2f4f7a25f45d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "137823292dc242e98e04798a0af7e8d3",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "2d1afebcbb764051aa6356f6db2d3641",
      "Inputs": [
        {
          "Id": "e3225ab6a9974803b7a61f4fe14e7e09",
          "Name": "name",
          "Description": "Имя FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6ae1ada0002842eab1f4bf1f62084925",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выберите FamilyType, указав его имя. При наличии двух и более FamilyType с одинаковым именем этот метод вернет первый найденный FamilyType.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "52ec96be8f7b4c499b9f267a2a1a5913",
      "Inputs": [
        {
          "Id": "617d99674cfe4f88a6bff6b87a43ded9",
          "Name": "name",
          "Description": "Имя FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dde5c1d5871c4fa994bbfc6c8804fa3a",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выберите FamilyType, указав его имя. При наличии двух и более FamilyType с одинаковым именем этот метод вернет первый найденный FamilyType.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfFamilyType, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "096db61fae004dcb810a46589e5f9b55",
      "Inputs": [
        {
          "Id": "07ecac368d1e43e6863ec6c456e92ba5",
          "Name": "Family Type",
          "Description": "Тип семейства.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ced7b70a9cb34440877bb7668cab53cb",
          "Name": "Elements",
          "Description": "Список элементов, соответствующих запросу.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Получение из модели всех элементов определенного типа семейства."
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfFamilyType, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "305732086bdc4135b7336942d77f1659",
      "Inputs": [
        {
          "Id": "fcc88052c3374a4888df3f50dfcc05ff",
          "Name": "Family Type",
          "Description": "Тип семейства.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f39fd6eaa62541519d4c001702ca499e",
          "Name": "Elements",
          "Description": "Список элементов, соответствующих запросу.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Получение из модели всех элементов определенного типа семейства."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\nel_info = IN[0]\r\nactualno = 0\r\nneactualno = 0\r\notrabotano = 0\r\nvrych = 0\r\nfor i in el_info:\r\n\tsplit_list = split_string(i,'|')\r\n\tnew_str=''\r\n\ttry:\r\n\t\tx = split_list.pop(8)\r\n\t\tif x == 'Актуальное':\r\n\t\t\tactualno +=1\r\n\t\telif x == 'Отработано':\r\n\t\t\totrabotano+=1\r\n\t\telif x == 'Не актуально':\r\n\t\t\tneactualno+=1\r\n\t\t\r\n\texcept:\r\n\t\tpass\r\n\t\t\t\r\nOUT = [actualno,neactualno,otrabotano,vrych]\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "b263d35f05004e3bacec6edc06dafee4",
      "Inputs": [
        {
          "Id": "82248fe0df264a8aa512ec44aa631b09",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4bcf2774771a4dedb4513ef70e7ad8b9",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ac822b8e65b14c46a47af9a55c51d94a",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "339b94ac10f34bd2972cd694f5486235",
      "Inputs": [
        {
          "Id": "caf7617145af4cd5964c2e6ac5fd7e3b",
          "Name": "list0",
          "Description": "Списки для объединения в один.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c7c14865e49347a9a1a3f79f9c14f5e0",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a15fd245363d40a5a7450416dccff16c",
          "Name": "list",
          "Description": "Объединенный список.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Объединение всех имеющихся списков в один.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//Параметр;\n\"SD_Версия задания\";",
      "Id": "45db054d44d34958a0e27f4a4cadff1a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8f98ebeaa6784729ae6d3a1c820727ac",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "b48057e59cc345768e7aaf84b458617e",
      "Inputs": [
        {
          "Id": "1aad3f81c3fb4d0590de34ee48471942",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "425fa817d8064cbeb033606952c22d47",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "69622423bef2469faffacfa2e793fcb0",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "f52869c06dd040918ce11ce2ed5888b7",
      "Inputs": [
        {
          "Id": "7932d446df2543f2a67971d16cbfb910",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bcdffc6ea7254ab2bbb516644cd26b59",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "820e5e6b05c9455faaee7d733f456144",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "fcaf9de1965843c588a5a1cf2f0179ed",
      "Inputs": [
        {
          "Id": "0ffb1bc586914d139266f99c88dc638a",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "902e0dcf6e1b4551b7bda915af04fe46",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2927263b15574259b20f76c7f7744176",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Способ создания задания\";",
      "Id": "e2d00a732ea34016a05d88993f3764ba",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c27f8bed0f0b400d97f563c15bb1b713",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Способ создания задания\";",
      "Id": "ccbcec393a8f4cf9a6d67bf482a0b11f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "446446727ab14290ac195893ef896e1d",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nOUT =[]\r\nscript = [] \r\nvrych = [] \r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\nfor el, par in zip(IN[0],IN[1]):\r\n\tif par ==\"СКРИПТ\":\r\n\t\tscript.Add(el)\r\n\telse:\r\n\t\tvrych.Add(el)\r\n\t\t\r\nOUT = [script,vrych]",
      "VariableInputPorts": true,
      "Id": "873cf9619554427e8c1a9ca0f26233b8",
      "Inputs": [
        {
          "Id": "27201ef7a2f04d4d9411999667165c5d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "22a91bc569e14b0486e19281f546fb5f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ee999f3b9899481398d272c8c3877396",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];\nx[1];",
      "Id": "62ec4e646fa64fcdbc68c8b23fc829c0",
      "Inputs": [
        {
          "Id": "61a867da8f9b444a987284891032b32d",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0c785ee4ab37434a8252aa365e730f21",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e823c152b34d4db5a8eb9446d6541e6f",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];\nx[1];",
      "Id": "f6bd4e069c18467b802ac59376535f7d",
      "Inputs": [
        {
          "Id": "ed9f7a073cdc4a9981c29cf9ee3aec5e",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d3788bce00cb4fee89afc1d2322555eb",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7a8077aa0e1549d8a250893327ea2de9",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nOUT =[]\r\nscript = [] \r\nvrych = [] \r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\nfor el, par in zip(IN[0],IN[1]):\r\n\tif par ==\"СКРИПТ\":\r\n\t\tscript.Add(el)\r\n\telse:\r\n\t\tvrych.Add(el)\r\n\t\t\r\nOUT = [script,vrych]",
      "VariableInputPorts": true,
      "Id": "ee89ac01f4e34553a217ab43bc749fcc",
      "Inputs": [
        {
          "Id": "120d73cfc3e34e29bcef5fb4b8fb3d57",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bb52d3c0e3d940dd961d69f966c74ba5",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c4c3239bd57a4033bf495b807ed66074",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "b8f9f9f875374e81ad4372f5b5547800",
      "Inputs": [
        {
          "Id": "dc27bb56114640e48d35c0dce2484c10",
          "Name": "list0",
          "Description": "Списки для объединения в один.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b38a4d22b0644c44803aa6b0d205d74f",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e4a98e3f7e6d4f949969cacbec208d1f",
          "Name": "list",
          "Description": "Объединенный список.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Объединение всех имеющихся списков в один.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "54723206a7d54c5bb282baf01a81efba",
      "Inputs": [
        {
          "Id": "1e35df08b2674990b1ca749c0171af32",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "df19886dc25c4f52b853ed09672c3ad1",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c0eeb6367ec944e4b8db3f65e851d603",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6a6e0d2010ba4f558de3b0ded1f30317",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Версия задания\";",
      "Id": "62747ea5e3ac49589e743cb147fdaeeb",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c1c1f3f400b94f2baddf7e17bc5b2728",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "b70d0588336346e084c6e1be94c207ff",
      "Inputs": [
        {
          "Id": "0a7d1ba706ef411193b17f6fd50a3814",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c7f187a5fac8407a9497b165acbb279d",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "328793c63f9c45afa6092954690fb55b",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];\nx[1];",
      "Id": "aace12e3703e465c870a37ad01b60195",
      "Inputs": [
        {
          "Id": "bd3dec8a10104bea83399c62c4013c93",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1b6f6eaeaf7b43d192c41a263c578876",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "76be8160deb8453a88dc7bd97626b28c",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "9c179574703b4b27887cdee87495d854",
      "Inputs": [
        {
          "Id": "fae19768aeb846d7a18a1f5f1d916190",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eb8702c9b36145ebacb759a883bf5ab1",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6d49daae603f40709849bb9a47a32a98",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e1fee8836ceb47d9abf9d660103f3d64",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Перенесено задание\";",
      "Id": "c4fa282441ff42babbb8598391e378ca",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a4aa58e43b9241fab010762d3d2c85d9",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "105fe69bf71e401e9234abafae1db177",
      "Inputs": [
        {
          "Id": "7b688b8f7cfa4315861ef104a152be7c",
          "Name": "list0",
          "Description": "Списки для объединения в один.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d1c56384bf094afdb617222c2401411b",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "042fa6dbd5d34728bde83b132150db23",
          "Name": "list",
          "Description": "Объединенный список.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Объединение всех имеющихся списков в один.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Element.IntersectsElement@Revit.Elements.Element[],Revit.Elements.Element[]",
      "Id": "cadd633393f04e95b49cef30046dc70f",
      "Inputs": [
        {
          "Id": "0fdf8197ed1447f6bb52aebf0ab33f4d",
          "Name": "elementSetA",
          "Description": "Input a list of Revit elements to perform the interference check.\n\nElement[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8c5aa18965764901bb3fe374cbf33003",
          "Name": "elementSetB",
          "Description": "Input a list of Revit elements to test for interference against elementSetA.\n\nElement[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "43a40a4eb1454ffd8ad146fd505e2d4b",
          "Name": "Element[][]",
          "Description": "Element[][]\r\rEach sublist store elements from elementSetB that clash with elementSetA",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6aaafdc44c3546feb2f01b0b686bbcc9",
          "Name": "intersectsWith[]",
          "Description": "Element[]\r\rMap the indices from this list to the corresponding indices in the Element[][] output to group the clashing elements.\r\rVisit bimorph.com/bimorph-nodes for support",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Finds intersections (clash detection) between two sets of elements. Elements in set B that intersect set A are ouput into sublists (the clash result). Self-intersection is automatically prevented if an element is found in both lists.\r\rThe node is optimsed to output rapid results up to 99.5% faster than any other intersection technique.\r\rUse IsElementSupported to check that elements are supported by the node.\r\rVisit bimorph.com/bimorph-nodes for support\n\nElement.IntersectsElement (elementSetA: Element[], elementSetB: Element[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "OUT = []\r\ninter = IN[0]\r\nbool = []\r\ninters_elements =[]\r\nnotintersect_element = []\r\nfor i in inter:\r\n\ttry:\r\n\t\ti.pop(0)\r\n\t\tbool.append(1)\r\n\r\n\texcept:\r\n\t\tbool.append(0)\r\n\r\n\r\nfor i,el in enumerate(IN[1]):\r\n\tif bool[i] == 1:\r\n\t\tinters_elements.append(el)\r\n\telse:\r\n\t\tnotintersect_element.append(el)\r\n\t\r\n\t\r\nOUT =[inters_elements,notintersect_element]",
      "VariableInputPorts": true,
      "Id": "90ad685864a14c69a2278131a416cf6d",
      "Inputs": [
        {
          "Id": "e2d7f25e6b8e4c0da05fe19d2c18f710",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0a7e6c50a1604a398c19ac32024e46d0",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "44942b37e17642cf82d27405b5cb4f14",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//Параметр;\n\"SD_Версия задания\";",
      "Id": "2498abe53d854a149b834509827b573a",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "dc63aa82e92e4078aab37fbc1138a80a",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "d149a93c519c4f51a2e7e6e5b9778f63",
      "Inputs": [
        {
          "Id": "2e2785e20f7d42deb6bbcc0f1b4d8b54",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a7a7f0a5a5ef42b3b9f42b6dce07cae1",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a102f04dbb93488c9643e84054c04f84",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Версия задания\";",
      "Id": "bf7863d1184044b6b1e7b89f0c4d9f78",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bd3d55418c1946fe93f27f894793f0dc",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\nOUT = []\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\nfor i in IN[0]:\r\n\tsplit_list = split_string(i,'|')\r\n\tnew_str=''\r\n\ttry:\r\n\t\tsplit_list.pop(8)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\tsplit_list.append('Актуальное')\r\n\tfor i in split_list:\r\n\t\tnew_str+=i+'|'\r\n\tnew_str = new_str[:-1]\r\n\tOUT.Add(new_str)",
      "VariableInputPorts": true,
      "Id": "e992778b704f4d1ab325235b51ff650c",
      "Inputs": [
        {
          "Id": "d0a571082bfa4f31970df3f1113b1cbd",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "03fc79532bf04367b32c680922b2e25e",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "d1ed490bfc574eedaeb9201d40c5cf0b",
      "Inputs": [
        {
          "Id": "45d552f734cd47fab42e0e5c98866aea",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d0f570e4cbca41979b800a6cbcbd2f2f",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3d3caf875a0a4547adf0a6cad9bfb3bb",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a9168529415f41568eefec9a8df063e3",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];\nx[1];",
      "Id": "547e18aa47d5440ea566588df335ab8a",
      "Inputs": [
        {
          "Id": "46716163ecf0432ebe82946dc8d48395",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "556561ad13b44522b996d8117d9cabdf",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "64e5b009b4e5426784ad4ba742b236a0",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "//Параметр;\n\"SD_Версия задания\";",
      "Id": "5b2a554c76114ad1af0dee409d952905",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e0865f02dda846dd9031406da955377b",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "5165d6f8baf343bf93ec89bfa4f41b72",
      "Inputs": [
        {
          "Id": "9c4d1214039846fe8717d7de519ebd7e",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b654658d9f1e4728b5537a08e44ef895",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9de0a3d84409407f8b0e3f1543d02adb",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Версия задания\";",
      "Id": "9bdc70fb192a4d4d9a458be930b81afc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a65382ab9f8542d282b6b038e8bfec67",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\nimport re\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\nOUT = []\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\nfor i in IN[0]:\r\n\tsplit_list = split_string(i,'|')\r\n\tnew_str=''\r\n\ttry:\r\n\t\tsplit_list.pop(8)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\tsplit_list.append('Отработано')\r\n\tfor i in split_list:\r\n\t\tnew_str+=i+'|'\r\n\tnew_str = new_str[:-1]\r\n\tOUT.Add(new_str)",
      "VariableInputPorts": true,
      "Id": "eaf81894168e4aedb6c5832f2331411b",
      "Inputs": [
        {
          "Id": "337d77904093466cbbf49839a488479d",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0d1dfee863dd4e258cdee3561f4e65dc",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "3ea38b5fea144ce188ef63c5977d634c",
      "Inputs": [
        {
          "Id": "16a3f8ee6ab244e49bd20583bc34e807",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a53c27e6ac294f1ea7599ca280331f47",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6baf6752d9fb48bf98a17da8816ea9c6",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "917ecd9fbca3489e858eb411251d330c",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];\nx[1];",
      "Id": "313211fc1928424f94791f5ed53ef702",
      "Inputs": [
        {
          "Id": "85b512c3de634e128d4d7786d5b056e9",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "41fd8d4ecad74e68b45c18a512107917",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "796191bf1f4e41a8b991a1d175f67c9f",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nimport math\r\nimport re\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\notvs= IN[0]\r\notv_rot =[]\r\notv_loc = []\r\n\r\n\r\n\r\ndef angle(angles):\r\n\t \r\n\tOUT = []\r\n\tlist=[]\r\n\tOUT1 =[]\r\n\t# Разместите код под этой строкой\r\n\tfor angle in angles:\r\n\t\tif 315<=angle<=360:\r\n\t\t\tangle-=315\r\n\t\telif 270<=angle<315:\r\n\t\t\tangle-=270\r\n\t\telif 225<=angle<=270:\r\n\t\t\tangle-=225\r\n\t\telif 180<=angle<=225:\r\n\t\t\tangle-=180\r\n\t\t\t\r\n\t\telif 135<=angle<=180:\r\n\t\t\tangle-=135\r\n\t\t\t\r\n\t\telif 90<=angle<=135:\r\n\t\t\tangle-=90\r\n\t\t\r\n\t\telif 45<=angle<=90:\r\n\t\t\tangle-=45\r\n\t\t\t\r\n\t\telif 45<=angle<=0:\r\n\t\t\tangle-=0\r\n\t\telse:\r\n\t\t\tangle=angle\r\n\t\tlist.Add(round(angle,2))\r\n\t\t\r\n\tfor angle in list:\r\n\t\tif angle >= 22.5:\r\n\t\t\tif angle>=33.4:\r\n\t\t\t\tangle = 45-angle\r\n\t\t\telse:\r\n\t\t\t\tangle = angle-22.5\t\t\r\n\t\telif angle < 22.5:\r\n\t\t\tangle=angle\r\n\t\tOUT1.Add(angle)\r\n\t\t\r\n\treturn OUT1\r\n\r\n\r\n\r\ndef get_parameters_elements5_round(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\tx = round(int(i)/5)*5\r\n\t\totv_lenth.Add(x)\r\n\treturn otv_lenth\r\n\r\n\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\n\r\n\r\n\r\n\r\n# созданные функции\r\n\r\ndef get_parameters_elements(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\tx = round(int(i)/10)*10\r\n\t\totv_lenth.Add(x)\r\n\treturn otv_lenth\r\n\r\n\r\n\r\n\r\n\r\nfor i,otv in enumerate(UnwrapElement(otvs)):\r\n\trot = math.degrees(otv.Location.Rotation)\r\n\t#rot = round(rot/10,0)*10\r\n\totv_rot.Add(rot)\r\n\r\nfor i,otv in enumerate(otvs):\r\n\tloc = otv.Location\r\n\totv_loc.Add(loc)\r\n\r\n#otv_rot=angle(otv_rot)\r\n\r\nlenth = get_parameters_elements(otvs, \"Ширина\")\r\ndepth = get_parameters_elements5_round(otvs, \"Глубина\")\r\nwidth = get_parameters_elements(otvs, \"Высота\")\r\n\r\nOUT = []\r\nstr_list = []\r\npereneseno =[]\r\nver_list = []\r\nfor i, el in enumerate(otvs):\r\n\tif int(otv_rot[i]) == otv_rot[i]:\r\n\t\trot = int(otv_rot[i])\r\n\telse:\r\n\t\trot = otv_rot[i]\r\n\tstrrr = str(int(round(float(otv_loc[i].X)/10)*10)) + '|' + str(int(round(float(otv_loc[i].Y)/10)*10)) + '|' + str(int(round(float(otv_loc[i].Z)/10)*10)) + '|' + str(int(lenth[i])) + '|' + str(int(width[i]))+ '|' + str(int(depth[i])) + '|' + str(rot)\r\n\tstr_list.Add(strrr.replace('.', ','))\r\n\r\n\r\nfor i, sd in enumerate(IN[1]):\r\n\tsplit_list = split_string(sd,'|')\r\n\tnew_str=''\r\n\tif len(sd) == 8:\r\n\t\tver = split_list.pop(1)\r\n\t\t#for i in split_list:\r\n\t\t\t#x+=i\r\n\t\t#if x == str_list[i]:\r\n\t\t\t#pereneseno.Add(0)\r\n\t\t#else:\r\n\t\t\t#pereneseno.Add(1)\r\n\t\tnewver = ver+str_list[i]\r\n\t\t\r\n\tif len(sd) == 9:\r\n\t\tver = split_list.pop(0)\r\n\t\t\r\n\t\tx = ''\r\n\t\t#for i in split_list:\r\n\t\t\t#x+=i\r\n\t\t#if x == str_list[i]:\r\n\t\t\t#pereneseno.Add('Не перенесено')\r\n\t\t#else:\r\n\t\t\t#pereneseno.Add('Перенесено')\t\t\t\r\n\t\tnewver = ver+str_list[i]\r\n\t\t\r\n\telse:\r\n\t\ttry:\r\n\t\t\tver = split_list.pop(0)\r\n\t\t\tnewver = ver+'|'+str_list[i]\r\n\t\texcept:\r\n\t\t\r\n\t\t\tnewver = 'V0|'+str_list[i]\r\n\t\t#pereneseno.Add('Не перенесено')\r\n\tver_list.Add(newver)\r\n\t\r\n\tif str_list[i][:-4]\tin sd or sd =='':\r\n\t\tpereneseno.Add('Не перенесено')\r\n\telse:\r\n\t\tpereneseno.Add('Перенесено')\r\nOUT = [ver_list, pereneseno]\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "4ddd058d478f436c92557bf8656759e8",
      "Inputs": [
        {
          "Id": "fe235aa105e14b9b91c6304afe24e505",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "62bf1fbb11fe403081fc0e7b33e96623",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d861d7fb77044c0aaa55b98e445ec66d",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "6ca3f26d12bb45858fe3df53cac483cc",
      "Inputs": [
        {
          "Id": "3f26a79372e44497b8a1b7405ecc3e29",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "704073543d7d486c87f8d351ce3f2bd6",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "79a643510eb64af2bc47416846914cda",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "70ee3e2027d14b4eac4c1b8522f028f9",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Версия задания\";",
      "Id": "1518d9269d43484e830d765ed665498e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d8d2b60ef80341a8a67f695de85fbd07",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "ad88ba75727d45f0b3f6a6bbf3860a7d",
      "Inputs": [
        {
          "Id": "ff619ff0c07c4be1ae5765d98c0b9659",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "46266b39368f4584acb31b8e46eee927",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "aeac68351d294c74826000c3ba77aa01",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Версия задания\";",
      "Id": "f81771e1d9134be483caa77f2bf8b2bc",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "aa558a286daf4ba7a775c7856400fb77",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "6e0d21db157b401086150ab34570a220",
      "Inputs": [
        {
          "Id": "95323475f4e944c980213dd41ee7d33d",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "444d235eafbc47a88451a14b27e6d9fa",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1d274bc88e2e4edf94ca36b0f5b63a4d",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];\nx[1];",
      "Id": "f3174af321a44e96a7a2a85bb1e9ab90",
      "Inputs": [
        {
          "Id": "99feac228b4d40cb8de4199758951b9f",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "66b25964cfa64c73b9a295c0df33b813",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "56c169d49392462aba70c15704537ba4",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "d4072765902e447c9d8cc30f0f66f9ce",
      "Inputs": [
        {
          "Id": "442bf041ab98462a96d6f6f6bcc61888",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "174e84f34987470e9a9c074650d5aaa9",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "519154faf4d3449db6dce60831225bb3",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "54c8a199e8e049f999a1439fdff51068",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "archilab.Revit.Elements.Ducts.Location@Revit.Elements.Element",
      "Id": "1884d708f2c943d9a8e8c78d71002e90",
      "Inputs": [
        {
          "Id": "a217d41e5dc04f5ea948e1d1ede23da5",
          "Name": "duct",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0c504c2da46646eab63e2d91a946c084",
          "Name": "Curve",
          "Description": "Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Ducts.Location (duct: Element): Curve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Curve.SolidIntersection@Autodesk.DesignScript.Geometry.Solid,Autodesk.DesignScript.Geometry.Curve[],bool",
      "Id": "f808aa3c4a8b4d28b510cc86443a9311",
      "Inputs": [
        {
          "Id": "474f94ca6b2b4664afda93155b551c64",
          "Name": "solid",
          "Description": "Input a solid or list of solids.\n\nSolid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1ad159d345e34a059e13ea80735e44cf",
          "Name": "curves",
          "Description": "Input a list of Curves to intersect the solid or solids.\n\nCurve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "46084c8b84cd42e1bff5ab0a20361bb0",
          "Name": "invert",
          "Description": "True to return curve segments outside the solid. False to return curve segments inside the solid.\n\nbool\nЗначение по умолчанию : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "10d9fd3861ca4aa5b1c5d7d519dc16fc",
          "Name": "Curve[]",
          "Description": "Curve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "574137c87b8f4db7bbd564ea6374151c",
          "Name": "exceptions[]",
          "Description": "int[]\r\rReturns indexes of any curves that fail the intersection function",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Finds and returns all intersecting curve segments between a solid and a list of curves. Setting invert to true has the reverse effect and trims curves that intersect the solid.\r\rThe exceptions output returns indexes of any curves that fail the intersection function.\r\rVisit bimorph.com/bimorph-nodes for support\n\nCurve.SolidIntersection (solid: Solid, curves: Curve[], invert: bool = false): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nimport math\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\notvs= UnwrapElement(IN[0])\r\n\r\ndelta = 0\r\notv_ccs_angle = 0\r\n\r\n\r\notv_locs = []\r\notv_rot =[]\r\notv_width =[]\r\notv_lenth =[]\r\notv_hight =[]\r\n\r\nOUT=[]\r\n\r\n\r\n\r\n\r\n\r\n# созданные функции\r\n\r\ndef get_parameters_elements(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\totv_lenth.Add(i)\r\n\treturn otv_lenth\r\n\r\n\r\ndef surfase(pO, angle, width, len, delta,Ez, el):\r\n\tOE = float(width)/2 \r\n\tOF = float(len)/2 \r\n\tpoint_list = []\r\n\r\n\tEx = pO.X * 304.8 + (OE+delta)*math.cos(math.radians(float(angle))) \r\n\tEy = pO.Y * 304.8 + (OE+delta)*math.sin(math.radians(float(angle)))\r\n\t\r\n\tGx = pO.X * 304.8 - (OE+delta)*math.cos(math.radians(float(angle)))\r\n\tGy = pO.Y * 304.8 - (OE+delta)*math.sin(math.radians(float(angle)))\t\r\n\t\r\n\tAx = Gx\r\n\tAy = Gy\r\n\tAz = pO.Z * 304.8+(OF+delta)\r\n\t\r\n\tBx = Ex\r\n\tBy = Ey\r\n\tBz = pO.Z * 304.8+(OF+delta)\r\n\t\r\n\tDx = Gx\r\n\tDy = Gy\r\n\tDz = pO.Z * 304.8-(OF+delta)\r\n\t\r\n\tCx = Ex\r\n\tCy = Ey\r\n\tCz = pO.Z * 304.8-(OF+delta)\r\n\t\r\n\tpoint_list.append(Point.ByCoordinates(Ax, Ay, Az))\r\n\tpoint_list.append(Point.ByCoordinates(Bx, By, Bz))\r\n\tpoint_list.append(Point.ByCoordinates(Cx, Cy, Cz))\r\n\tpoint_list.append(Point.ByCoordinates(Dx,Dy,Dz))\r\n\tsurface = Surface.ByPerimeterPoints(point_list)\r\n\t\r\n\treturn surface\r\n\t\r\ndef surfaces(elements, locs_list, rot_list, width_list, lenth_list, delta, tz_depth):\r\n\ttest =[]\r\n\tsufraces_list = []\r\n\tfor i, el in enumerate(elements):\r\n\t\ttest.Add(i)\r\n\t\tpO = locs_list[i]\r\n\t\tangle = rot_list[i]\r\n\t\twidth = width_list[i]\r\n\t\tlen = lenth_list[i]\r\n\t\t\r\n\t\tdepth = float(tz_depth[i]) - 60\r\n\t\tEz = pO.Z * 304.8 + depth/2\r\n\t\t\t\r\n\t\t\r\n\t\tsufraces_list.Add(surfase(pO, angle, width, len, delta,Ez,el))\r\n\treturn sufraces_list\r\n\r\ndef solid_from_surface(surface, centrP, depth):\r\n\tdelta = depth/2\r\n\tcentrP = Point.ByCoordinates(centrP.X*304.8,centrP.Y*304.8,centrP.Z*304.8)\r\n\tnorkvector = Surface.NormalAtParameter(surface)\r\n\tnorkvector = Vector.ByCoordinates(norkvector.X*delta, norkvector.Y*delta, norkvector.Z*delta)\r\n\tStartPoint = Point.Add(centrP,norkvector)\r\n\tEndPoint = Point.Subtract(centrP,norkvector)\r\n\t\r\n\tline = Line.ByStartPointEndPoint(StartPoint,EndPoint)\r\n\tline1 = Line.ByStartPointEndPoint(EndPoint,centrP)\r\n\tline2 = Line.ByStartPointEndPoint(centrP,StartPoint)\r\n\tStartSurface = Surface.Offset(surface, depth)\r\n\t\r\n\t\r\n\t\r\n\tperimetrlines = Surface.PerimeterCurves(surface)\r\n\tperimetrcurve = Curve.Join(perimetrlines[0],perimetrlines[1:])\r\n\tsolid1 = Solid.BySweep(perimetrcurve,line1)\r\n\tsolid2 = Solid.BySweep(perimetrcurve,line2)\r\n\tsol = Solid.ByUnion([solid1,solid2])\r\n\t\r\n\treturn sol\r\n\r\n\r\ndef solids_from_surfaces(surfaces, centrPs, depth):\r\n\tsolids = []\r\n\tfor i, surf in enumerate(surfaces):\r\n\t\tsol = solid_from_surface(surf, centrPs[i], depth[i])\r\n\t\tsolids.Add(sol)\r\n\treturn solids\r\n\r\n\r\n# Разместите код под этой строкой\r\n\r\notv_lenth = get_parameters_elements(otvs, \"Высота\")\r\notv_depth = get_parameters_elements(otvs, \"Глубина\")\r\notv_width = get_parameters_elements(otvs, \"Ширина\")\r\n\r\notv_lenth = [float(x)*0.05 for x in otv_lenth] \r\notv_depth = [float(x)*1.05 for x in otv_depth] \r\notv_width = [float(x)*0.05 for x in otv_width] \r\ntest = []\r\nfor i in otv_lenth:\r\n\ttest.append(15)\r\n\r\notv_locs1=[]\r\nfor i,otv in enumerate(IN[0]):\r\n\totv_locs1.append(otv.Location)\r\n\r\n\r\n\r\nfor i, otv in enumerate(otv_locs1):\r\n\tpO = Point.ByCoordinates(otv.X/304.8,otv.Y/304.8,otv.Z/304.8)\r\n\totv_locs.Add(pO)\r\n\r\n\r\nfor i,otv in enumerate(otvs):\r\n\totv_rot.Add(math.degrees(otv.Location.Rotation))\r\n\t\r\n\r\n#map(lambda x:x+150, otv_depth)\r\n\r\n\r\n\r\n#otv_surfaces= surfaces(otvs,otv_locs,otv_rot,otv_width,otv_lenth, delta,otv_depth)\r\n#solids=solids_from_surfaces(otv_surfaces, otv_locs, otv_depth)\r\n#OUT.Add(solids)\r\n\r\notv_surfaces= surfaces(otvs,otv_locs,otv_rot,test,test, delta,otv_depth)\r\nsolids=solids_from_surfaces(otv_surfaces, otv_locs, otv_depth)\r\nOUT.Add(solids)\r\n\r\n\r\n\r\n#OUT.Add(otv_surfaces)\r\n\r\n# Назначьте вывод переменной OUT.\r\n",
      "VariableInputPorts": true,
      "Id": "6496918750214eb791df464286cbbb24",
      "Inputs": [
        {
          "Id": "e82ade0f02fc4aaab4c79a33c00e4927",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "576194a8bc034cbc9db60fa118c0628f",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "079a38ca6ebc4c94ad19fdc676bd342a",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7beff8ce788746f7a624a057932fb57e",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "46838ad8c94d490184755038043bd0bb",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c4c4ced985aa4191bc7bbececf60bd4f",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\nelements = IN[0]\r\nOUT = []\r\n# Разместите код под этой строкой\r\nfor element in elements:\r\n\ttry:\r\n\t\tif len(element)>0:\r\n\t\t\tOUT.Add(True)\r\n\t\telse:\r\n\t\t\tOUT.Add(False)\r\n\texcept:\r\n\t\tOUT.Add(False)\r\n# Назначьте вывод переменной OUT.\r\n",
      "VariableInputPorts": true,
      "Id": "0cf641bb2f1e442a8cb3f653aebbcd8c",
      "Inputs": [
        {
          "Id": "fe45bc536a604358b2e82574d8819780",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2e107286686d4b879a29f47610e3ebea",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];",
      "Id": "07e338ff970643e9974b1c227b14584c",
      "Inputs": [
        {
          "Id": "1fa15a8c8dd34ddc9089880f815590cf",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "805c698a44f44473b6606942fb714070",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "4867046d7d78402eb9dcb316554c96cb",
      "Inputs": [
        {
          "Id": "108040412792409ca2c2011500d08a99",
          "Name": "list",
          "Description": "Список, который требуется отфильтровать.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8de0c59782d0471ba9493a246606366b",
          "Name": "mask",
          "Description": "Список логических операций, представляющих маску.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "62f56c928db741248b5b9f8acfd4476d",
          "Name": "in",
          "Description": "Элементы, индекс маски которых имеет значение «истина».",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d5d55107b61149be99b429c0c6874a79",
          "Name": "out",
          "Description": "Элементы, индекс маски которых имеет значение «ложь».",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Фильтрация последовательности путем поиска соответствующих индексов в отдельном списке логических операций.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.FilterByBoolMask@var[]..[],var[]..[]",
      "Id": "cb729885c36f4495b6795cef2d6fde68",
      "Inputs": [
        {
          "Id": "338db3ebdb4a4a109e9bd8e876da6362",
          "Name": "list",
          "Description": "Список, который требуется отфильтровать.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d4c89ea61e6d4d1d958bacfb0ea59ae0",
          "Name": "mask",
          "Description": "Список логических операций, представляющих маску.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a4025439f0ec460fa891e0d2d6fecfd0",
          "Name": "in",
          "Description": "Элементы, индекс маски которых имеет значение «истина».",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "49c409ca38f249ba83352dbdf6599ed3",
          "Name": "out",
          "Description": "Элементы, индекс маски которых имеет значение «ложь».",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Фильтрация последовательности путем поиска соответствующих индексов в отдельном списке логических операций.\n\nList.FilterByBoolMask (list: var[]..[], mask: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\nelements = IN[0]\r\nOUT = []\r\n# Разместите код под этой строкой\r\nfor element in elements:\r\n\tif len(element)>0:\r\n\t\tOUT.Add(True)\r\n\telse:\r\n\t\tOUT.Add(False)\r\n# Назначьте вывод переменной OUT.\r\n",
      "VariableInputPorts": true,
      "Id": "8b3cb7cfba5447438606800a2698c8d4",
      "Inputs": [
        {
          "Id": "90495dee8ad1494e849241276fa770b9",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5cbcfdc298844655b148115c27d4aca5",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "1b03ea7d81d24527ac138ac6cbd2553c",
      "Inputs": [
        {
          "Id": "bb72a7fe9d50439ea92d1bc71d583d86",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3f5e4d1250164729aec270df606d90cf",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];",
      "Id": "e59c0f3b8cda423c8e5a9011e822d570",
      "Inputs": [
        {
          "Id": "2d877b9459f74dd4a23ba6f253efd2a8",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b49ad824425a42d58cf804269936f84a",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Curve.SolidIntersection@Autodesk.DesignScript.Geometry.Solid,Autodesk.DesignScript.Geometry.Curve[],bool",
      "Id": "cad10da8642d4f5c8235f52fa6b87d78",
      "Inputs": [
        {
          "Id": "3e4c36e1fbad44b8a4dc36f2afd2b3ad",
          "Name": "solid",
          "Description": "Input a solid or list of solids.\n\nSolid",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "189eff9d529546158b9c74dcbb329f1b",
          "Name": "curves",
          "Description": "Input a list of Curves to intersect the solid or solids.\n\nCurve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "95a88440c687472885e48a30d25d6669",
          "Name": "invert",
          "Description": "True to return curve segments outside the solid. False to return curve segments inside the solid.\n\nbool\nЗначение по умолчанию : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2e65d8e2f0624575bb6ab470e47d1c01",
          "Name": "Curve[]",
          "Description": "Curve[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0815c4c53273431d9814e51478cbb4c8",
          "Name": "exceptions[]",
          "Description": "int[]\r\rReturns indexes of any curves that fail the intersection function",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Finds and returns all intersecting curve segments between a solid and a list of curves. Setting invert to true has the reverse effect and trims curves that intersect the solid.\r\rThe exceptions output returns indexes of any curves that fail the intersection function.\r\rVisit bimorph.com/bimorph-nodes for support\n\nCurve.SolidIntersection (solid: Solid, curves: Curve[], invert: bool = false): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nimport math\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\notvs= UnwrapElement(IN[0])\r\n\r\ndelta = 0\r\notv_ccs_angle = 0\r\n\r\n\r\notv_locs = []\r\notv_rot =[]\r\notv_width =[]\r\notv_lenth =[]\r\notv_hight =[]\r\n\r\nOUT=[]\r\n\r\n\r\n\r\n\r\n\r\n# созданные функции\r\n\r\ndef get_parameters_elements(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\totv_lenth.Add(i)\r\n\treturn otv_lenth\r\n\r\n\r\ndef surfase(pO, angle, width, len, delta,Ez, el):\r\n\tOE = float(width)/2 \r\n\tOF = float(len)/2 \r\n\tpoint_list = []\r\n\r\n\tEx = pO.X * 304.8 + (OE+delta)*math.cos(math.radians(float(angle))) \r\n\tEy = pO.Y * 304.8 + (OE+delta)*math.sin(math.radians(float(angle)))\r\n\t\r\n\tGx = pO.X * 304.8 - (OE+delta)*math.cos(math.radians(float(angle)))\r\n\tGy = pO.Y * 304.8 - (OE+delta)*math.sin(math.radians(float(angle)))\t\r\n\t\r\n\tAx = Gx\r\n\tAy = Gy\r\n\tAz = pO.Z * 304.8+(OF+delta)\r\n\t\r\n\tBx = Ex\r\n\tBy = Ey\r\n\tBz = pO.Z * 304.8+(OF+delta)\r\n\t\r\n\tDx = Gx\r\n\tDy = Gy\r\n\tDz = pO.Z * 304.8-(OF+delta)\r\n\t\r\n\tCx = Ex\r\n\tCy = Ey\r\n\tCz = pO.Z * 304.8-(OF+delta)\r\n\t\r\n\tpoint_list.append(Point.ByCoordinates(Ax, Ay, Az))\r\n\tpoint_list.append(Point.ByCoordinates(Bx, By, Bz))\r\n\tpoint_list.append(Point.ByCoordinates(Cx, Cy, Cz))\r\n\tpoint_list.append(Point.ByCoordinates(Dx,Dy,Dz))\r\n\tsurface = Surface.ByPerimeterPoints(point_list)\r\n\t\r\n\treturn surface\r\n\t\r\ndef surfaces(elements, locs_list, rot_list, width_list, lenth_list, delta, tz_depth):\r\n\ttest =[]\r\n\tsufraces_list = []\r\n\tfor i, el in enumerate(elements):\r\n\t\ttest.Add(i)\r\n\t\tpO = locs_list[i]\r\n\t\tangle = rot_list[i]\r\n\t\twidth = width_list[i]\r\n\t\tlen = lenth_list[i]\r\n\t\t\r\n\t\tdepth = float(tz_depth[i]) - 60\r\n\t\tEz = pO.Z * 304.8 + depth/2\r\n\t\t\t\r\n\t\t\r\n\t\tsufraces_list.Add(surfase(pO, angle, width, len, delta,Ez,el))\r\n\treturn sufraces_list\r\n\r\ndef solid_from_surface(surface, centrP, depth):\r\n\tdelta = depth/2\r\n\tcentrP = Point.ByCoordinates(centrP.X*304.8,centrP.Y*304.8,centrP.Z*304.8)\r\n\tnorkvector = Surface.NormalAtParameter(surface)\r\n\tnorkvector = Vector.ByCoordinates(norkvector.X*delta, norkvector.Y*delta, norkvector.Z*delta)\r\n\tStartPoint = Point.Add(centrP,norkvector)\r\n\tEndPoint = Point.Subtract(centrP,norkvector)\r\n\t\r\n\tline = Line.ByStartPointEndPoint(StartPoint,EndPoint)\r\n\tline1 = Line.ByStartPointEndPoint(EndPoint,centrP)\r\n\tline2 = Line.ByStartPointEndPoint(centrP,StartPoint)\r\n\tStartSurface = Surface.Offset(surface, depth)\r\n\t\r\n\t\r\n\t\r\n\tperimetrlines = Surface.PerimeterCurves(surface)\r\n\tperimetrcurve = Curve.Join(perimetrlines[0],perimetrlines[1:])\r\n\tsolid1 = Solid.BySweep(perimetrcurve,line1)\r\n\tsolid2 = Solid.BySweep(perimetrcurve,line2)\r\n\tsol = Solid.ByUnion([solid1,solid2])\r\n\t\r\n\treturn sol\r\n\r\n\r\ndef solids_from_surfaces(surfaces, centrPs, depth):\r\n\tsolids = []\r\n\tfor i, surf in enumerate(surfaces):\r\n\t\tsol = solid_from_surface(surf, centrPs[i], depth[i])\r\n\t\tsolids.Add(sol)\r\n\treturn solids\r\n\r\n\r\n# Разместите код под этой строкой\r\n\r\notv_lenth = get_parameters_elements(otvs, \"Высота\")\r\notv_depth = get_parameters_elements(otvs, \"Глубина\")\r\notv_width = get_parameters_elements(otvs, \"Ширина\")\r\n\r\notv_lenth = [float(x)*0.05 for x in otv_lenth] \r\notv_depth = [float(x)**1.05 for x in otv_depth] \r\notv_width = [float(x)*0.05 for x in otv_width] \r\ntest = []\r\nfor i in otv_lenth:\r\n\ttest.append(15)\r\n\r\notv_locs1=[]\r\nfor i,otv in enumerate(IN[0]):\r\n\totv_locs1.append(otv.Location)\r\n\r\n\r\n\r\nfor i, otv in enumerate(otv_locs1):\r\n\tpO = Point.ByCoordinates(otv.X/304.8,otv.Y/304.8,otv.Z/304.8)\r\n\totv_locs.Add(pO)\r\n\r\n\r\nfor i,otv in enumerate(otvs):\r\n\totv_rot.Add(math.degrees(otv.Location.Rotation))\r\n\t\r\n\r\n#map(lambda x:x+150, otv_depth)\r\n\r\n\r\n\r\n#otv_surfaces= surfaces(otvs,otv_locs,otv_rot,otv_width,otv_lenth, delta,otv_depth)\r\n#solids=solids_from_surfaces(otv_surfaces, otv_locs, otv_depth)\r\n#OUT.Add(solids)\r\n\r\notv_surfaces= surfaces(otvs,otv_locs,otv_rot,test,test, delta,otv_depth)\r\nsolids=solids_from_surfaces(otv_surfaces, otv_locs, otv_depth)\r\nOUT.Add(solids)\r\n\r\n\r\n\r\n#OUT.Add(otv_surfaces)\r\n\r\n# Назначьте вывод переменной OUT.\r\n",
      "VariableInputPorts": true,
      "Id": "7612c9382e7c463c85f17a6e3c6c772a",
      "Inputs": [
        {
          "Id": "b7d2e3a1d0d640d184893b8a37393e6b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "37f22099c1064d9a969b07b0fb02309b",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cf6e85db71704bea925213cd17a60a60",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1ea24c2bbf424d3888ae79b2bc3777a0",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "aed80c6ef41946a3ac913b21064f2ef3",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e5d01c1a2be5436b907d5ddaa6f894c5",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "archilab.Revit.Elements.Ducts.Location@Revit.Elements.Element",
      "Id": "0130339e07f3456bbb8c8919ad0ecd91",
      "Inputs": [
        {
          "Id": "197d9ecab23345b097d5b1d506b98769",
          "Name": "duct",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f156478f829f45ed9747eaf89ecef143",
          "Name": "Curve",
          "Description": "Curve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Ducts.Location (duct: Element): Curve"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "174821945a0f429fb2c1d94bbd108fd0",
      "Inputs": [
        {
          "Id": "a41bb7b7fca146179c7d959cf32ca665",
          "Name": "list0",
          "Description": "Списки для объединения в один.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "df744b65be93411a97cc058732ffd411",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a280b1a93a0447389a92b04ceb91e574",
          "Name": "list",
          "Description": "Объединенный список.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Объединение всех имеющихся списков в один.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x;",
      "Id": "73ee69d3009f42b8b708cde0c7d5aad1",
      "Inputs": [
        {
          "Id": "4e5f1f7fee0847ea9fd34fb69ab728c6",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2e359ecfc29649a9bf990017c79da11d",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "4ed993b1f81645598251f1b65bc05453",
      "Inputs": [
        {
          "Id": "8ce484a39d5d4db2b137f602ef9fb3fd",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "963b16ab1c6142a89ffa4850926eedbe",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "5f9bd529c2cc4ca3932213b3ca215c54",
      "Inputs": [
        {
          "Id": "81226f489d8d4c36ad0e2f6bef94d961",
          "Name": "list0",
          "Description": "Списки для объединения в один.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d9d0d46317a94dbaa52f83a403e49ed3",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "446baf38121f413fb629a6dc60d25d1b",
          "Name": "list2",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2286fdefbe504f129115d0cb935df9fe",
          "Name": "list",
          "Description": "Объединенный список.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Объединение всех имеющихся списков в один.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\n\r\ntry:\r\n\tif len(IN[0])==0:\r\n\t\tOUT = IN[0]\r\n\tif len(IN[0])>0:\r\n\t\tOUT = IN[0]\r\n\t\r\nexcept:\r\n\tOUT =[\"\"]\r\n",
      "VariableInputPorts": true,
      "Id": "1f3cf8a698c544e78df6e16b6d3a559e",
      "Inputs": [
        {
          "Id": "c292fa09d1e0494194edc9f2815e8619",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "235424c35a034c50b616b1f9e1c67378",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\n\r\ntry:\r\n\tif len(IN[0])==0:\r\n\t\tOUT = IN[0]\r\n\tif len(IN[0])>0:\r\n\t\tOUT = IN[0]\r\n\t\r\nexcept:\r\n\tOUT =[\"\"]\r\n",
      "VariableInputPorts": true,
      "Id": "9930dc78ddb84cbbb8a237b65164a21d",
      "Inputs": [
        {
          "Id": "89bfa94126f443f8a20e415db173c75b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "bceac5e2948c4f189e15c6f2e69c8ea3",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "286397b9004e4e87bdceeab57edf1e82",
      "Inputs": [
        {
          "Id": "a06f3977ee684b40813dd5458de8598c",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "08d30e05562c446c92f90e3d149e0119",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "fca0f2d2da704e05a2c305c62bf58639",
      "Inputs": [
        {
          "Id": "3e4921cad0c84d308aaebc41dda47b28",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0f6d721c6db64e53983444e53eb38888",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "28c7ce4f5f354de5a4628d12e5128c2d",
      "Inputs": [
        {
          "Id": "62e7b88d920d409cbb394939d3b7316d",
          "Name": "list0",
          "Description": "Списки для объединения в один.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f471de58e3f14c808f61ec483f8aa958",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5be13821d05140ecaa2907b901ee964d",
          "Name": "list",
          "Description": "Объединенный список.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Объединение всех имеющихся списков в один.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x;",
      "Id": "8207413f4ccd4f6bbcb87a2c617d1640",
      "Inputs": [
        {
          "Id": "159af6c4e29b4c83ae24d31b0ee4b349",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8c1079a1c9484dc681f85b82ef5ffcd6",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\r\nOUT = 0\r\nfor i in IN[0]:\r\n\ttry:\r\n\t\t\r\n\t\tif i == '' or i== None:\r\n\t\t\tpass\r\n\t\telse:\r\n\t\t\tOUT += 1\r\n\t\t\t\r\n\texcept:\r\n\t\tpass",
      "VariableInputPorts": true,
      "Id": "2d15da64ee8148f3a2f28c4da2bb645a",
      "Inputs": [
        {
          "Id": "be4ca5840ee94b6db861f37cebd00c40",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0008873d459a439daad9536df81b255d",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "c2fb6dd622874b80b5e51e65acb41fb2",
      "Inputs": [
        {
          "Id": "d15ae2129e204444b6d2bdc46ab3463f",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fcea568012b643499c415282ecf1dd68",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "037faf60332c434daf0e3460b9e18eb5",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b4482090569941dd999dd7e1e507f4c8",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Перенесено задание\";",
      "Id": "2d8060d150504ccd98aea2b16c966230",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "397fb47e05744f3ab38401acacc847f2",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "1a8b1cd4694e4119bc4af0a25088bc90",
      "Inputs": [
        {
          "Id": "475a71511246496182220e718759738e",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b416c6eec6ac46d4b34aa0f8e932d6db",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "be8ca6ec0447451bafd277af7cdfd703",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3aa66874980d413cbd45e412ec7a83b2",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];\nx[1];",
      "Id": "74c43c74bac147c99dcb280746d4bdb4",
      "Inputs": [
        {
          "Id": "10ed7048a0ea4770b513496cb7503cd6",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "778503540a44480586926cbb22fbe481",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9b82221ac48845ae92bf00a68150f36c",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Позиции задания\";",
      "Id": "3336452c425b4ad280b95c618253a56c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6914c79ae0574d78bd40dfd65bae52a2",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "3d11919bbf7148c8ad2ee68758ba9ffb",
      "Inputs": [
        {
          "Id": "9f6b30613c6746da90c2dafbfbbd8809",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "41242a71670146c285c458951ac6b2f0",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fae1d90e40f04da29c68b72182a98e05",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "0d1ff2ff46cc481d956fdd3a866230e0",
      "Inputs": [
        {
          "Id": "c1fa8a12f7ce44b39c27cbd75c10a4f8",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8164fd3479c64798a23726e6fff7e562",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5ab8574e181d4842b19fbe2ff8ee0f69",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Версия задания\";",
      "Id": "aa0fe778feca48068609187dd45a64cb",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "dcc842849e6540a68f587c213965c456",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Позиции задания\";",
      "Id": "bbdb1e366f3040f9ba9a1c37a4d008de",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6020b4260ce64d178725848ea92e3166",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "713e4a22da7c42a788b6f08b049d0223",
      "Inputs": [
        {
          "Id": "40d3ab4770ab4ecca9fcbeaeb1786763",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6df780ed24fc4174b6ad2da0d70f00f9",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b0c1f3dfce6c45f0a5ae1cf8ccd55f74",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "40aff4aafb3a47abb995a69f692f42b8",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Перенесено задание\";",
      "Id": "97f7b04c45974a078582e7bbec362067",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4d92ed6a495a4112bf4071b091b652ee",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "c24bb35a8bd045da9a90d7b0d4661bf6",
      "Inputs": [
        {
          "Id": "cafff1accaef42efa3d80ecb8ea885a7",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "150cfe9b5e5a4a59a818c1793d876fe4",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fbaea39771f04e19a0ef3b179f33a436",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a8b5b0b30a734e63b3469c1149b17df0",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];\nx[1];",
      "Id": "7c0185b7d627423eba3cec1edc73b675",
      "Inputs": [
        {
          "Id": "60bf926d4a354a41bb0101ce4f445fbc",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2991d5ffc4d6472ba7e04fddf79b5782",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a90a2278d5bd4675a28b20e2539ad3c5",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Позиции задания\";",
      "Id": "4399a9370fe540bea6f142da25fcb670",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7c0ca9fa24694d578745421fe4a77c29",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "8b87deed7e85426ba5cfb4efe388a5a6",
      "Inputs": [
        {
          "Id": "93b0036f355d44a78b636d4f9feb9996",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c01c020be3864110880de02ba72efcf4",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "88d09fef52034b89b4c27cabb36c1940",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "879050bcdd704f06802772c8e7f22e0d",
      "Inputs": [
        {
          "Id": "a5c25cced96b45cb8fbe339f20ff351a",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "54837ebb0ba74bada3a1a5a61d9c9fb9",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "51db872441e14504b74e11bf180e1074",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Версия задания\";",
      "Id": "c3989fdc3c514a54b1b641ad3c5bca08",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3d37d27fd506432ab12f5d12c1d1b7aa",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Позиции задания\";",
      "Id": "b9e88aa4eda24ac69951812d9ba98431",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "77b855ef519047f3a9f0a00ea1c527d6",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "55ec1fe1b3a340a4b94fbf3ade266dfa",
      "Inputs": [
        {
          "Id": "d8185577f834408fbf6ab75839b38bef",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d1b5b2c6bc0b4f8a84c36ce2f12bb3aa",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cab5a7e583f649038a8a0eb2be34a76e",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e1176f2ddf5346adb954e0b67a44f84a",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Перенесено задание\";",
      "Id": "9fa40cc2836042f0992406e70376adf5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "49ca707e6a74406ea1ecb7ee549394fa",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "00c3f3be990c4772891a8f9562cfc13c",
      "Inputs": [
        {
          "Id": "c81fab2b5a8e47bfb7ead6830b2a6540",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b489d4777525421e9e00bb8db0321a98",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6a14aa53f15f459c8b2c18bc61742cb5",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7ebf4aa6b5da48e1bedb37e82edb095e",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];\nx[1];",
      "Id": "ef5a7c5cb9df468ca7e865a00c510c32",
      "Inputs": [
        {
          "Id": "92e4e8bbbc834b42b4d0f73a4f127939",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "87cffbd7b538404b8a54c0aa1cba75ce",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "79ce0d7792a442388dbe36d378ed9e7b",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Позиции задания\";",
      "Id": "06302a7a9101490591c8873a9de3bdd5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "735f3dba8a4f4cb8bb6ba1dfeabcc7bd",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "591d9a6fe42b45899ea300b0ef1e4946",
      "Inputs": [
        {
          "Id": "17fd9be3930e49b98a82e08c196aebf2",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1e7d38c6ef884fa1807c142fee73a3b6",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "29dcddc045df416cbd16b87b7dbbca8e",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "50322e7c5b2d4034b3295d0fdb932fe3",
      "Inputs": [
        {
          "Id": "82a4c45658dc424fb03d795708d78caa",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f334efabd3044bf6a4badae344494aef",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4781bd0137d94618a130c3e2e2bc19cc",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Версия задания\";",
      "Id": "bafc962e6b694d9cb864ba74ae8db0cb",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8fee5092f23b4cd1a4f5707f97236d99",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Позиции задания\";",
      "Id": "3ab11115e9ba4da1b606d6e2c1c26a84",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "37d1b01941304dbd91768e2d44111363",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\r\nOUT = 0\r\nfor i in IN[0]:\r\n\ttry:\r\n\t\t\r\n\t\tif i == '' or i== None:\r\n\t\t\tpass\r\n\t\telse:\r\n\t\t\tOUT += 1\r\n\t\t\t\r\n\texcept:\r\n\t\tpass",
      "VariableInputPorts": true,
      "Id": "79b0dd291dc54ec18be392cf2ba16a1c",
      "Inputs": [
        {
          "Id": "7f50b439fc434fcabef6008eeb17ca52",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "00930e1e718c44698216b2a0bf1cc751",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\r\nOUT = 0\r\nfor i in IN[0]:\r\n\ttry:\r\n\t\t\r\n\t\tif i == '' or i== None:\r\n\t\t\tpass\r\n\t\telse:\r\n\t\t\tOUT += 1\r\n\t\t\t\r\n\texcept:\r\n\t\tpass",
      "VariableInputPorts": true,
      "Id": "c5a25e617c6241d1a88c6790f731be81",
      "Inputs": [
        {
          "Id": "46a558d6084a40c080b64d9e551869b2",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a75a38196458460cafaef6f9ca819109",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nimport math\r\nimport re\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\n\r\n\r\n\r\ndef angle(angles):\r\n\t \r\n\tOUT = []\r\n\tlist=[]\r\n\tOUT1 =[]\r\n\t# Разместите код под этой строкой\r\n\tfor angle in angles:\r\n\t\tif 315<=angle<=360:\r\n\t\t\tangle-=315\r\n\t\telif 270<=angle<315:\r\n\t\t\tangle-=270\r\n\t\telif 225<=angle<=270:\r\n\t\t\tangle-=225\r\n\t\telif 180<=angle<=225:\r\n\t\t\tangle-=180\r\n\t\t\t\r\n\t\telif 135<=angle<=180:\r\n\t\t\tangle-=135\r\n\t\t\t\r\n\t\telif 90<=angle<=135:\r\n\t\t\tangle-=90\r\n\t\t\r\n\t\telif 45<=angle<=90:\r\n\t\t\tangle-=45\r\n\t\t\t\r\n\t\telif 45<=angle<=0:\r\n\t\t\tangle-=0\r\n\t\telse:\r\n\t\t\tangle=angle\r\n\t\tlist.Add(round(angle,2))\r\n\t\t\r\n\tfor angle in list:\r\n\t\tif angle >= 22.5:\r\n\t\t\tif angle>=33.4:\r\n\t\t\t\tangle = 45-angle\r\n\t\t\telse:\r\n\t\t\t\tangle = angle-22.5\t\t\r\n\t\telif angle < 22.5:\r\n\t\t\tangle=angle\r\n\t\tOUT1.Add(angle)\r\n\t\t\r\n\treturn OUT1\r\n\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\n\r\n\r\n\r\n\r\n# созданные функции\r\n\r\ndef get_parameters_elements(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\ti = round(int(i)/10,0)*10\r\n\t\totv_lenth.Add(i)\r\n\treturn otv_lenth\r\n\t\r\n\t\r\n\t\r\ndef get_parameters_elements5_round(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\tx = round(int(i)/5)*5\r\n\t\totv_lenth.Add(x)\r\n\treturn otv_lenth\t\r\n\t\r\n\t\r\n\t\r\notvs= IN[0]\r\notv_rot =[]\r\notv_ver = IN[1]\r\notv_loc = []\r\notv_all_poss = IN[2]\r\nOUT = []\r\nnew_loc_list = []\r\npereneseno =[]\r\nlast_loc_list = []\r\n\r\n\r\n\r\nfor i,otv in enumerate(UnwrapElement(otvs)):\r\n\trot = math.degrees(otv.Location.Rotation)\r\n\t#rot = round(rot/10,0)*10\r\n\totv_rot.Add(rot)\r\n\r\nfor i,otv in enumerate(otvs):\r\n\totv_loc.Add(otv.Location)\r\n\r\n#otv_rot=angle(otv_rot)\r\n\r\nlenth = get_parameters_elements(otvs, \"Ширина\")\r\ndepth = get_parameters_elements5_round(otvs, \"Глубина\")\r\nwidth = get_parameters_elements(otvs, \"Высота\")\r\n\r\n\r\n\r\n# нахождение актуального месторасположения\r\nfor i, el in enumerate(otvs):\r\n\tif int(otv_rot[i]) == otv_rot[i]:\r\n\t\trot = int(otv_rot[i])\r\n\telse:\r\n\t\trot = otv_rot[i]\r\n\tstrrr = str(int(round(float(otv_loc[i].X)/10)*10)) + '|' + str(int(round(float(otv_loc[i].Y)/10)*10)) + '|' + str(int(round(float(otv_loc[i].Z)/10)*10)) + '|' + str(int(lenth[i])) + '|' + str(int(width[i]))+ '|' + str(int(depth[i])) + '|' + str(rot)\r\n\tnew_loc_list.Add(strrr.replace('.', ','))\r\n\r\n#  нахождение фактического положения\r\nfor ver in otv_ver:\r\n\tver_split = split_string(ver, '|')\r\n\ttry:\r\n\t\tver_split.pop(9)\r\n\texcept:\r\n\t\tpass\r\n\ttry:\r\n\t\tver_split.pop(8)\r\n\texcept:\r\n\t\tpass\r\n\ttry:\r\n\t\tver_split.pop(0)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\tlast_loc = ''\r\n\tfor i in ver_split:\r\n\t\tlast_loc+= i+ '|'\r\n\tlast_loc = last_loc[:-1]+ ';'\t\r\n\tlast_loc_list.Add(last_loc)\r\n\r\n\r\n\r\nnew_all_possition = []\r\npereneseno = []\r\n\r\n\r\nfor new_position, last_poss, all_poss in zip(new_loc_list,last_loc_list,otv_all_poss):\r\n\tif new_position[:-4] not in all_poss:\r\n\t\tall_poss= new_position+all_poss\r\n\tif last_poss[:-4] not in all_poss:\r\n\t\tall_poss+= last_poss\r\n\r\n\tnew_all_possition.Add(all_poss)\r\n\r\nnew_all_possition_out = []\r\n\r\nfor i,j,k in zip(IN[1],new_all_possition,otv_all_poss):\t\r\n\tif 'V0' in i:\r\n\t\tst = k\r\n\t\tnew_all_possition_out.Add(st)\r\n\telse:\r\n\t\tnew_all_possition_out.Add(j)\r\n\r\n\r\nfor i in new_all_possition:\r\n\tx = i.count(';')\r\n\tif x>1:\r\n\t\tpereneseno.Add('Перенесено')\r\n\telse:\r\n\t\tpereneseno.Add('Не перенесено')\r\n\r\nOUT = [new_all_possition,pereneseno,new_loc_list,new_all_possition_out]\t\t\r\n\t\r\n#OUT = [new_all_possition,pereneseno]\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "2d7f406e24e0416890ec19d9740ae4ee",
      "Inputs": [
        {
          "Id": "887d99328eb64d109978b88d12a11912",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b0e6fbdd4a2c46bd8a00171e0b87949a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f03b116aa4e04c04b946a2a09a28c93b",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "163cad64302842d8a401c45c8b462430",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nimport math\r\nimport re\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\notvs= IN[0]\r\notv_rot =[]\r\notv_loc = []\r\n\r\n\r\n\r\ndef angle(angles):\r\n\t \r\n\tOUT = []\r\n\tlist=[]\r\n\tOUT1 =[]\r\n\t# Разместите код под этой строкой\r\n\tfor angle in angles:\r\n\t\tif 315<=angle<=360:\r\n\t\t\tangle-=315\r\n\t\telif 270<=angle<315:\r\n\t\t\tangle-=270\r\n\t\telif 225<=angle<=270:\r\n\t\t\tangle-=225\r\n\t\telif 180<=angle<=225:\r\n\t\t\tangle-=180\r\n\t\t\t\r\n\t\telif 135<=angle<=180:\r\n\t\t\tangle-=135\r\n\t\t\t\r\n\t\telif 90<=angle<=135:\r\n\t\t\tangle-=90\r\n\t\t\r\n\t\telif 45<=angle<=90:\r\n\t\t\tangle-=45\r\n\t\t\t\r\n\t\telif 45<=angle<=0:\r\n\t\t\tangle-=0\r\n\t\telse:\r\n\t\t\tangle=angle\r\n\t\tlist.Add(round(angle,2))\r\n\t\t\r\n\tfor angle in list:\r\n\t\tif angle >= 22.5:\r\n\t\t\tif angle>=33.4:\r\n\t\t\t\tangle = 45-angle\r\n\t\t\telse:\r\n\t\t\t\tangle = angle-22.5\t\t\r\n\t\telif angle < 22.5:\r\n\t\t\tangle=angle\r\n\t\tOUT1.Add(angle)\r\n\t\t\r\n\treturn OUT1\r\n\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\n\r\n\r\n\r\n\r\n# созданные функции\r\n\r\ndef get_parameters_elements(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\tx = round(int(i)/10)*10\r\n\t\totv_lenth.Add(x)\r\n\treturn otv_lenth\r\n\r\n\r\n\r\ndef get_parameters_elements5_round(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\tx = round(int(i)/5)*5\r\n\t\totv_lenth.Add(x)\r\n\treturn otv_lenth\r\n\r\n\r\n\r\n\r\nfor i,otv in enumerate(UnwrapElement(otvs)):\r\n\trot = math.degrees(otv.Location.Rotation)\r\n\t#rot = round(rot/10,0)*10\r\n\totv_rot.Add(rot)\r\n\t\r\nfor i,otv in enumerate(otvs):\r\n\totv_loc.Add(otv.Location)\r\n\r\notv_rot=(otv_rot)\r\n\r\nlenth = get_parameters_elements(otvs, \"Ширина\")\r\ndepth = get_parameters_elements5_round(otvs, \"Глубина\")\r\nwidth = get_parameters_elements(otvs, \"Высота\")\r\n\r\nOUT = []\r\nstr_list = []\r\npereneseno =[]\r\nver_list = []\r\nfor i, el in enumerate(otvs):\r\n\tif int(otv_rot[i]) == otv_rot[i]:\r\n\t\trot = int(otv_rot[i])\r\n\telse:\r\n\t\trot = otv_rot[i]\r\n\tstrrr = str(int(round(float(otv_loc[i].X)/10)*10)) + '|' + str(int(round(float(otv_loc[i].Y)/10)*10)) + '|' + str(int(round(float(otv_loc[i].Z)/10)*10)) + '|' + str(int(lenth[i])) + '|' + str(int(width[i]))+ '|' + str(int(depth[i])) + '|' + str(rot)\r\n\tstr_list.Add(strrr.replace('.', ','))\r\n\r\n\r\nfor i, sd in enumerate(IN[1]):\r\n\tsplit_list = split_string(sd,'|')\r\n\tnew_str=''\r\n\tif len(sd) == 8:\r\n\t\tver = split_list.pop(1)\r\n\t\t#for i in split_list:\r\n\t\t\t#x+=i\r\n\t\t#if x == str_list[i]:\r\n\t\t\t#pereneseno.Add(0)\r\n\t\t#else:\r\n\t\t\t#pereneseno.Add(1)\r\n\t\tnewver = ver+str_list[i]\r\n\t\t\r\n\tif len(sd) == 9:\r\n\t\tver = split_list.pop(0)\r\n\t\t\r\n\t\tx = ''\r\n\t\t#for i in split_list:\r\n\t\t\t#x+=i\r\n\t\t#if x == str_list[i]:\r\n\t\t\t#pereneseno.Add('Не перенесено')\r\n\t\t#else:\r\n\t\t\t#pereneseno.Add('Перенесено')\t\t\t\r\n\t\tnewver = ver+str_list[i]\r\n\t\t\r\n\telse:\r\n\t\ttry:\r\n\t\t\tver = split_list.pop(0)\r\n\t\t\tnewver = ver+'|'+str_list[i]\r\n\t\texcept:\r\n\t\t\r\n\t\t\tnewver = 'V0|'+str_list[i]\r\n\t\t#pereneseno.Add('Не перенесено')\r\n\tver_list.Add(newver)\r\n\t\r\n\tif str_list[i][:-4]\tin sd or sd =='':\r\n\t\tpereneseno.Add('Не перенесено')\r\n\telse:\r\n\t\tpereneseno.Add('Перенесено')\r\nOUT = [ver_list, pereneseno]\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "f8187566d6f34e4e9844e0891d2a819c",
      "Inputs": [
        {
          "Id": "0a8bf0833e2841f2973d3196a3e27759",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d6a01970ed454d6f804c95528839c641",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a8878950d10d4204a0b790bffa830ef8",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nimport math\r\nimport re\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\n\r\n\r\n\r\ndef angle(angles):\r\n\t \r\n\tOUT = []\r\n\tlist=[]\r\n\tOUT1 =[]\r\n\t# Разместите код под этой строкой\r\n\tfor angle in angles:\r\n\t\tif 315<=angle<=360:\r\n\t\t\tangle-=315\r\n\t\telif 270<=angle<315:\r\n\t\t\tangle-=270\r\n\t\telif 225<=angle<=270:\r\n\t\t\tangle-=225\r\n\t\telif 180<=angle<=225:\r\n\t\t\tangle-=180\r\n\t\t\t\r\n\t\telif 135<=angle<=180:\r\n\t\t\tangle-=135\r\n\t\t\t\r\n\t\telif 90<=angle<=135:\r\n\t\t\tangle-=90\r\n\t\t\r\n\t\telif 45<=angle<=90:\r\n\t\t\tangle-=45\r\n\t\t\t\r\n\t\telif 45<=angle<=0:\r\n\t\t\tangle-=0\r\n\t\telse:\r\n\t\t\tangle=angle\r\n\t\tlist.Add(round(angle,2))\r\n\t\t\r\n\tfor angle in list:\r\n\t\tif angle >= 22.5:\r\n\t\t\tif angle>=33.4:\r\n\t\t\t\tangle = 45-angle\r\n\t\t\telse:\r\n\t\t\t\tangle = angle-22.5\t\t\r\n\t\telif angle < 22.5:\r\n\t\t\tangle=angle\r\n\t\tOUT1.Add(angle)\r\n\t\t\r\n\treturn OUT1\r\n\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\n\r\n\r\n\r\n\r\n# созданные функции\r\n\r\ndef get_parameters_elements(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\ti = round(int(i)/10,0)*10\r\n\t\totv_lenth.Add(i)\r\n\treturn otv_lenth\r\n\r\n\r\n\r\ndef get_parameters_elements5_round(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\tx = round(int(i)/5)*5\r\n\t\totv_lenth.Add(x)\r\n\treturn otv_lenth\r\n\r\n\r\n\r\n\t\r\n\t\r\notvs= IN[0]\r\notv_rot =[]\r\notv_ver = IN[1]\r\notv_loc = []\r\notv_all_poss = IN[2]\r\nOUT = []\r\nnew_loc_list = []\r\npereneseno =[]\r\nlast_loc_list = []\r\n\r\n\r\n\r\nfor i,otv in enumerate(UnwrapElement(otvs)):\r\n\trot = math.degrees(otv.Location.Rotation)\r\n\t#rot = round(rot/10,0)*10\r\n\totv_rot.Add(rot)\r\n\r\nfor i,otv in enumerate(otvs):\r\n\totv_loc.Add(otv.Location)\r\n\r\n#otv_rot=angle(otv_rot)\r\n\r\nlenth = get_parameters_elements(otvs, \"Ширина\")\r\ndepth = get_parameters_elements5_round(otvs, \"Глубина\")\r\nwidth = get_parameters_elements(otvs, \"Высота\")\r\n\r\n\r\n\r\n# нахождение актуального месторасположения\r\nfor i, el in enumerate(otvs):\r\n\tif int(otv_rot[i]) == otv_rot[i]:\r\n\t\trot = int(otv_rot[i])\r\n\telse:\r\n\t\trot = otv_rot[i]\r\n\tstrrr = str(int(round(float(otv_loc[i].X)/10)*10)) + '|' + str(int(round(float(otv_loc[i].Y)/10)*10)) + '|' + str(int(round(float(otv_loc[i].Z)/10)*10)) + '|' + str(int(lenth[i])) + '|' + str(int(width[i]))+ '|' + str(int(depth[i])) + '|' + str(rot)\r\n\tnew_loc_list.Add(strrr.replace('.', ','))\r\n\r\n#  нахождение фактического положения\r\nfor ver in otv_ver:\r\n\tver_split = split_string(ver, '|')\r\n\ttry:\r\n\t\tver_split.pop(9)\r\n\texcept:\r\n\t\tpass\r\n\ttry:\r\n\t\tver_split.pop(8)\r\n\texcept:\r\n\t\tpass\r\n\ttry:\r\n\t\tver_split.pop(0)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\tlast_loc = ''\r\n\tfor i in ver_split:\r\n\t\tlast_loc+= i+ '|'\r\n\tlast_loc = last_loc[:-1]+ ';'\t\r\n\tlast_loc_list.Add(last_loc)\r\n\r\n\r\n\r\nnew_all_possition = []\r\npereneseno = []\r\n\r\n\r\nfor new_position, last_poss, all_poss in zip(new_loc_list,last_loc_list,otv_all_poss):\r\n\tif new_position[:-4] not in all_poss:\r\n\t\tall_poss= new_position+all_poss\r\n\tif last_poss[:-4] not in all_poss:\r\n\t\tall_poss+= last_poss\r\n\r\n\tnew_all_possition.Add(all_poss)\r\n\r\nfor i in new_all_possition:\r\n\tx = i.count(';')\r\n\tif x>1:\r\n\t\tpereneseno.Add('Перенесено')\r\n\telse:\r\n\t\tpereneseno.Add('Не перенесено')\r\n\r\nOUT = [new_all_possition,pereneseno,new_loc_list]\t\t\r\n\t\r\n#OUT = [new_all_possition,pereneseno]\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "a128047b686f494eb912ca312b1d45a8",
      "Inputs": [
        {
          "Id": "17497703b0df45e085d9d6488bf51291",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f28ac87cc2574c26bd1aeb3fec7ca9f0",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b92225dbb469451d8643ac48e1942ac3",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1ab9980e7a134df88a6b1dd2f4a50c45",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nimport math\r\nimport re\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\n\r\n\r\n\r\ndef angle(angles):\r\n\t \r\n\tOUT = []\r\n\tlist=[]\r\n\tOUT1 =[]\r\n\t# Разместите код под этой строкой\r\n\tfor angle in angles:\r\n\t\tif 315<=angle<=360:\r\n\t\t\tangle-=315\r\n\t\telif 270<=angle<315:\r\n\t\t\tangle-=270\r\n\t\telif 225<=angle<=270:\r\n\t\t\tangle-=225\r\n\t\telif 180<=angle<=225:\r\n\t\t\tangle-=180\r\n\t\t\t\r\n\t\telif 135<=angle<=180:\r\n\t\t\tangle-=135\r\n\t\t\t\r\n\t\telif 90<=angle<=135:\r\n\t\t\tangle-=90\r\n\t\t\r\n\t\telif 45<=angle<=90:\r\n\t\t\tangle-=45\r\n\t\t\t\r\n\t\telif 45<=angle<=0:\r\n\t\t\tangle-=0\r\n\t\telse:\r\n\t\t\tangle=angle\r\n\t\tlist.Add(round(angle,2))\r\n\t\t\r\n\tfor angle in list:\r\n\t\tif angle >= 22.5:\r\n\t\t\tif angle>=33.4:\r\n\t\t\t\tangle = 45-angle\r\n\t\t\telse:\r\n\t\t\t\tangle = angle-22.5\t\t\r\n\t\telif angle < 22.5:\r\n\t\t\tangle=angle\r\n\t\tOUT1.Add(angle)\r\n\t\t\r\n\treturn OUT1\r\n\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\n\r\n\r\n\r\n\r\n# созданные функции\r\n\r\ndef get_parameters_elements(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\ti = round(int(i)/1,0)*1\r\n\t\totv_lenth.Add(i)\r\n\treturn otv_lenth\r\n\t\r\n\r\n\r\ndef get_parameters_elements5_round(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\tx = round(int(i)/1)*1\r\n\t\totv_lenth.Add(x)\r\n\treturn otv_lenth\r\n\r\n\r\n\r\n\r\n\t\r\notvs= IN[0]\r\notv_rot =[]\r\notv_ver = IN[1]\r\notv_loc = []\r\notv_all_poss = IN[2]\r\nOUT = []\r\nnew_loc_list = []\r\npereneseno =[]\r\nlast_loc_list = []\r\n\r\n\r\n\r\nfor i,otv in enumerate(UnwrapElement(otvs)):\r\n\trot = math.degrees(otv.Location.Rotation)\r\n\trot = round(rot/1,0)*1\r\n\totv_rot.Add(rot)\r\n\r\nfor i,otv in enumerate(otvs):\r\n\totv_loc.Add(otv.Location)\r\n\r\n#otv_rot=angle(otv_rot)\r\n\r\nlenth = get_parameters_elements(otvs, \"Ширина\")\r\ndepth = get_parameters_elements5_round(otvs, \"Глубина\")\r\nwidth = get_parameters_elements(otvs, \"Высота\")\r\n\r\n\r\n\r\n# нахождение актуального месторасположения\r\nfor i, el in enumerate(otvs):\r\n\tif int(otv_rot[i]) == otv_rot[i]:\r\n\t\trot = int(otv_rot[i])\r\n\telse:\r\n\t\trot = otv_rot[i]\r\n\tstrrr = str(int(round(float(otv_loc[i].X)/1)*1)) + '|' + str(int(round(float(otv_loc[i].Y)/1)*1)) + '|' + str(int(round(float(otv_loc[i].Z)/1)*1)) + '|' + str(int(lenth[i])) + '|' + str(int(width[i]))+ '|' + str(int(depth[i])) + '|' + str(rot)\r\n\tnew_loc_list.Add(strrr.replace('.', ','))\r\n\r\n#  нахождение фактического положения\r\nfor ver in otv_ver:\r\n\tver_split = split_string(ver, '|')\r\n\ttry:\r\n\t\tver_split.pop(9)\r\n\texcept:\r\n\t\tpass\r\n\ttry:\r\n\t\tver_split.pop(8)\r\n\texcept:\r\n\t\tpass\r\n\ttry:\r\n\t\tver_split.pop(0)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\tlast_loc = ''\r\n\tfor i in ver_split:\r\n\t\tlast_loc+= i+ '|'\r\n\tlast_loc = last_loc[:-1]+ ';'\t\r\n\tlast_loc_list.Add(last_loc)\r\n\r\n\r\n\r\nnew_all_possition = []\r\npereneseno = []\r\n\r\n\r\nfor new_position, last_poss, all_poss in zip(new_loc_list,last_loc_list,otv_all_poss):\r\n\tif new_position[:-4] not in all_poss:\r\n\t\tall_poss= new_position+all_poss\r\n\tif last_poss[:-4] not in all_poss:\r\n\t\tall_poss+= last_poss\r\n\r\n\tnew_all_possition.Add(all_poss)\r\n\r\nnew_all_possition_out = []\r\n\r\nfor i,j,k in zip(IN[1],new_all_possition,otv_all_poss):\t\r\n\tif 'V0' in i:\r\n\t\tst = k\r\n\t\tnew_all_possition_out.Add(st)\r\n\telse:\r\n\t\tnew_all_possition_out.Add(j)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfor i in new_all_possition:\r\n\tx = i.count(';')\r\n\tif x>1:\r\n\t\tpereneseno.Add('Перенесено')\r\n\telse:\r\n\t\tpereneseno.Add('Не перенесено')\r\n\r\nOUT = [new_all_possition,pereneseno,new_loc_list,new_all_possition_out]\t\t\r\n\t\r\n#OUT = [new_all_possition,pereneseno]\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "468bd683a0f64e978e01fefe9b39d490",
      "Inputs": [
        {
          "Id": "0f7e72e935994b5eb433e294de0c6dd1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f46fbc824bdc4856aab8ff3a02168025",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fefc87766d30492f80c1c749713d96e1",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "07ebe3e9f8d144ec88df0d1839f61be7",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\nfrom RevitServices.Transactions import TransactionManager\r\nimport math\r\nimport re\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\n\r\notvs= IN[0]\r\notv_rot =[]\r\notv_loc = []\r\n\r\n\r\n\r\ndef angle(angles):\r\n\t \r\n\tOUT = []\r\n\tlist=[]\r\n\tOUT1 =[]\r\n\t# Разместите код под этой строкой\r\n\tfor angle in angles:\r\n\t\tif 315<=angle<=360:\r\n\t\t\tangle-=315\r\n\t\telif 270<=angle<315:\r\n\t\t\tangle-=270\r\n\t\telif 225<=angle<=270:\r\n\t\t\tangle-=225\r\n\t\telif 180<=angle<=225:\r\n\t\t\tangle-=180\r\n\t\t\t\r\n\t\telif 135<=angle<=180:\r\n\t\t\tangle-=135\r\n\t\t\t\r\n\t\telif 90<=angle<=135:\r\n\t\t\tangle-=90\r\n\t\t\r\n\t\telif 45<=angle<=90:\r\n\t\t\tangle-=45\r\n\t\t\t\r\n\t\telif 45<=angle<=0:\r\n\t\t\tangle-=0\r\n\t\telse:\r\n\t\t\tangle=angle\r\n\t\tlist.Add(round(angle,2))\r\n\t\t\r\n\tfor angle in list:\r\n\t\tif angle >= 22.5:\r\n\t\t\tif angle>=33.4:\r\n\t\t\t\tangle = 45-angle\r\n\t\t\telse:\r\n\t\t\t\tangle = angle-22.5\t\t\r\n\t\telif angle < 22.5:\r\n\t\t\tangle=angle\r\n\t\tOUT1.Add(angle)\r\n\t\t\r\n\treturn OUT1\r\n\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\n\r\n\r\n\r\n\r\n# созданные функции\r\n\r\ndef get_parameters_elements(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\tx = round(int(i)/1)*1\r\n\t\totv_lenth.Add(x)\r\n\treturn otv_lenth\r\n\r\n\r\n\r\ndef get_parameters_elements5_round(otvs, strr):\t\r\n\tout_list1=[]\r\n\tout_list=[]\r\n\totv_lenth =[]\r\n\tfor model in otvs:\r\n\t\tout_list.append(model.Name)\r\n\t\t\t\r\n\telUnwrap = UnwrapElement(otvs)\r\n\tsum=0\r\n\tfor i in elUnwrap:\r\n\t\tif out_list[sum] == -1:\r\n\t\t\tout_list1.append(-1)\r\n\t\t\tsum+=1\r\n\t\telse:\r\n\t\t\tsum+=1\r\n\t\t\tDb = i.GetParameters(strr)\r\n\t\t\t\r\n\t\t\tfor i in Db:\r\n\t\t\t\tout_list1.append(i.AsValueString())\r\n\t\t\t\t\r\n\tfor i in out_list1:\r\n\t\tx = round(int(i)/1)*1\r\n\t\totv_lenth.Add(x)\r\n\treturn otv_lenth\r\n\r\n\r\n\r\nfor i,otv in enumerate(UnwrapElement(otvs)):\r\n\trot = math.degrees(otv.Location.Rotation)\r\n\trot = round(rot/1,0)*1\r\n\totv_rot.Add(rot)\r\n\r\nfor i,otv in enumerate(otvs):\r\n\totv_loc.Add(otv.Location)\r\n\r\notv_rot=(otv_rot)\r\n\r\nlenth = get_parameters_elements(otvs, \"Ширина\")\r\ndepth = get_parameters_elements5_round(otvs, \"Глубина\")\r\nwidth = get_parameters_elements(otvs, \"Высота\")\r\n\r\nOUT = []\r\nstr_list = []\r\npereneseno =[]\r\nver_list = []\r\nfor i, el in enumerate(otvs):\r\n\tif int(otv_rot[i]) == otv_rot[i]:\r\n\t\trot = int(otv_rot[i])\r\n\telse:\r\n\t\trot = otv_rot[i]\r\n\tstrrr = str(int(round(float(otv_loc[i].X)/1)*1)) + '|' + str(int(round(float(otv_loc[i].Y)/1)*1)) + '|' + str(int(round(float(otv_loc[i].Z)/1)*1)) + '|' + str(int(lenth[i])) + '|' + str(int(width[i]))+ '|' + str(int(depth[i])) + '|' + str(rot)\r\n\tstr_list.Add(strrr.replace('.', ','))\r\n\r\n\r\nfor i, sd in enumerate(IN[1]):\r\n\tsplit_list = split_string(sd,'|')\r\n\tnew_str=''\r\n\tif len(sd) == 8:\r\n\t\tver = split_list.pop(1)\r\n\t\t#for i in split_list:\r\n\t\t\t#x+=i\r\n\t\t#if x == str_list[i]:\r\n\t\t\t#pereneseno.Add(0)\r\n\t\t#else:\r\n\t\t\t#pereneseno.Add(1)\r\n\t\tnewver = ver+str_list[i]\r\n\t\t\r\n\tif len(sd) == 9:\r\n\t\tver = split_list.pop(0)\r\n\t\t\r\n\t\tx = ''\r\n\t\t#for i in split_list:\r\n\t\t\t#x+=i\r\n\t\t#if x == str_list[i]:\r\n\t\t\t#pereneseno.Add('Не перенесено')\r\n\t\t#else:\r\n\t\t\t#pereneseno.Add('Перенесено')\t\t\t\r\n\t\tnewver = ver+str_list[i]\r\n\t\t\r\n\telse:\r\n\t\ttry:\r\n\t\t\tver = split_list.pop(0)\r\n\t\t\tnewver = ver+'|'+str_list[i]\r\n\t\texcept:\r\n\t\t\r\n\t\t\tnewver = 'V0|'+str_list[i]\r\n\t\t#pereneseno.Add('Не перенесено')\r\n\tver_list.Add(newver)\r\n\t\r\n\tif str_list[i][:-4]\tin sd or sd =='':\r\n\t\tpereneseno.Add('Не перенесено')\r\n\telse:\r\n\t\tpereneseno.Add('Перенесено')\r\nOUT = [ver_list, pereneseno,str_list]\t\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "6f4e4a05d94046edaa8c5d9ac74496bc",
      "Inputs": [
        {
          "Id": "f06af758b2294500b41b654770f86a82",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3832c8c1247f43f3a51f43d42baf89e5",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fe88bc714dc043548c8e2e060825bf55",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "8ab91da05d224583a7d0974cb49751c4",
      "Inputs": [
        {
          "Id": "57b750ab1db0444786aa3416c9e19760",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c243ecddfd9c4d30947a591f4afdde0b",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "364d6f9036154053bc550d42d5497cf9",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3cf476594a1044a6ad224c3ec837b699",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "# Загрузить стандартную библиотеку Python и библиотеку DesignScript\r\nimport sys\r\nimport clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\nimport re\r\n\r\ndef split_string(source,separators):\r\n    return re.split('[{0}]'.format(re.escape(separators)),source)\r\nOUT = []\r\n# Введенные в этом узле данные сохраняется в виде списка в переменных IN.\r\nlist1=[]\r\nlist2=[]\r\nfor i,j in zip(IN[0],IN[2]):\r\n\t\r\n\tif i =='' or j == \"ВРУЧНУЮ\" or 'V' not in i:\r\n\t\tlist1.Add(\"ВРУЧНУЮ\")\r\n\telse:\r\n\t\tlist1.Add(\"СКРИПТ\")\r\n\t\t\r\n\t\r\n\tif 'V' not in i:\r\n\t\tst = 'V0' +i\r\n\t\tlist2.Add(st)\r\n\telse:\r\n\t\tlist2.Add(i)\r\n\r\n\r\nOUT = [list1,list2]\t\r\n\t\r\n\t",
      "VariableInputPorts": true,
      "Id": "f8aa5b4fb841466ea68a2d3915b690a5",
      "Inputs": [
        {
          "Id": "19bd90730ad5488ca0555b67ba7556d4",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6ed9b2aa28d04e4695b519046fe15743",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b6b62bd840b242088a8ce0bf82cff101",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "32b1bea5567445ab921794eeb79c6807",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "5f5d244cd09b40a2924518d81c2408cc",
      "Inputs": [
        {
          "Id": "5819c0cac1684c9f961656ce4292b3e8",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d68f41abf293491b94d2fa9e23d882b7",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9e894d6b55e4468e9c63793db0d1d043",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];\nx[1];",
      "Id": "d67815dd8b414cedb4089ea6da841c85",
      "Inputs": [
        {
          "Id": "9a6ac3bfac114941a310309ecf6373f5",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a09e607174a44acc8e2f7d11ebc534b0",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "df6ee5fb091e4f118d1fe151a88eb920",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "31ac6966676947ffa3983518a23a11ab",
      "Inputs": [
        {
          "Id": "acc862d6b598468299698abc9d260f4e",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b2fd041d878d46b0b367e8ed825fd0f5",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "986504f470f3402186dce41cf8063d98",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6dc995ebda9d4caf82bfaa483fe5be79",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "61e2f16dac0c48169dc0f8dade6dc0f7",
      "Inputs": [
        {
          "Id": "190ff922ba10449b969e3c17623e0516",
          "Name": "name",
          "Description": "Имя FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "fa4674f1acf94d2e9ea4df0dc0698732",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выберите FamilyType, указав его имя. При наличии двух и более FamilyType с одинаковым именем этот метод вернет первый найденный FamilyType.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfFamilyType, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "6fe17454c94340c9bd34ef2d1ef2ff1c",
      "Inputs": [
        {
          "Id": "d770130d8c044ab79bb3c6027fbfae79",
          "Name": "Family Type",
          "Description": "Тип семейства.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d6d2d0f607624f118fd6aaeeaef12d15",
          "Name": "Elements",
          "Description": "Список элементов, соответствующих запросу.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Получение из модели всех элементов определенного типа семейства."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"(Отв_Задание)_Перекрытия_Прямоугольное\";",
      "Id": "842f4d0d043f436b9b31ab97cff519c0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e631571921b847aca8d3e5ff7eb85c85",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfFamilyType, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "5c2d1ccba7b1440ba250b0cc0b7c7a76",
      "Inputs": [
        {
          "Id": "3bd4ad26a0b04f3682edc7253c8caf89",
          "Name": "Family Type",
          "Description": "Тип семейства.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "93db42dc86b44fc8b342a5aa3ad3b046",
          "Name": "Elements",
          "Description": "Список элементов, соответствующих запросу.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Получение из модели всех элементов определенного типа семейства."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "952a86142a21465296b7ba54ab0c59b6",
      "Inputs": [
        {
          "Id": "55cb6aa78db840f693f71924707ab06b",
          "Name": "name",
          "Description": "Имя FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "12215b5ce86a4de8b856e59c2a72a0d7",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выберите FamilyType, указав его имя. При наличии двух и более FamilyType с одинаковым именем этот метод вернет первый найденный FamilyType.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"(Отв_Задание)_Стены_Прямоугольное\";",
      "Id": "ccd85f55448c414eb94b22d122269a2f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6ac6d8364028446e93820f043894ecab",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction, DynamoCore",
      "FunctionSignature": "DSCore.List.Join@var[]..[]",
      "FunctionType": "VariableArgument",
      "NodeType": "FunctionNode",
      "Id": "6486f03e5bd4411588f1537e6a55d1fb",
      "Inputs": [
        {
          "Id": "22e726ba537840ddaa4a23dcca39f491",
          "Name": "list0",
          "Description": "Списки для объединения в один.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "86f29f511b2e452bb4020c60f4974257",
          "Name": "list1",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8e354b5abc304d6b8d3c99bd575aafe4",
          "Name": "list",
          "Description": "Объединенный список.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Объединение всех имеющихся списков в один.\n\nList.Join (lists: var[]..[]): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "612a030f30454520bed2a5a79e83cf3e",
      "Inputs": [
        {
          "Id": "106182b8d1ee4d70a2bd880812378cf7",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3dd51b343ee44f2081d4eb05defb0454",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c42c96df09224995bb08a2eab46525a3",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Версия задания\";",
      "Id": "442e68fa94f34d338785b71adef8c6cf",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "302b61f27f024bcc8f2896bb70294f48",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"SD_Способ создания задания\";",
      "Id": "89f61a78e88d40f6a45d1b0939383bcd",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "15d4e8f5891d46ad90ea85ffe0d8eafa",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[2];\nx[3];",
      "Id": "c3dc640f8a5646e3888e3fc72dd2d6ec",
      "Inputs": [
        {
          "Id": "31c48935707b4178b0c1fa996df956a7",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "7fb7c981a2dd435fbc4a22c209a878a9",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2007cbfb516946e188240bc3c6f3d9e5",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[2];\nx[3];",
      "Id": "d073079e0d68428d873a73fd3f503db6",
      "Inputs": [
        {
          "Id": "bc0fb31970ab435cb093a9ab2a381326",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2f641b0be17a4a44be33a72b16a080af",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "824dfe0c57dc4a1b85e4e7e38ccfe661",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "f041a3ab1c82410d8449bc0ab1fb9cc6",
      "Inputs": [
        {
          "Id": "17c216fd304d413489327fb27df8f1b1",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eea2562ed95346c49d74ab88e9758487",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f613890bf90e4f60a10de5d5647a6968",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\":Примечание\";",
      "Id": "661faf71e6f54c9fbe7990d47b554658",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a01f851559c74678b5acdf8b8d51aad3",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "TZ = IN[2]\r\n\r\nOUT = []\r\nfor i,el in zip(IN[1],IN[0]):\r\n\tif i ==TZ:\r\n\t\tOUT.append(el)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "09344451f06347ffa87ac22c02650835",
      "Inputs": [
        {
          "Id": "2b737e530f054353abdb1511f97309a7",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6d93044310d24af78f1853ee08397755",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5ca7d33a4a32444da53db6f32ac56879",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "09e016440d2c4e0a96bb466f01ad01cc",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x;",
      "Id": "c93b54fbc3e44ede9438c3ba3566134e",
      "Inputs": [
        {
          "Id": "76a3b1dffb63418bb79c35730846dd8f",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "98fe8765f27d4c968c0f4690071a0543",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x;",
      "Id": "a2a48546ee6348d8b191b377ca8a0fed",
      "Inputs": [
        {
          "Id": "1175cefaca074dab8f84a1ac320b0afb",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f77815ff2d5c43e1ad8d2626d079c238",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "TZ = IN[2]\r\n\r\nOUT = []\r\nfor i,el in zip(IN[1],IN[0]):\r\n\tif i ==TZ:\r\n\t\tOUT.append(el)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "c745b52d663949c3a135078cad8eaf17",
      "Inputs": [
        {
          "Id": "4944c3f29bcc489495cdb12b8c4f5b0f",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "927e12a6962d470991f6e1da33633d6e",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f092f3289fba4af596fad2f828baeba3",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0887aaaac4644241a53684becf1c2b3c",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "62693f1cd0f342f8b08e8b4f46af2eb2",
      "Inputs": [
        {
          "Id": "904ca0c441104fdc925cd49811339bf6",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8b6b3a23d9ef4714ae44990f94b75d96",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "31111a1222414e55b7a7a69fab8199b4",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\":Примечание\";",
      "Id": "01d565efca4a46298ddeb0bc83491326",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "673af44d2b254e849e5e05a2bae823ac",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Запускать скрипт с плана, разреза, фасада, 3д вида!!",
      "Id": "1556165fd0054db49a69234639dac772",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b4d4fda06a6a4e1281731ae1deebaa6c",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "9c15196999854fb1af9880289ce606de",
      "Inputs": [
        {
          "Id": "89bedf6ba9544fb98d24c2513abd47a1",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b42fa692b6f6471ca8555e0944c11479",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "31b39f27f4334438946fa7e08a8bdb57",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c45d6d428b4b460d893a44668e2366f5",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\r\nOUT = []\r\nelements = IN[0]\r\nel_hight_by_levels = IN[1]\r\nel_lvls = IN[2]\r\nmodel_lvls = IN[3]\r\nel_higths =IN[4]\r\nmax_lvl_hight = model_lvls[0].Elevation\r\nmin_lvl_hight = model_lvls[-1].Elevation\r\n\r\ndef find_higers(lvl, levels):\r\n\tid = levels.index(lvl)\r\n\ttry:\r\n\t\treturn levels[id+1]\r\n\texcept:\r\n\t\treturn levels[id]\r\n\r\nupper_levels = []\r\nfor el_lvl in el_lvls:\r\n\tupper_levels.append(find_higers(el_lvl, model_lvls))\r\n\r\nlvl_down_otm = []\r\nlvl_up_otm = []\r\nfor down_lvl,up_lvl in zip(el_lvls, upper_levels):\r\n\tlvl_down_otm.append(down_lvl.Elevation)\r\n\tlvl_up_otm.append(up_lvl.Elevation)\r\n\r\nabsolute_otm = []\r\n\r\nfor otm_down, otm_by_lvl,el_hight in zip(lvl_down_otm,el_hight_by_levels,el_higths):\r\n\tabsolute_otm.append(otm_down+otm_by_lvl-el_hight/2)\r\n\r\n\r\n\r\n\r\nlvl_up_otm_correct = []\r\nlvl_down_otm_correct = []\r\nfor lvl_up, lvl_down, otm in zip(lvl_up_otm,lvl_down_otm,absolute_otm):\r\n\tif lvl_down <otm< lvl_up:\r\n\t\tlvl_up_otm_correct.append(lvl_up)\r\n\t\tlvl_down_otm_correct.append(lvl_down)\r\n\t\t\r\n\telif otm>lvl_up and otm>0:\r\n\t\tlvl_up_otm_correct.append(round(otm+2000,1000))\r\n\t\tlvl_down_otm_correct.append(lvl_down)\r\n\t\t\r\n\telif otm<lvl_down and otm<0:\r\n\t\tlvl_up_otm_correct.append(lvl_down)\r\n\t\tlvl_down_otm_correct.append(round(otm-2000,1000))\r\n\t\r\n\t\t\r\n\t\r\n\t\t\r\n\t\t\r\nOUT = [lvl_up_otm_correct,lvl_down_otm_correct,absolute_otm]\r\n\r\n\t\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "622466c828614eafa544aa31829a34a0",
      "Inputs": [
        {
          "Id": "93d7b195f18d4ca3be0b93d09d28b2a7",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "185eca8d84fa402ba846d70c38dd6c99",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cbef253306f5468c91409c033aefa7e6",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4610e98fec524e3c9c9831ab31b8156e",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1c7481c5d66c492abc0ae158ccbccfde",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0712ad1e0c654b8c941a1a758005418b",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"Отметка этажа над заданием\";\nx[0];\n\"Отметка этажа под заданием\";\nx[1];\n\"ADSK_Отверстие_Отметка от нуля\";\nx[2];",
      "Id": "47e37e5d5c1643e888a9710284d8b0fc",
      "Inputs": [
        {
          "Id": "378342aaa4e84180b983964470f9d27f",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "820e41025c8f4b8a9f29cf14447c2ea6",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "97c94248db354e9cbc65b698ac12875f",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7b1e2bf96d4c46eebea80ab1b5b7d476",
          "Name": "",
          "Description": "Значение выражения в строке 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a497fad2a9194c25a2fb72648c153cc3",
          "Name": "",
          "Description": "Значение выражения в строке 4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4d94c391a8c245a09361ea07b65c204c",
          "Name": "",
          "Description": "Значение выражения в строке 5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "44baa87651d34e2a8eb3144f524ba62d",
          "Name": "",
          "Description": "Значение выражения в строке 6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "c0a1b26109974b83a937b37f5d87f84a",
      "Inputs": [
        {
          "Id": "bbd60fcc93344cb193aa15273c65fd2d",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "7a6e4c15f8954f9799650e93286c8c24",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c5b0c5343fc4412685a0cd66148be443",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Уровень",
      "Id": "66f620ad482b44f58862c4409b5e4848",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "288ce0bd72674cf7bb5f1266a95a1710",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "6720c5bab35342c9b3b4c6f5a2861165",
      "Inputs": [
        {
          "Id": "c18e7d5419a14a7e998eb1ac2558badd",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "052ba8c4753e46b3aac54ec52bce01d9",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6ec9c94c754042c5a16d4d65c8959d0c",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Отметка от уровня",
      "Id": "ed9b3cb62fba44ac89576e9341f5c821",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3f5e3fca1d064973ac15f53be14cb59b",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "5b16cf5addfd4637af5a8455807b8aaf",
      "Inputs": [
        {
          "Id": "7d91257b88ab440abccf0b1984e5adca",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "98844aff40144045a440115f0d8452b4",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a1e6d97db6f5438aaa97de294bb0380f",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Высота",
      "Id": "4b315991cc1a436a9ee7f58c3bb68cbf",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "dc59ff3dfe704e26b8406eb13907091e",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "5dd851805f71408e9bff1eeb6940f05f",
      "Inputs": [
        {
          "Id": "2c60e017bef14b54b2753c283bcbadaa",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "70636eb6e86949b29a87aa18795d515d",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "2dec2f6e15ec4a7c90aa30e08a02023f",
      "Inputs": [
        {
          "Id": "98395b1321864a23a8ee8638c89fe6af",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5d245e22d19942e28ddec9ce0763f8e1",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "90cce1ffa29043e7bf292316b7b27db7",
      "Inputs": [
        {
          "Id": "afca03386dfb4d2f97c53561b8ae1d75",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d447c71b3bfc46ec9666cb2bfc5b7dc3",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x;",
      "Id": "2d03d46dd0c14003bab2a97effc99163",
      "Inputs": [
        {
          "Id": "5ab513cd827843109e22968be714129a",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4c37e2697e964bf491d22f8ad0ad6c36",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\r\nOUT = []\r\n\r\n\r\nfor bool, elem in zip(IN[1],IN[0]):\r\n\tif not bool:\r\n\t\tOUT.append(elem)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
      "VariableInputPorts": true,
      "Id": "1e56a0b4f0224be58647b004b64b9693",
      "Inputs": [
        {
          "Id": "431172885cf8497497911b3215c2ca1b",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a9e23f3044a8429fb36ea2d92a312fb5",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6e4c8abdbb51404aa62ce3564d0c46b1",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.GetParameterValueByName@string",
      "Id": "f7681e6e94b2416db7ea92ac15d87c25",
      "Inputs": [
        {
          "Id": "0981a652af724a6a8b9a8eb1a08a6cba",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ee6161b39022486e9b9a60a14ded8924",
          "Name": "parameterName",
          "Description": "Имя параметра, значение которого требуется получить.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "29282f29c50f4f7d9ad76d89b58c13ad",
          "Name": "var[]..[]",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Получение значения одного из параметров элемента.\n\nElement.GetParameterValueByName (parameterName: string): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "сохранить ли отметки этажей",
      "Id": "ad2b4e269a0a435ab4022162f9ca28bf",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "51c21e5639b1459683360ea632a5e115",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x;",
      "Id": "c86b263d05fc4b2796eeff5c9a53b035",
      "Inputs": [
        {
          "Id": "d16755affa384fab9cdec78c1700d3df",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3d77f326f5bd477787837f06a4e00176",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfFamilyType, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "96ef37bdd4304734b28e0fe31ee9363b",
      "Inputs": [
        {
          "Id": "cb2113fc73914d5dbe9c9e07566086d0",
          "Name": "Family Type",
          "Description": "Тип семейства.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8c2ba91556594ec2aab1bcca7f7dcb48",
          "Name": "Elements",
          "Description": "Список элементов, соответствующих запросу.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Получение из модели всех элементов определенного типа семейства."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.FamilyType.ByName@string",
      "Id": "a87fe1bebb9a49f8a1d59fc47dd3fc90",
      "Inputs": [
        {
          "Id": "aa8fb83d7deb41f8b0eb3f8663a7d24a",
          "Name": "name",
          "Description": "Имя FamilyType\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dd567dead89e494c8a434b1f7d068a63",
          "Name": "FamilyType",
          "Description": "FamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Выберите FamilyType, указав его имя. При наличии двух и более FamilyType с одинаковым именем этот метод вернет первый найденный FamilyType.\n\nFamilyType.ByName (name: string): FamilyType"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "\"(Отв_Задание)_Стены_Прямоугольное\";",
      "Id": "b414778ceded429aa044f99a7e080df8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c6bdb61eb3b543cdb9070667965544ab",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "DSRevitNodesUI.ElementsOfCategory, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "Id": "6bb4efb0df7c48d99131af801936f302",
      "Inputs": [
        {
          "Id": "bb30a907808847e0a45733c8eabaeb9f",
          "Name": "Category",
          "Description": "Категория",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0ba9950f5fc641138baf20bb2c72d200",
          "Name": "Elements",
          "Description": "Тип элемента.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Получение из модели всех элементов определенной категории."
    },
    {
      "ConcreteType": "DSRevitNodesUI.Categories, DSRevitNodesUI",
      "SelectedIndex": 605,
      "SelectedString": "OST_Levels",
      "NodeType": "ExtensionNode",
      "Id": "e967f4c9bf774ccfb494b78de7cc315d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "aebf257d12f0489e97e17b8f19ef3625",
          "Name": "Category",
          "Description": "Выбранная категория.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Все предопределенные категории."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "4e22fb14422b436b93a9d73235340f3f",
      "Inputs": [
        {
          "Id": "e5397077258644218b8a05126530d5c1",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "fa8ad06ffdfa43088c9f89fb08626c28",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bc0e77dca85b44ee981403be54333ab8",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f58c27d4fd314a9ca1f519f08f1a103c",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "e5be5178d3bf44c5a893d10042976b4e",
      "Inputs": [
        {
          "Id": "d6a26b633a5d4491bba61316da40af91",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f054a9d3e6df4729bd14a20caf3eebec",
          "Name": "parameterName",
          "Description": "Имя задаваемого параметра.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "debd8dc74bee49809a49671d06a30b06",
          "Name": "value",
          "Description": "Значение.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "09f60bd0dbf243558796112ba775a4c5",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Задание параметров для одного из элементов.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "\r\nlevels = IN[0]\r\n\r\nelevation_list = []\r\nOUT = []\r\n\r\n\r\nfor lvl in levels:\r\n\televation_list.append(lvl.Elevation)\r\n\t\r\nsort_elevation_list = list(elevation_list)\r\nsort_elevation_list.sort()\r\n\r\nout_levels = []\r\nindex_list = []\r\nfor last_elevation, new_elevation,lvl in zip(elevation_list,sort_elevation_list,levels):\r\n\tindex = elevation_list.index(new_elevation)\r\n\tindex_list.append(index)\r\n\r\n\r\nfor i,indx in enumerate(index_list):\r\n\televation_list[i] = levels[indx]\r\n\r\nOUT = elevation_list",
      "VariableInputPorts": true,
      "Id": "b618304b2107432498603019f119f4a8",
      "Inputs": [
        {
          "Id": "35a2f53ff75f4b8b94b33810609dafd3",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "492e0e7f88c54a57bf71472c2f88bce9",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "a2af0dbf64724b3a94807f74d2be4e85",
      "Inputs": [
        {
          "Id": "8931a00e04bc49c2b5faaf0a157fc837",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c46f883cfa55460c8735938bb85be0b4",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "1ee9fde82a174dcbbfc53285cbe8ed65",
      "Inputs": [
        {
          "Id": "f5403276f1444519a49a5930b334e4f8",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "09da0960ef1a49a48f0191aeffa70961",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "d967513b7265498d9caf2b0b566c2963",
      "Inputs": [
        {
          "Id": "bcd303bafe9b462b8ae82727db570b3c",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c95d439b22574e7188855ce40e344331",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "b72b167db48349a6b85b51b51aa42de3",
      "Inputs": [
        {
          "Id": "20be1fa6f32a40f6a30a12e2053936a2",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d91df0549296469091b9fe7007a6fa90",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "d7e964476ee74acbb0e7cf647ce88e72",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "614bbef2bf5e4d9a83fceb100c6e6be3",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выбор между значениями true и false."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "600;\n800;\n300;",
      "Id": "ccb06fa941b74dbcb435eca95511a342",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8337e93175ab4b82924dd34f847eb613",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5020755b81a341108f1d08afab87cc90",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "89490b63b5c44a9597170d12897dd869",
          "Name": "",
          "Description": "Значение выражения в строке 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Отмена",
      "Id": "0257ff1c454940688fc9389f410df008",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "33a010a5b11c49deb4e9edc113ec4f97",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "d4ab8275b94e4d08b7e8dca9042df1c2",
      "Inputs": [
        {
          "Id": "762ce87608134c1990ec106940ede643",
          "Name": "item0",
          "Description": "Индекс элемента #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "41a3a5bccb3147d7b99f675f32faae93",
          "Name": "item1",
          "Description": "Индекс элемента #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "42142085bf98480fba1ec16059e25718",
          "Name": "item2",
          "Description": "Индекс элемента #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6d847b6e2de74d8faf93dcf74878d6e3",
          "Name": "item3",
          "Description": "Индекс элемента #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8bb0eab4d0364c37a74275b9aaed0193",
          "Name": "item4",
          "Description": "Индекс элемента #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "c028006ff86f44778236d1a394c11f6d",
          "Name": "list",
          "Description": "Список",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание нового списка из заданных входных значений"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Запуск",
      "Id": "37f50008639f43c4a10b63e7709d02b8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "874102367ad3498b8542acef84b25b33",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Q:\\5. Скрипты Автоматизация\\430_Отверстия\\logo.png",
      "Id": "e74802cf33d34ef28ca39369ec676f2d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "467ab02897574ef6b2c518cd9608a0b9",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Определение статуса заданий на отверстия",
      "Id": "b5d8c7ce19114c3998b087902acfbba2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "73ee75a7cc184b7eace35a03177b5234",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Минимальная длина учитываемого участка",
      "Id": "1577c12912d447aeae5cd0d1b2d4d00c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "152aab43166d4224b3c2b7ea820143bf",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "5edf2cbac9334296816f3824d43176ca",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cea8ffdbaa4d464f82f209c3fd5dde4c",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выбор между значениями true и false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "50",
      "Id": "2512a1633b5340f782ab73781ce054ca",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "10eb2e5bdd474f57995becdcddc5eac2",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Внешняя связь для заданий АР/КЖ",
      "Id": "acb859ebdc854914aad7cd86dae86269",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c0bb021d86eb4eb4873c80b50c3f997c",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "63043272426f4635924d90311535ba72",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5adfe0789b9a4e96abe63f072ce31c49",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выбор между значениями true и false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "КЖ",
      "Id": "e74c2b22ef554eaf8d9a26946bd23ec2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1b70368d073c422ca10192ccf99c6a72",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Напоминание",
      "Id": "b571aaf9073b4259a4d085355a18d5c5",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d8eff37166db4dfbb4697a8d8769c15c",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": false,
      "Id": "08c6716e4ff44708841fd262c05b9d35",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "80c884d0c138496bb00d4d1ec064fc58",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выбор между значениями true и false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Запускать с разреза, фасада, 3д вида",
      "Id": "0a7fc7a2876a449ca99fb9897ef8a500",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "5b8bc3bc76d34b60a661ac3c14d224a3",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "95fdfabf984340ba97d64b5dd1b61fcb",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2ceb9ecefebe4069ad6d5df6ada65fa6",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выбор между значениями true и false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "30",
      "Id": "914802fdb597467484fc9c5cc02c55ef",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1187bc2ba6d64246b783a09cb1dd92ac",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Минимальный диаметр трубопровода для учета пересечений",
      "Id": "5fafcf63c0554715b2d538549e8b3827",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8c8cb6e12ae241a89c4f566fe1cfda39",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x;\n\"30\";",
      "Id": "5783f1b94aef46ba82e1c8cb3162f785",
      "Inputs": [
        {
          "Id": "ab6e599d9fa94613b5b93d9314cad8e1",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "76f2fdba23ac4cdb9ee62cfe5f155432",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "26b2b6ce44de429abaf6c74152f58477",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Максимальный допуск на смещение\r\nграней отверстия относительно задания",
      "Id": "6ad0115819324571b36c619c8330f198",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "bcf1df27503d46d0bfc80454cad057c9",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "aefd3d0c704b4d449af7fe398e234e8f",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7b70238633ae4b91a88e7e5792dd96db",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выбор между значениями true и false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "20",
      "Id": "b88399e2b64c48e7afc3971d01464e04",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "30684ccfc7fb441c8da233ac2a0e3be0",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "1556f5a7edc94a5fafdf68dcc68e6ab5",
      "Inputs": [
        {
          "Id": "3aa363e6a2d24d348e780c8042e83aa5",
          "Name": "",
          "Description": "Узел для оценки.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2d93fc3b88134df4bf345da9fdb707e8",
          "Name": "",
          "Description": "Просмотр содержимого.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Визуализация входного элемента узла."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[3];",
      "Id": "bb00391fbf694d049e7b681d3f856326",
      "Inputs": [
        {
          "Id": "39623d6458294cdeb35632f6c60333df",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3ae18900572544a8a03186ea9f7e19e5",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];",
      "Id": "53859906d59d4dd59018a03c67bdfdac",
      "Inputs": [
        {
          "Id": "bec77cae20a145588fcfeeca92effa73",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ebb097e16de84bf5b1d85909e211d3b9",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[1];",
      "Id": "8958eea8a9174ac2bcf18ac9956e64f4",
      "Inputs": [
        {
          "Id": "5b7bea5dae9b4392923a9c0431c92200",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a93782aed25442aeb58524fa81f35f28",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[2];",
      "Id": "d0c21748a5d64a79909158a607edd22c",
      "Inputs": [
        {
          "Id": "f79f85aca55d41a685607a537a19cf2f",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4baf7598ccf048b193d4cccc0007b946",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "700;\n800;\n300;",
      "Id": "6fac5e56484140fca18347be5fd01a64",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "254e287ce5ca41239959ffaa91c4a9c0",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "4b195c0bd30442a0a927fd38c770915a",
          "Name": "",
          "Description": "Значение выражения в строке 2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0a32869a2d9740f8bf5fe9329a3d7f5e",
          "Name": "",
          "Description": "Значение выражения в строке 3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.BoolSelector, CoreNodeModels",
      "NodeType": "BooleanInputNode",
      "InputValue": true,
      "Id": "e0659da033fd4e90882e8c3309093ab8",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "c964913b217e4b42a6452cf9186884c1",
          "Name": "",
          "Description": "Boolean",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выбор между значениями true и false."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Отмена",
      "Id": "19308be5b9344708a0f38e3990695aed",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "55dd040d3f364803897f7df89c9e2023",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.CreateList, CoreNodeModels",
      "VariableInputPorts": true,
      "NodeType": "ExtensionNode",
      "Id": "81430e6f3ad044de8d6b391a5023f356",
      "Inputs": [
        {
          "Id": "97b1231eaa39437c8ddd9441a7d2e3d8",
          "Name": "item0",
          "Description": "Индекс элемента #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8537ab1e640640d09f962de9d54e5253",
          "Name": "item1",
          "Description": "Индекс элемента #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "235604bd0deb423d8e24286401d23c3d",
          "Name": "item2",
          "Description": "Индекс элемента #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "075bda9c70e449a088d386fddbf5e821",
          "Name": "item3",
          "Description": "Индекс элемента #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8d45070174d84d6da9bd923e03109161",
          "Name": "item4",
          "Description": "Индекс элемента #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "af7f1458b5484b598535c436f73fd1e3",
          "Name": "item5",
          "Description": "Индекс элемента #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "72c79c75557942be9de56d5cc3b6bd1d",
          "Name": "list",
          "Description": "Список",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание нового списка из заданных входных значений"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Результаты:",
      "Id": "0501ca69557b4f2e9631283b7a347328",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1c4f113ba7154f818b7133825a994a0b",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Завершить",
      "Id": "c40b48c96e104b1486f167a63cb14f45",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "e62559fd2cc942caa6a207b65e6fde14",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "1.1 Число актуальных заданий (было)",
      "Id": "3aed0aba4ad542d399a39fbdaf875085",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "cc3b0e09973d499d8fd978672f38d8dd",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "1.2 Число отработанных заданий (было)",
      "Id": "aaffd024789a40458216a809703858eb",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "313131decc944ac9abfad1f6ab2073ce",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "1.3 Число не актуальных заданий (было)",
      "Id": "d2fa2418a2614efab3f9b85441cf060b",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "67f397eefd7e417c8992c2dfa4f408db",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "2.1 Число актуальных заданий (стало)",
      "Id": "ec81f0a807f44c1bb71fbb21e10b75d2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4ed41c1962184b68aea4d4d0a6d51173",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "2.3 Число не актуальных заданий (стало)",
      "Id": "8e362073cbb74a438948827345fa24af",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "0522b459dbdc434c89715064376376da",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "2.2 Число отработанных заданий (стало)",
      "Id": "b07d17e85c7c41b59059d935cc94d50c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "46e2e8ded1a644789e5b01f79ed7766d",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "17f31ac3cd3048b09b47df7073d13549",
      "Inputs": [
        {
          "Id": "ae4ab9ce9d8b47739174240baa143e10",
          "Name": "obj",
          "Description": "Объект индексации",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4e44533c5e2e41d5a52fd1707a113641",
          "Name": "str",
          "Description": "Результат математических вычислений",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Преобразование объекта в строчное представление."
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "01540912acf247b9a49fa07d4c571295",
      "Inputs": [
        {
          "Id": "a4c1eabc7c8345cd88923c6f67fb0094",
          "Name": "obj",
          "Description": "Объект индексации",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "1182f80400714ab4800e4ac0b7973489",
          "Name": "str",
          "Description": "Результат математических вычислений",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Преобразование объекта в строчное представление."
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "1cbde5db25154a7da47f69e5154b2afa",
      "Inputs": [
        {
          "Id": "62b7646c6df64d97bfea5a4c23f673b8",
          "Name": "obj",
          "Description": "Объект индексации",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "384f9cb3d89240558766a78a8ccad96f",
          "Name": "str",
          "Description": "Результат математических вычислений",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Преобразование объекта в строчное представление."
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "e3ed0b6a2080429db44c647c72ec2bc5",
      "Inputs": [
        {
          "Id": "eef2a7ae14df47bdb7a00987526eda20",
          "Name": "obj",
          "Description": "Объект индексации",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d15f034e9d2d4fbcac59104c35d15aaf",
          "Name": "str",
          "Description": "Результат математических вычислений",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Преобразование объекта в строчное представление."
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "0aeee9ba21034e94811c1a8fa788388e",
      "Inputs": [
        {
          "Id": "be182f24fe6b48ec8eeda0389231b3dc",
          "Name": "obj",
          "Description": "Объект индексации",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "abbbf70041c345e3a9addf0e1ab31e86",
          "Name": "str",
          "Description": "Результат математических вычислений",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Преобразование объекта в строчное представление."
    },
    {
      "ConcreteType": "CoreNodeModels.FromObject, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "fe177b8cf8bf46e99231d470bc8c4a32",
      "Inputs": [
        {
          "Id": "50a5595f6c0a4f178c6bc08dc0cf3d4d",
          "Name": "obj",
          "Description": "Объект индексации",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "55822aeb844f4b198e3149be5a50176b",
          "Name": "str",
          "Description": "Результат математических вычислений",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Преобразование объекта в строчное представление."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Q:\\5. Скрипты Автоматизация\\430_Отверстия\\logo.png",
      "Id": "f1fd4c47c6be46daa422ecf4375e73e9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "3e6c976237944eac8c96294f240866af",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Создание строки."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uitext():\r\n\r\n    def __init__(self,inputname,defaultvalue,_isnum):\r\n        self.inputname = inputname\r\n        self._isnum = _isnum\r\n        if _isnum: self.defaultvalue = defaultvalue.replace(',','.')\r\n        else: self.defaultvalue = defaultvalue\r\n\r\n    def __repr__(self):\r\n        return 'UI.Textbox input'\r\n        \r\nx = uitext(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "VariableInputPorts": true,
      "Id": "96727535e4a74abda7d3e39a8dbc9b86",
      "Inputs": [
        {
          "Id": "dd1a66d2bd624953b528104bdb33c960",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1651e3ac02264949b9d6fb45ad029043",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c894d1819c1a4f949b53081f269f45e9",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "63d9e956a8b0418ca7043e703413d5cd",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uitext():\r\n\r\n    def __init__(self,inputname,defaultvalue,_isnum):\r\n        self.inputname = inputname\r\n        self._isnum = _isnum\r\n        if _isnum: self.defaultvalue = defaultvalue.replace(',','.')\r\n        else: self.defaultvalue = defaultvalue\r\n\r\n    def __repr__(self):\r\n        return 'UI.Textbox input'\r\n        \r\nx = uitext(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "VariableInputPorts": true,
      "Id": "35b83891a35844c781cd0a36953a4c7b",
      "Inputs": [
        {
          "Id": "64729a251d174342b38e4a6efdf78f42",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3b829b72d66e4a2280e7e1c0b3a1c51c",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d9d97afb3f554469816052df3348451d",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "46a08f2ee98a4a919030332cc3bac296",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uitext():\r\n\r\n    def __init__(self,inputname,defaultvalue,_isnum):\r\n        self.inputname = inputname\r\n        self._isnum = _isnum\r\n        if _isnum: self.defaultvalue = defaultvalue.replace(',','.')\r\n        else: self.defaultvalue = defaultvalue\r\n\r\n    def __repr__(self):\r\n        return 'UI.Textbox input'\r\n        \r\nx = uitext(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "VariableInputPorts": true,
      "Id": "afead0da1be74553b367c2fb6de22f4d",
      "Inputs": [
        {
          "Id": "35cb218c8aba4bd694c6678ecaadc4c0",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a7715fecc6eb4483b3bbfd6b52babef4",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ecde43936598467e8d8d98473c81bd86",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "44d654664f564ad4b042e5313fb3a12b",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uitext():\r\n\r\n    def __init__(self,inputname,defaultvalue,_isnum):\r\n        self.inputname = inputname\r\n        self._isnum = _isnum\r\n        if _isnum: self.defaultvalue = defaultvalue.replace(',','.')\r\n        else: self.defaultvalue = defaultvalue\r\n\r\n    def __repr__(self):\r\n        return 'UI.Textbox input'\r\n        \r\nx = uitext(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "VariableInputPorts": true,
      "Id": "ab9aa454bb444d1b8dbf4b833754d5f8",
      "Inputs": [
        {
          "Id": "c01091a079c447d793f1aef213d4902a",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1a56db0ce2904da08462164b2cb97eeb",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "bcbacba1bb8a4c3cbae8349e288a6f7b",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5d2df50e0eb544288161def826211b1c",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uitext():\r\n\r\n    def __init__(self,inputname,defaultvalue,_isnum):\r\n        self.inputname = inputname\r\n        self._isnum = _isnum\r\n        if _isnum: self.defaultvalue = defaultvalue.replace(',','.')\r\n        else: self.defaultvalue = defaultvalue\r\n\r\n    def __repr__(self):\r\n        return 'UI.Textbox input'\r\n        \r\nx = uitext(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "VariableInputPorts": true,
      "Id": "5ba6bb2ab6794a20a3e43ba975d7a3f2",
      "Inputs": [
        {
          "Id": "615513351ef34f558e58a0b15f1a9a58",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f202c3ba2a3342adb3cf5c7599fe1515",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d8951a0565ed4a158f2f9572d25187c6",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ea122749408d42f9b5517fa28ed84c19",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) Data Shapes,  2020\r\n#Data-Shapes www.data-shapes.io , elayoubi.mostafa@data-shapes.io @data_shapes\r\n\t\r\nimport clr\r\nimport sys\r\npyt_path = r'C:\\Program Files (x86)\\IronPython 2.7\\Lib'\r\nsys.path.append(pyt_path)\r\nimport os\r\nimport webbrowser\r\nimport unicodedata\r\nimport io\r\nimport tempfile\r\nimport System\r\n\t\r\ntry:\r\n\tclr.AddReference('System.Windows.Forms')\r\n\tclr.AddReference('System.Drawing')\r\n\tclr.AddReference('System.Windows.Forms.DataVisualization')\r\n\t\r\n\tfrom System.Drawing import Point , Size , Graphics, Bitmap, Image, Font, FontStyle, Icon, Color, Region , Rectangle , ContentAlignment , SystemFonts, FontFamily\r\n\tfrom System.Windows.Forms import Application, DockStyle, Button, Form, Label, TrackBar , ToolTip, ColumnHeader, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition, ListView, ListViewItem , SortOrder, Panel, ImageLayout, GroupBox, RadioButton, BorderStyle, PictureBox, PictureBoxSizeMode, LinkLabel, CheckState, ColumnHeaderStyle , ImageList, VScrollBar, DataGridView, DataGridViewSelectionMode, DataGridViewAutoSizeColumnsMode , DataGridViewClipboardCopyMode , TreeView , TreeNode , TreeNodeCollection , AutoScaleMode , Screen, Padding\r\n\tfrom System.Windows.Forms.DataVisualization.Charting import *#Chart , SeriesChartType\r\n\tfrom System.Collections.Generic import *\r\n\tfrom System.Collections.Generic import List as iList\r\n\tfrom System.Windows.Forms import View as vi\r\n\tclr.AddReference('System')\r\n\tfrom System import IntPtr , Char\r\n\tfrom System import Type as SType, IO\r\n\tfrom System import Array\r\n\tfrom System.ComponentModel import Container\r\n\tclr.AddReference('System.Data')\r\n\tfrom System.Data import DataTable , DataView\r\n\r\n\ttry: #try to import All Revit dependencies\r\n\t\tclr.AddReference('RevitAPIUI')\r\n\t\tfrom  Autodesk.Revit.UI import Selection , TaskDialog \r\n\t\tfrom  Autodesk.Revit.UI.Selection import ISelectionFilter\r\n\t\tclr.AddReference('RevitNodes')\r\n\t\timport Revit\r\n\t\tclr.ImportExtensions(Revit.Elements)\r\n\t\tclr.ImportExtensions(Revit.GeometryConversion)\r\n\t\t\r\n\t\tclr.AddReference('RevitServices')\r\n\t\tfrom RevitServices.Persistence import DocumentManager\r\n\t\tdoc = DocumentManager.Instance.CurrentDBDocument\r\n\t\tuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\t\r\n\t\tclr.AddReference('RevitAPI')\r\n\t\ttry:\r\n\t\t\tfrom Autodesk.Revit.DB import ImageImportOptions\t\r\n\t\texcept:\r\n\t\t\tfrom Autodesk.Revit.DB import ImageTypeOptions , ImageType, ImagePlacementOptions , ImageInstance\r\n\t\tfrom Autodesk.Revit.DB import FilteredElementCollector , Transaction, View , ViewType , ViewFamily, ViewDrafting, ViewFamilyType, Element, ElementId , FamilyInstance , Document , XYZ, BoxPlacement, UnitUtils\r\n\t\t\r\n\t\ttry:\r\n\t\t\tfrom Autodesk.Revit.DB import  UnitType\r\n\t\texcept:\r\n\t\t\tfrom Autodesk.Revit.DB import SpecTypeId\r\n\r\n\t\tdbviews = [v for v in FilteredElementCollector(doc).OfClass(View).ToElements() if (v.ViewType == ViewType.FloorPlan or v.ViewType == ViewType.CeilingPlan or v.ViewType == ViewType.Section or v.ViewType == ViewType.Elevation or v.ViewType == ViewType.ThreeD)]\r\n\t\tviewindex = 0\r\n\t\ttry:\r\n\t\t\tUIunit = Document.GetUnits(doc).GetFormatOptions(UnitType.UT_Length).DisplayUnits\r\n\t\texcept:\r\n\t\t\tUIunit = Document.GetUnits(doc).GetFormatOptions(SpecTypeId.Length).GetUnitTypeId()\r\n\t\t\t\r\n\t\tclass selectionfilter(ISelectionFilter):\r\n\t\t\tdef __init__(self,category):\r\n\t\t\t\tself.category = category\r\n\t\t\tdef AllowElement(self,element):\r\n\t\t\t\tif element.Category.Name in [c.Name for c in self.category]:\r\n\t\t\t\t\treturn True\r\n\t\t\t\telse:\r\n\t\t\t\t\treturn False\r\n\t\t\tdef AllowReference(reference,point):\r\n\t\t\t\treturn False\r\n\r\n\r\n\t\t\t\r\n\texcept: #in case we are in the Sandbox, Formit or Civil 3D environment\r\n\t\tpass\r\n\t\r\n\timportcolorselection = 0\r\n\t\r\n\ttry:\r\n\t\tfrom  Autodesk.Revit.UI import ColorSelectionDialog\r\n\texcept:\r\n\t\timportcolorselection = 1\r\n\t\r\n\r\n\t\r\n\tclr.AddReference('ProtoGeometry')\r\n\tfrom Autodesk.DesignScript.Geometry import Point as dsPoint\r\n\r\n\tfrom System.Reflection import Assembly\r\n\timport xml.etree.ElementTree as et\r\n\t\r\n\r\n\t\r\n\timport re\t\r\n\tdef regexEndNum(input):\r\n\t\ttry:\r\n\t\t\treturn \tre.search('(\\d+)$', input).group(0)\r\n\t\texcept:\r\n\t\t\treturn \"\"\r\n\r\n\tdef iterateThroughNodes(collection,li):\r\n\t\tif hasattr(collection,'Nodes'):\r\n\t\t\tntest = collection.Nodes\r\n\t\t\tif len(ntest) > 0:\r\n\t\t\t\tfor i in ntest:\r\n\t\t\t\t\titerateThroughNodes(i,li)\r\n\t\t\telse:\r\n\t\t\t\tif collection.Checked:\r\n\t\t\t\t\tli.append(collection.Tag)\r\n\t\treturn li\r\n\t\t\r\n\r\n\t\r\n\tclass MultiTextBoxForm(Form):\r\n\t\t\r\n\t    def __init__(self):\r\n\t        self.Text = 'strana-developer'\r\n\t        self.output = []\r\n\t        self.values = []\r\n\t        self.cancelled = False\r\n\t\r\n\t    def setclose(self, sender, event):\r\n\t    \tcbindexread = 0\r\n\t    \tif sender.Name != \"Cancel\":\r\n\t    \t\tfor f in self.output:\r\n\t    \t\t\tif f.GetType() == myTextBox:\r\n\t    \t\t\t\tif f._isNum :\r\n\t    \t\t\t\t\tval = float(f.Text)\r\n\t    \t\t\t\telse:\r\n\t    \t\t\t\t\tval = f.Text\r\n\t    \t\t\t\tself.values.append(val)\r\n\t    \t\t\tif f.GetType() == CheckBox:\r\n\t    \t\t\t\tself.values.append(f.Checked)\r\n\t    \t\t\tif f.GetType() == Button:\r\n\t    \t\t\t\tif isinstance(f.Tag ,list):\r\n\t    \t\t\t\t\ttry:\r\n\t    \t\t\t\t\t\tself.values.append([e for e in f.Tag if e.__class__.__name__ != \"Category\"])\t    \t\t\t\t\t\r\n\t    \t\t\t\t\texcept:\r\n\t    \t\t\t\t\t\tself.values.append(f.Tag)\t    \t\t\t\t\t\r\n\t    \t\t\t\telse:\r\n\t    \t\t\t\t\ttry:\t    \t\t\t\t\r\n\t    \t\t\t\t\t\tif f.Tag.__class__.__name__ != \"Category\":\r\n\t    \t\t\t\t\t\t\tself.values.append(f.Tag)\r\n\t    \t\t\t\t\t\telse:\r\n    \t\t\t\t\t\t\t\tself.values.append([])\r\n\t    \t\t\t\t\texcept:\r\n\t    \t\t\t\t\t\tself.values.append(f.Tag)\t\r\n\t    \t\t\tif f.GetType() == ComboBox:\r\n\t    \t\t\t\ttry:\r\n\t    \t\t\t\t\tkey = f.Text\r\n\t    \t\t\t\t\tself.values.append(f.Tag[key])\r\n\t    \t\t\t\texcept:\r\n\t    \t\t\t\t\tself.values.append(None)\r\n\t    \t\t\tif f.GetType() == mylistview:\r\n\t    \t\t\t\tself.values.append([f.Values[i.Text] for i in f.CheckedItems])\r\n\t    \t\t\tif f.GetType() == mytrackbar:\r\n\t    \t\t\t\tself.values.append(f.startval+f.Value*f.step)\r\n\t    \t\t\tif f.GetType() == mygroupbox:\r\n\t    \t\t\t\ttry:\r\n\t    \t\t\t\t\tkey = [j.Text for j in f.Controls if j.Checked == True][0]\r\n\t    \t\t\t\t\tself.values.append(f.Tag[key])\r\n\t    \t\t\t\texcept:\r\n\t    \t\t\t\t\tself.values.append(None)\r\n\t    \t\t\tif f.GetType() == myDataGridView:\r\n\t    \t\t\t\tf.EndEdit()\r\n\t    \t\t\t\tdsrc = f.DataSource\r\n\t    \t\t\t\tout = []\r\n\t    \t\t\t\tcolcount = f.ColumnCount\r\n\t    \t\t\t\trowcount = f.RowCount - 1\r\n\t    \t\t\t\tif f.Tag:\r\n\t\t    \t\t\t\tl = []\r\n\t    \t\t\t\t\tfor i in range(colcount):\t    \t\t\t\t\t\t\r\n\t    \t\t\t\t\t\tl.append(dsrc.Columns[i].ColumnName)\r\n\t    \t\t\t\t\tout.append(l)\t    \t\t\t\t\t\t\r\n\t\t    \t\t\t\tfor r in range(rowcount):\r\n\t\t    \t\t\t\t\tl = []\r\n\t\t    \t\t\t\t\tfor i in range(colcount):\r\n\t\t    \t\t\t\t\t\tl.append(dsrc.DefaultView[r].Row[i])\r\n\t\t    \t\t\t\t\tout.append(l)\r\n\t    \t\t\t\telse: \r\n\t\t    \t\t\t\tfor r in range(rowcount):\r\n\t\t    \t\t\t\t\tl = []\r\n\t\t    \t\t\t\t\tfor i in range(colcount):\r\n\t\t    \t\t\t\t\t\tl.append(dsrc.DefaultView[r].Row[i])\r\n\t\t    \t\t\t\t\tout.append(l)\r\n\t    \t\t\t\tself.values.append(out)\r\n\t    \t\t\tif f.GetType() == TreeView:\r\n\t    \t\t\t\tls = []\r\n\t    \t\t\t\tnds = f.Nodes[0]\r\n\t    \t\t\t\titerateThroughNodes(nds,ls)\r\n\t    \t\t\t\tself.values.append(ls)\r\n\t    \t\t\tif f.GetType() == GroupBox:\r\n\t    \t\t\t\trb = [c for c in f.Controls if c.GetType() == RadioButton and c.Checked][0]\r\n\t    \t\t\t\tself.values.append(rb.Text)\r\n\t    \t\t\t\tf.Controls.Remove(rb)\r\n\t    \telse:\r\n\t    \t\tself.values = None\r\n\t    \t\tself.cancelled = True\r\n\t    \tself.Close()\r\n\t\r\n\t    def reset(self, sender, event):\r\n\t\t\tpass\r\n\t\r\n\t    def openfile(self, sender, event):\r\n\t\t\tofd = OpenFileDialog()\r\n\t\t\tdr = ofd.ShowDialog()\r\n\t\t\tif dr == DialogResult.OK:\r\n\t\t\t\tsender.Text = ofd.FileName\r\n\t\t\t\tsender.Tag = ofd.FileName\r\n\r\n\t    def exportToExcel(self, sender, event):\r\n\t    \t#importing Excel IronPython libraries\r\n\t    \tclr.AddReferenceByName('Microsoft.Office.Interop.Excel, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c')\r\n\t    \tfrom Microsoft.Office.Interop import Excel\r\n\t    \tex = Excel.ApplicationClass()\r\n\t    \tex.Visible = sender.Tag[1]\r\n\t    \tex.DisplayAlerts = False\r\n\t    \tfbd = FolderBrowserDialog()\r\n\t    \tfbd.SelectedPath = sender.Text\r\n\t    \tparent = sender.Parent\r\n\t    \tfptextbox = parent.GetChildAtPoint(Point(parent.Location.X,sender.Location.Y+5*yRatio))\r\n\t    \tdataGrid = parent.GetChildAtPoint(Point(parent.Location.X,parent.Location.Y+23*xRatio))\r\n\t    \tdataTable = dataGrid.DataSource\r\n\t    \tfptext = fptextbox.Text\r\n\t    \ttitletext = parent.GetChildAtPoint(Point(0,0)).Text\r\n\t    \tdr = fbd.ShowDialog()\r\n\t    \tfrstRwTtle = sender.Tag[0]\r\n\t    \tif frstRwTtle:\r\n\t    \t\t_header = Excel.XlYesNoGuess.xlYes\r\n\t    \telse:\r\n\t    \t\t_header = Excel.XlYesNoGuess.xlNo\r\n\t    \tif dr == DialogResult.OK:\r\n\t    \t\tworkbk = ex.Workbooks.Add()\r\n\t    \t\tworksheet = workbk.Worksheets.Add()\r\n\t    \t\t#Writing title and doc info\r\n\t    \t\tif sender.Tag[2]:\r\n\t\t    \t\ttitleCell = worksheet.Cells[1,1]\r\n\t\t    \t\tworksheet.Cells[2,1].Value2 = sender.Tag[3]\r\n\t\t    \t\ttitleCell.Value2 = titletext\r\n\t\t    \t\ttitleCell.Font.Size = 18\r\n\t\t    \t\ttitleCell.Font.Bold = True\r\n\t\t    \t\tstartR = 3\r\n\t\t    \t\tendR = 3\r\n\t\t    \telse:\r\n\t\t    \t\tstartR = 1\r\n\t\t    \t\tendR = 0\t\r\n\t\t    \tif frstRwTtle:\r\n\t\t    \t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t    \t\t\tworksheet.Cells[startR,j+1] = dataTable.Columns[j].ColumnName\t\t    \t\r\n\t\t    \t\tfor i in range(0,dataTable.Rows.Count):\r\n\t\t    \t\t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t\t    \t\t\tworksheet.Cells[i+startR+1,j+1] = dataTable.DefaultView[i].Row[j].ToString()\r\n\t\t    \t\txlrange = ex.get_Range(worksheet.Cells[startR,1],worksheet.Cells[dataTable.Rows.Count+endR+1,dataTable.Columns.Count])\t\t\t    \t\t\t\r\n\t\t    \telse :\r\n\t\t    \t\tfor i in range(0,dataTable.Rows.Count):\r\n\t\t    \t\t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t\t    \t\t\tworksheet.Cells[i+startR,j+1] = dataTable.DefaultView[i].Row[j].ToString()\t\t    \t\r\n\t\t    \t\txlrange = ex.get_Range(worksheet.Cells[startR,1],worksheet.Cells[dataTable.Rows.Count+endR,dataTable.Columns.Count])\r\n\t\t    \txlrange.Columns.AutoFit()\r\n\t\t    \tworksheet.ListObjects.Add(Excel.XlListObjectSourceType.xlSrcRange, xlrange, SType.Missing, _header, SType.Missing).Name = \"DataShapesTable\"\r\n\t\t    \tworksheet.ListObjects[\"DataShapesTable\"].TableStyle =  \"TableStyleMedium16\"\r\n\t    \t\tworkbk.SaveAs(fbd.SelectedPath + \"\\\\\" + fptext)\r\n\t    \t\tif not sender.Tag[1]:\r\n\t    \t\t\tworkbk.Close()\r\n\t    \t\t\tex.Quit()\r\n\r\n\t    def startCell(self, sender, event ):\r\n\t\t\tsender.startcell[\"X\"] = event.ColumnIndex\r\n\t\t\tsender.startcell[\"Y\"] = event.RowIndex\t\r\n\r\n\t    def endCell(self, sender, event ):\r\n\t    \ttry:\r\n\t\t\t\tsender.endcell[\"X\"] = event.ColumnIndex\r\n\t\t\t\tsender.endcell[\"Y\"] = event.RowIndex \r\n\t\t\t\tstartval = sender.Rows[sender.startcell[\"Y\"]].Cells[sender.startcell[\"X\"]].Value\r\n\t\t\t\tendNum = regexEndNum(startval)\r\n\t\t\t\tif endNum != \"\":\r\n\t\t\t\t\tif sender.endcell[\"Y\"] == sender.startcell[\"Y\"]:\r\n\t\t\t\t\t\tfor e,i in enumerate(range(sender.startcell[\"X\"],sender.endcell[\"X\"] + 1)):\r\n\t\t\t\t\t\t\tsender.Rows[sender.startcell[\"Y\"]].Cells[i].Value = startval[:-len(endNum)] + str(int(endNum) + e)\r\n\t\t\t\t\telif sender.endcell[\"X\"] == sender.startcell[\"X\"]:\r\n\t\t\t\t\t\tfor e,i in enumerate(range(sender.startcell[\"Y\"],sender.endcell[\"Y\"] + 1)):\r\n\t\t\t\t\t\t\tsender.Rows[i].Cells[sender.endcell[\"X\"]].Value = startval[:-len(endNum)] + str(int(endNum) + e)\r\n\t\t\t\telse:\t\t\t\t\r\n\t\t\t\t\tif sender.endcell[\"Y\"] == sender.startcell[\"Y\"]:\r\n\t\t\t\t\t\tfor i in range(sender.startcell[\"X\"],sender.endcell[\"X\"] + 1):\r\n\t\t\t\t\t\t\tsender.Rows[sender.startcell[\"Y\"]].Cells[i].Value = startval\r\n\t\t\t\t\telif sender.endcell[\"X\"] == sender.startcell[\"X\"]:\r\n\t\t\t\t\t\tfor i in range(sender.startcell[\"Y\"],sender.endcell[\"Y\"] + 1):\r\n\t\t\t\t\t\t\tsender.Rows[i].Cells[sender.endcell[\"X\"]].Value = startval\r\n\t    \texcept:\r\n\t    \t\tpass\r\n\t    \t\t    \t\r\n\t    def startRowDrag(self, sender, event ):\r\n\t    \tshmak\r\n\t\t\t\r\n\t    def opendirectory(self, sender, event):\r\n\t\t\tfbd = FolderBrowserDialog()\r\n\t\t\tfbd.SelectedPath = sender.Text\r\n\t\t\tdr = fbd.ShowDialog()\r\n\t\t\tif dr == DialogResult.OK:\r\n\t\t\t\tsender.Text = fbd.SelectedPath\r\n\t\t\t\tsender.Tag = fbd.SelectedPath\r\n\t\r\n\t    def pickobjects(self, sender, event):   \r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.Element,'')\r\n\t\t\t\tselelem = [doc.GetElement(s.ElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t#THIS METHOD IS FOR CIVIL 3D EVIRONMENT\r\n\t    def pickautocadobjects(self, sender, event):   \r\n\t\t\tselelem = []\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tacadDoc = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Autocad.Application\").ActiveDocument\r\n\t\t\t\tacadDoc.Activate()\r\n\t\t\t\tacadUser = acadDoc.GetVariable(\"users5\")\t\r\n\t\t\t\tacadDoc.SendCommand(\"(and(princ\\042\"+ sender.Text + \"\\042)(setq ss(ssget))(setvar\\042users5\\042\\042LinkDWGUIOK\\042)(command\\042_.Select\\042ss\\042\\042)) \")\r\n\t\t\t\tselection_ = acadDoc.ActiveSelectionSet\r\n\t\t\t\tacadDoc.SendCommand(\"(setq ss nil) \")\r\n\t\t\t\tif acadDoc.GetVariable(\"users5\") == \"LinkDWGUIOK\" and selection_ != None:\r\n\t\t\t\t\tfor sel in selection_:\t\t\t\t\r\n\t\t\t\t\t\tselelem.append(sel)\t\t\r\n\t\t\t\t\tacadDoc.SetVariable(\"users5\", acadUser)\r\n\t\t\t\tsender.Tag = list(selelem)\t\t\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\r\n\r\n\t    def pickautocadobject(self, sender, event):   \r\n\t\t\tselelem = None\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tacadDoc = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Autocad.Application\").ActiveDocument\r\n\t\t\t\tacadUser = acadDoc.GetVariable(\"users5\")\r\n\t\t\t\tacadPickBox = acadDoc.GetVariable(\"pickbox\")\r\n\t\t\t\tacadDoc.SetVariable(\"pickbox\", 5)\r\n\t\t\t\tacadDoc.Activate()\r\n\t\t\t\tacadDoc.SendCommand(\"(setq obj(car(entsel\\042\" + sender.Text + \"\\042))) \")\r\n\t\t\t\tacadDoc.SendCommand(\"(and obj(setvar\\042users5\\042(cdr(assoc 5(entget obj))))(setq obj nil)) \")\t\t\r\n\t\t\t\tselection_ = acadDoc.GetVariable(\"users5\")\r\n\t\t\t\tacadDoc.SetVariable(\"pickbox\", acadPickBox)\r\n\t\t\t\tacadDoc.SetVariable(\"users5\", acadUser)\r\n\t\t\t\tselelem = acadDoc.HandleToObject(selection_)\r\n\t\t\t\tsender.Tag = selelem\t\t\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\r\n\r\n\t    def pickobjectsordered(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\toutput = []\r\n\t\t\ttest = True\r\n\t\t\tTaskDialog.Show(\"Data|Shapes\", 'Pick elements in order, then hit ESC to exit.')\r\n\t\t\twhile test:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tsel = doc.GetElement(uidoc.Selection.PickObject(Selection.ObjectType.Element, 'Pick elements in order').ElementId)\r\n\t\t\t\t\toutput.append(sel.ToDSType(True))\r\n\t\t\t\texcept : \r\n\t\t\t\t\ttest = False\r\n\t\t\t\tsender.Tag = output\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t    \r\n\t    def pickobjectsofcatordered(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\toutput = []\r\n\t\t\ttest = True\r\n\t\t\tif isinstance(sender.Tag,list):\t\t\t\r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\tTaskDialog.Show(\"Data|Shapes\", 'Select %s in order, then press ESC to exit.' %(', '.join([c.Name for c in category])))\r\n\t\t\twhile test:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\t\tsel = doc.GetElement(uidoc.Selection.PickObject(Selection.ObjectType.Element,selfilt, 'Select %s' %(', '.join([c.Name for c in category]))).ElementId)\t\t\t\t\r\n\t\t\t\t\toutput.append(sel.ToDSType(True))\r\n\t\t\t\texcept : \r\n\t\t\t\t\ttest = False\r\n\t\t\t\tsender.Tag = (output)\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t    def picklinkedobjects(self, sender, event):\r\n\t\t\t#This part was made easier by Dimitar Venkov's work\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tlinkref = uidoc.Selection.PickObject(Selection.ObjectType.Element,'Select the link instance.')\r\n\t\t\t\tlink = doc.GetElement(linkref.ElementId).GetLinkDocument()\r\n\t\t\t\ttd = TaskDialog.Show('Data-Shapes','Select the linked elements and press Finish.')\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.LinkedElement,'Select the linked elements and press Finish.')\r\n\t\t\t\tselelem = [link.GetElement(s.LinkedElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\t\r\n\r\n\t    def pickobject(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.Element,'')\r\n\t\t\t\tselelem = doc.GetElement(sel.ElementId) \r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t    def picklinkedobject(self, sender, event):\r\n\t\t\t#This part was made easier by Dimitar Venkov's work\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tlinkref = uidoc.Selection.PickObject(Selection.ObjectType.Element,'Select the link instance.')\r\n\t\t\t\tlink = doc.GetElement(linkref.ElementId).GetLinkDocument()\r\n\t\t\t\ttd = TaskDialog.Show('Data-Shapes','Select the linked element.')\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.LinkedElement,'Select the linked element.')\r\n\t\t\t\tselelem = link.GetElement(sel.LinkedElementId)\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\t\t\t\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t    def pickobjectsofcat(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tif isinstance(sender.Tag,list):\t    \r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\ttry:\r\n\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.Element,selfilt,'Select %s' %(', '.join([c.Name for c in category])))\r\n\t\t\t\tselelem = [doc.GetElement(s.ElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\r\n\t    def pickobjectofcat(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tif isinstance(sender.Tag,list):\t    \r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\ttry:\r\n\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.Element,selfilt,'Select %s' %(', '.join([c.Name for c in category])))\r\n\t\t\t\tselelem = doc.GetElement(sel.ElementId) \r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t    def pickfaces(self, sender, event):\r\n\t\t\tfaces = []\t    \t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tselface = uidoc.Selection.PickObjects(Selection.ObjectType.Face,'')\r\n\t\t\t\tfor s in selface:\r\n\t\t\t\t\tf = uidoc.Document.GetElement(s).GetGeometryObjectFromReference(s).ToProtoType(True)\r\n\t\t\t\t\t[i.Tags.AddTag(\"RevitFaceReference\", s) for i in f]\r\n\t\t\t\t\tfaces.append(f)\r\n\t\t\t\tsender.Tag = [i for j in faces for i in j]\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\t\r\n\t    def pickpointsonface(self, sender, event):\r\n\t\t\tfaces = []\t    \t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tselpoints = uidoc.Selection.PickObjects(Selection.ObjectType.PointOnElement,'')\r\n\t\t\tpoints = []\r\n\t\t\tfor s in selpoints:\r\n\t\t\t\tpt = s.GlobalPoint\r\n\t\t\t\tpoints.append(dsPoint.ByCoordinates(UnitUtils.ConvertFromInternalUnits(pt.X,UIunit),UnitUtils.ConvertFromInternalUnits(pt.Y,UIunit),UnitUtils.ConvertFromInternalUnits(pt.Z,UIunit)))\r\n\t\t\tsender.Tag = points\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\t\r\n\t    def pickedges(self, sender, event):\r\n\t\t\tedges = []\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\t\r\n\t\t\ttry:\t\t\t\t\r\n\t\t\t\tseledge = uidoc.Selection.PickObjects(Selection.ObjectType.Edge,'')\r\n\t\t\t\tfor s in seledge:\r\n\t\t\t\t\te = uidoc.Document.GetElement(s).GetGeometryObjectFromReference(s).AsCurve().ToProtoType(True)\r\n\t\t\t\t\te.Tags.AddTag(\"RevitFaceReference\", s)\r\n\t\t\t\t\tedges.append(e)\r\n\t\t\t\tsender.Tag = edges\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\r\n\t    def colorpicker(self, sender, event):\r\n\t\t\tdialog = ColorSelectionDialog()\r\n\t\t\tselection = ColorSelectionDialog.Show(dialog)\r\n\t\t\tselected = dialog.SelectedColor\r\n\t\t\tsender.Tag = selected\r\n\t\t\tsender.BackColor = Color.FromArgb(selected.Red,selected.Green,selected.Blue)\r\n\t\t\tsender.ForeColor = Color.FromArgb(selected.Red,selected.Green,selected.Blue)\r\n\t\r\n\t    def topmost(self):\r\n\t\t\tself.TopMost = True\r\n\t\r\n\t    def lvadd(self, sender, event):\r\n\t\t\tsender.Tag = [i for i in sender.CheckedItems]\r\n\t\t\t\r\n\t    def scroll(self, sender, event):\r\n\t\t\tparent = sender.Parent\r\n\t\t\tchild = parent.GetChildAtPoint(Point(0,5*yRatio))\r\n\t\t\tchild.Text = str(sender.startval+sender.Value*sender.step)\r\n\r\n\t    def openurl(self, sender, event):\r\n\t\t\twebbrowser.open(sender.Tag)\r\n\t\r\n\t    def selectall(self, sender, event):\r\n\t\t\tif sender.Checked:\r\n\t\t\t\tparent = sender.Parent\r\n\t\t\t\tlistview = parent.GetChildAtPoint(Point(0,0))\r\n\t\t\t\tfor i in listview.Items:\r\n\t\t\t\t\ti.Checked = True\r\n\t\t\telse:\r\n\t\t\t\tpass\r\n\t\t\t\t\r\n\t    def selectnone(self, sender, event):\r\n\t\t\tif sender.Checked:\r\n\t\t\t\tparent = sender.Parent\r\n\t\t\t\tlistview = parent.GetChildAtPoint(Point(0,0))\r\n\t\t\t\tfor i in listview.Items:\r\n\t\t\t\t\ti.Checked = False\r\n\t\t\telse:\r\n\t\t\t\tpass\t\t\r\n\r\n\t    def updateallnone(self, sender, event):\r\n\t    \ttry:\r\n\t    \t\tparent = sender.Parent\r\n\t    \t\trball = parent.GetChildAtPoint(Point(0,sender.Height + 5*yRatio))\r\n\t    \t\trbnone = parent.GetChildAtPoint(Point(80 * xRatio,sender.Height + 5*yRatio))\r\n\t    \t\tif sender.CheckedItems.Count == 0 and event.NewValue == CheckState.Unchecked:\r\n\t    \t\t\trbnone.Checked = False\r\n\t    \t\t\trball.Checked = False\r\n\t    \t\telif sender.CheckedItems.Count == sender.Items.Count and event.NewValue == CheckState.Unchecked:\r\n\t    \t\t\trball.Checked = False\r\n\t    \t\t\trbnone.Checked = False\r\n\t    \t\telif sender.CheckedItems.Count == sender.Items.Count-1 and event.NewValue == CheckState.Checked:\r\n\t    \t\t\trball.Checked = True\r\n\t    \t\t\trbnone.Checked = False\r\n\t    \t\telif sender.CheckedItems.Count == 1 and event.NewValue == CheckState.Unchecked:\r\n\t    \t\t\trball.Checked = False\r\n\t    \t\t\trbnone.Checked = True\t    \t\r\n\t    \t\telse :\r\n\t    \t\t\trball.Checked = False\r\n\t    \t\t\trbnone.Checked = False\r\n\t    \texcept:\r\n\t    \t\tpass\r\n\r\n\t    def zoomcenter(self, sender, event ):\r\n\t\t\tif event.X > 15:\t    \r\n\t\t\t\ttry:\r\n\t\t\t\t\telement = doc.GetElement(uidoc.Selection.GetElementIds()[0])\r\n\t\t\t\t\tuidoc.ShowElements(element)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\telse:\r\n\t\t\t\tpass\r\n\t\t\t\t\r\n\t\t\t\r\n\t    def setviewforelement(self, sender, event ):    \r\n\t\t\tif event.X > 15*xRatio:\t    \t\t\r\n\t\t\t\ttry:\r\n\t\t\t\t\titem = sender.GetItemAt(event.X,event.Y).Text\r\n\t\t\t\t\telement = UnwrapElement(sender.Values[item])\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tviewsforelement = [v for v in dbviews if (not v.IsTemplate) and (element.Id in [e.Id for e in FilteredElementCollector(doc,v.Id).OfClass(element.__class__).ToElements()])]\r\n\t\t\t\t\texcept:\r\n\t\t\t\t\t\tviewsforelement = [v for v in dbviews if (not v.IsTemplate) and (element.Id in [e.Id for e in FilteredElementCollector(doc,v.Id).OfClass(FamilyInstance).ToElements()])]\r\n\t\t\t\t\tglobal viewindex\r\n\t\t\t\t\tdbView = viewsforelement[viewindex]\r\n\t\t\t\t\tid = [element.Id]\r\n\t\t\t\t\ticollection = iList[ElementId](id)\r\n\t\t\t\t\tuidoc.Selection.SetElementIds(icollection)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\telse:\t    \r\n\t\t\t\tpass\r\n\r\n\r\n\t    def CheckChildren(self, sender, event ):\r\n\t\t\tevNode = event.Node\t    \r\n\t\t\tcheckState = evNode.Checked\t\r\n\t\t\tfor n in event.Node.Nodes:\t   \t\r\n\t\t\t\tn.Checked = checkState\t\t\t\r\n\t\t\t\t\r\n\t    def ActivateOption(self, sender, event ):\r\n\t    \tparent = sender.Parent\r\n\t    \tassociatedControls = [p for p in parent.Controls if p.Name == sender.Text and p.GetType() == Panel][0]\r\n\t    \trestofcontrols = [p for p in parent.Controls if p.Name != sender.Text and p.GetType() == Panel]\r\n\t    \tif sender.Checked:\r\n\t    \t\tassociatedControls.Enabled = True\r\n\t    \t\tfor c in restofcontrols:\r\n\t    \t\t\tc.Enabled = False\r\n\t    \t\tparent.Tag = sender.Text\r\n\t    \t\t\r\n\t    def showtooltip(self, sender, event ):\r\n\t    \tttp = ToolTip()\r\n\t    \tttp.AutoPopDelay = 10000\r\n\t    \tttp.SetToolTip(sender , sender.Tag)\t\r\n\r\n\t    def numsOnly(self, sender, event ):\r\n\t    \tif Char.IsDigit(event.KeyChar)==False and event.KeyChar != \".\" and Char.IsControl(event.KeyChar)==False:\r\n\t    \t\tevent.Handled = True\r\n\t    \r\n\t    def chart_showLabels(self, sender, event):\r\n\t\t\tcb = sender\r\n\t\t\tpanelcht = sender.Parent\r\n\t\t\tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t\t\tfor s in chart1.Series:\r\n\t\t\t\tif s.ChartType == SeriesChartType.Pie:\r\n\t\t\t\t\tif cb.Checked:\r\n\t\t\t\t\t\ts[\"PieLabelStyle\"] = \"Inside\"\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\ts[\"PieLabelStyle\"] = \"Disabled\"\r\n\t\t\t\telse:\r\n\t\t\t\t\tif cb.Checked:\r\n\t\t\t\t\t\ts.IsValueShownAsLabel = True\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\ts.IsValueShownAsLabel = False\r\n\t    \t\t\r\n\t    def imageexport(self, sender, event):\r\n\t    \timport datetime\r\n\t    \tfrom datetime import datetime\r\n\t    \tfrom RevitServices.Transactions import TransactionManager\r\n\t    \t#Modify resolution before the render\r\n\t    \tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t    \toriginalFont = Font(fontFam,8)\r\n\t    \tpanelcht = sender.Parent\r\n\t    \tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t    \toriginalTitleFont = chart1.Titles[0].Font\r\n\t    \toriginalWidth = chart1.Width\r\n\t    \toriginalHeight = chart1.Height\r\n\t    \tchart1.Visible = False\r\n\t    \tchart1.Dock = DockStyle.None\r\n\t    \tchart1.Width = 2100 * 0.8\r\n\t    \tchart1.Height = 1500 * 0.8\r\n\t    \tchart1.ChartAreas[0].AxisX.LabelAutoFitStyle = LabelAutoFitStyles.None\r\n\t    \tchart1.ChartAreas[0].AxisY.LabelAutoFitStyle = LabelAutoFitStyles.None\r\n\t    \tchart1.ChartAreas[0].AxisX.LabelStyle.Font = Font(fontFam, 30)\r\n\t    \tchart1.ChartAreas[0].AxisY.LabelStyle.Font = Font(fontFam, 30)\r\n\t    \tchart1.ChartAreas[0].AxisX.TitleFont = Font(fontFam, 30)\r\n\t    \tchart1.ChartAreas[0].AxisY.TitleFont = Font(fontFam, 30)\r\n\t    \tchart1.TextAntiAliasingQuality = TextAntiAliasingQuality.High\r\n\t    \tchart1.BackColor = Color.White\r\n\t    \tchart1.Titles[0].Font = Font(fontFam, 32, FontStyle.Bold)\r\n\t    \tchart1.ChartAreas[0].BackColor = Color.White\r\n\t    \tfor serie in chart1.Series:\r\n\t    \t\tserie.Font = Font(fontFam, 30)\r\n\t\t    \tfor p in serie.Points:\r\n\t\t    \t\tp.Font = Font(fontFam, 30)\r\n\t\t    \t\tp.MarkerSize = 15\r\n\t    \tfor legend in chart1.Legends:\r\n\t    \t\tlegend.Font = Font(fontFam, 30)\r\n\t    \t\tlegend.BackColor = Color.White\r\n\t    \tchart1.Invalidate()\r\n\t    \tchart1.SaveImage(tempfile.gettempdir() + \"\\\\chartImage.bmp\", ChartImageFormat.Bmp)\r\n\t    \t#Get back to original settings\r\n\t    \tchart1.Width = originalWidth\r\n\t    \tchart1.Height = originalHeight\r\n\t    \tchart1.BackColor = Color.Transparent\r\n\t    \tchart1.ChartAreas[0].BackColor = Color.Transparent\r\n\t    \tchart1.ChartAreas[0].AxisX.LabelStyle.Font = originalFont\r\n\t    \tchart1.ChartAreas[0].AxisY.LabelStyle.Font = originalFont\r\n\t    \tchart1.ChartAreas[0].AxisX.TitleFont = originalFont\r\n\t    \tchart1.ChartAreas[0].AxisY.TitleFont = originalFont\r\n\t    \tchart1.Titles[0].Font = originalTitleFont\r\n\t    \tfor serie in chart1.Series:\r\n\t    \t\tserie.Font = originalFont\r\n\t    \t\tfor p in serie.Points:\r\n\t    \t\t\tp.Font = originalFont\r\n\t\t    \t\tp.MarkerSize = 8\r\n\t    \tfor legend in chart1.Legends:\r\n\t    \t\tlegend.Font = originalFont\r\n\t    \t\tlegend.BackColor = Color.Transparent\r\n\t    \tchart1.Invalidate()\r\n\t    \tchart1.Visible = True\r\n\t    \t#Import the picture in a Drafting View\r\n\t    \t#Import the picture in a Drafting View // The try catch if for handling the fact that ImageImportOptions was deprecated in 2020 and is obsolete in 2021\t    \t\r\n\t    \ttry:\r\n\t    \t\timportOptions = ImageImportOptions()\t\r\n\t    \t\timportOptions.Resolution = 72\r\n\t    \t\timportOptions.Placement = BoxPlacement.TopLeft\t    \t\t\r\n\t    \texcept:\r\n\t    \t\timageTypeOption = ImageTypeOptions()\t\r\n\t    \t\timageTypeOption.Resolution = 72\r\n\r\n\t    \tcollector = FilteredElementCollector(doc).OfClass(ViewFamilyType)\r\n\t    \tviewFamilyTypes = []\r\n\t    \tfor c in collector:\r\n\t    \t\tif c.ViewFamily == ViewFamily.Drafting:\r\n\t    \t\t\tviewFamilyTypes.append(c)\r\n\t    \tviewFamilyType = viewFamilyTypes[0]\r\n\t    \tTransactionManager.Instance.EnsureInTransaction(doc)\r\n\t    \tdraftView = ViewDrafting.Create(doc,viewFamilyType.Id)\r\n\t    \tdraftView.Name = chart1.Titles[0].Text + datetime.now().strftime(\" (%m/%d/%Y, %H.%M.%S)\")\r\n\t    \timagePath = tempfile.gettempdir() + \"\\\\chartImage.bmp\"\r\n\t    \tnewElement = clr.StrongBox[Element]()\r\n\t    \ttry:\r\n\t    \t\tdoc.Import(imagePath,importOptions,draftView,newElement)\t    \t\r\n\t    \texcept:\r\n\t    \t\timageTypeOption.SetPath(imagePath)\r\n\t    \t\timageType = ImageType.Create(doc,imageTypeOption)\r\n\t    \t\tplacementOptions = ImagePlacementOptions(XYZ(0,0,0),BoxPlacement.TopLeft)\r\n\t    \t\tImageInstance.Create(doc,draftView,imageType.Id,placementOptions)\t    \t\t\r\n\t    \tTransactionManager.Instance.TransactionTaskDone()\r\n\t    \t\t    \t\r\n\t    def chart_showLegend(self, sender, event ):\r\n\t    \tcb = sender\r\n\t    \tpanelcht = sender.Parent\r\n\t    \tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t    \tif len(chart1.Legends) <= 1:\r\n\t    \t\tfor legend in chart1.Legends:\r\n\t    \t\t\tif cb.Checked:\r\n\t    \t\t\t\tlegend.Enabled = True\r\n\t    \t\t\telse:\r\n\t    \t\t\t\tlegend.Enabled = False\r\n\t    \telse:\r\n\t    \t\tif cb.Checked:\r\n\t    \t\t\tchart1.Legends[1].Enabled = True\r\n\t    \t\telse:\r\n\t    \t\t\tchart1.Legends[1].Enabled = False\r\n\t\t    \t\t\r\n\r\n\tclass mylistview(ListView):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.Values = []\r\n\r\n\tclass mytrackbar(TrackBar):\r\n\t\r\n\t\tdef __init__(self,startval,step):\r\n\t\t\tself.startval = startval\r\n\t\t\tself.step = step\r\n\r\n\tclass myDataGridView(DataGridView):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.startcell = {}\r\n\t\t\tself.endcell = {}\r\n\t\t\t\r\n\tclass mygroupbox(GroupBox):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.Values = []\r\n\t\t\t\r\n\tclass myTextBox(TextBox):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself._isNum = False\r\n\t\r\n\t\t\t\r\n\t#Form initialization\r\n\t\r\n\tform = MultiTextBoxForm()\r\n\txRatio = Screen.PrimaryScreen.Bounds.Width/1920\r\n\tif xRatio == 0:\r\n\t\txRatio = 1\r\n\tyRatio = Screen.PrimaryScreen.Bounds.Height/1080\r\n\tif yRatio == 0:\r\n\t\tyRatio = 1\r\n\tform.topmost()\t\r\n\tform.ControlBox = True\r\n\txlabel = 25 * xRatio\r\n\txinput = 150 * xRatio\r\n\tformy = 10 * yRatio\r\n\tif IN[8] * xRatio > (350 * xRatio):\tformwidth = IN[8] * xRatio\r\n\telse: formwidth = 350 * xRatio\r\n\tfields = []\r\n\terror = 0\r\n\t\r\n\t#Description \r\n\t\r\n\tif IN[3] != \"\":\r\n\t\tdes = Label()\r\n\t\tdes.Location = Point(xlabel,formy)\r\n\t\tdes.Font = Font(\"Arial\", 15,FontStyle.Bold)\t\t\r\n\t\tdes.AutoSize = True\r\n\t\tdes.MaximumSize = Size(formwidth - (2 * xlabel)*xRatio,0)\r\n\t\tdes.Text = IN[3]\r\n\t\tform.Controls.Add(des)\r\n\t\tformy = des.Bottom + (15*xRatio)\r\n\tformheaderheight = formy\r\n\t\r\n\t#Input form\r\n\t\r\n\t# Create a container panel for all inputs\r\n\tbody = Panel()\r\n\tbody.Location = Point(0,formy)\r\n\tbody.Width = formwidth - 15*xRatio\r\n\t\r\n\t\r\n\t# Process form inputs\r\n\tif isinstance(IN[0],list):\r\n\t\tinputtypes = IN[0]\r\n\telse:\r\n\t\tinputtypes = [IN[0]]\r\n\t# This definition is to handle the sorting of special characters\r\n\tdef remove_accents(input_str):\r\n\t    nfkd_form = unicodedata.normalize('NFKD', input_str)\r\n\t    only_ascii = nfkd_form.encode('ASCII', 'ignore')\r\n\t    return only_ascii\t\r\n\r\n\t#Adding Logo \r\n\t#default logo in case no input\t\r\n\tdef getImageByName(ImName):\r\n\t\tdynamo = Assembly.Load('DynamoCore')\r\n\t\tversion = str(dynamo.GetName().Version)[:3]\t\t\r\n\t\tdynPath = os.getenv('APPDATA')+\"\\\\Dynamo\\Dynamo Revit\\\\\" + version \r\n\t\troot = et.parse(dynPath + \"\\DynamoSettings.xml\").getroot()\r\n\t\tlogopaths = []\r\n\t\tfor child in root:\r\n\t\t\tif child.tag == \"CustomPackageFolders\":\r\n\t\t\t\tfor path in child:\r\n\t\t\t\t\tlogopaths.append(path.text + \"\\packages\\Data-Shapes\\extra\\\\\" + ImName)\r\n\t\t\t\t\tlogopaths.append(path.text + \"\\Data-Shapes\\extra\\\\\" + ImName)\r\n\t\tdeflogopath = \"\"\r\n\t\tfor path in logopaths:\r\n\t\t\tif deflogopath == \"\":\r\n\t\t\t\tif os.path.isfile(path):\r\n\t\t\t\t\tdeflogopath = path\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tima = Image.FromFile(deflogopath)\r\n\t\t\t\t\t\tbmp = Bitmap.FromFile(deflogopath)\r\n\t\t\t\t\t\treturn ima,bmp\r\n\t\t\t\t\texcept: \r\n\t\t\t\t\t\tpass\r\n\t\t\t\t\t\t\r\n\ttry:\r\n\t\tif IN[4] != '':\r\n\t\t\ttry:\r\n\t\t\t\tima = Image.FromFile(IN[4])\r\n\t\t\t\tbmp = Bitmap.FromFile(IN[4])\r\n\t\t\texcept:\r\n\t\t\t\tima = IN[4]\r\n\t\t\t\tbmp = IN[4]\r\n\r\n\t\telse :\r\n\t\t\t_ims = getImageByName(\"a.png\")\r\n\t\t\tima = _ims[0]\r\n\t\t\tbmp = _ims[1]\r\n\t\t\t\r\n\t\tlogo = Panel()\r\n\t\tif IN[6] == None:\r\n\t\t\txlogo = 20 * xRatio\r\n\t\t\tylogo = formy+ 10*yRatio\r\n\t\telse:\r\n\t\t\txlogo = 30 * xRatio\r\n\t\t\tylogo = formy\r\n\t\tsize = 110 * xRatio\r\n\t\tlogo = PictureBox()\r\n\t\tratio = (ima.Height)/(ima.Width)\r\n\t\th = float(ima.Height)\r\n\t\tw = float(ima.Width)\r\n\t\tratio = h/w\r\n\t\tlogo.Size = Size(size,size*ratio)\r\n\t\tscaledimage = Bitmap(size,size*ratio)\r\n\t\tgr = Graphics.FromImage(scaledimage)\r\n\t\tgr.DrawImage(ima,0,0,size,size*ratio)\r\n\t\tlogo.Image = ima\r\n\t\tlogo.SizeMode = PictureBoxSizeMode.Zoom\r\n\t\tform.Controls.Add(logo)\r\n\t\tlogo.Location = Point(xlogo,ylogo)\r\n\t\t\r\n\t\t\r\n\t\t#Setting icon \r\n\t\tthumb = bmp.GetThumbnailImage(64, 64, bmp.GetThumbnailImageAbort,IntPtr.Zero)\r\n\t\tthumb.MakeTransparent();\r\n\t\ticon = Icon.FromHandle(thumb.GetHicon())\r\n\t\tform.Icon = icon\r\n\r\n\texcept :\r\n\t\tlogo = Panel()\r\n\t\tlogo.Width = 110 * xRatio\r\n\t\tlogo.Height = 110 * yRatio\r\n\t\r\n\tdef addinput(formbody,inputs,starty,xinput,rightmargin,labelsize,importcolorselection):\r\n\t\ty = starty\r\n\t\tfor j in inputs:\r\n\t\t\tlabel = Label()\r\n\t\t\tlabel.Location = Point(xlabel,y+4*yRatio)\r\n\t\t\tlabel.AutoSize = True\r\n\t\t\tlabel.MaximumSize = Size(labelsize,0)\r\n\t\t\tif j.__class__.__name__ == 'listview' and j.element_count > 0:\r\n\t\t\t\tlabel.Text = j.inputname + '\\n(' + str(j.element_count) + ' element' + (\"s\" if j.element_count > 1 else \"\") + ')'\r\n\t\t\telse:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tlabel.Text = j.inputname\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\tformbody.Controls.Add(label)\r\n\t\r\n\t\t\tif j.__class__.__name__ == 'dropdown':\r\n\t\t\t\tcb = ComboBox()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tcb.Width = formwidth - rightmargin - xinput\r\n\t\t\t\t\tcb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcb.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\t\tcb.Location = Point(xlabel,y)\r\n\t\t\t\tcb.Sorted = j._sorted\r\n\t\t\t\t[cb.Items.Add(i) for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'defaultvalue' or i == 'highlight' or i == '_sorted' )]\r\n\t\t\t\tcb.Tag = j\r\n\t\t\t\tif j.defaultvalue != None:\r\n\t\t\t\t\tdefindex = [i for i in cb.Items].index([i for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'defaultvalue' or i == 'highlight' or i == '_sorted' )][j.defaultvalue])\r\n\t\t\t\t\tcb.SelectedIndex = defindex\r\n\t\t\t\tformbody.Controls.Add(cb)\r\n\t\t\t\tform.output.append(cb)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\t#CHARTS \r\n\t\t\tif j.__class__.__name__ == 'uipiechart':\t\t\t\t\t\r\n\t\t\t\tlabels = j.xseries\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\txseries = [j.xseries]\r\n\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tlabel = SmartLabelStyle()\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs[\"PieLabelStyle\"] = \"Inside\"\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Pie\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,len(xseries)):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Legend text of the points\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tfor p in s.Points: \r\n\t\t\t\t\t\tp.Font = originalFont\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\t\t\t\t\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tlegend1.IsTextAutoFit = True\r\n\t\t\t\tlegend1.LegendStyle = LegendStyle.Column\r\n\t\t\t\tchart1.Legends.Add(legend1)\r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Font = originalFont\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Font = originalFont\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 30)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uibarchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\thorizont = j.ishorizontal\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values,_horizont):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tif _horizont:\r\n\t\t\t\t\t\tsrs.ChartType = SeriesChartType.Bar\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tsrs.ChartType = SeriesChartType.Column\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i],horizont))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tlegend1.Docking = Docking.Right\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Font = originalFont\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uiradarchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Create a panel for buttons\r\n\t\t\t\tpanelCtrls = Panel()\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\tpanelCtrls.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\tautoheight = 250 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Height = autoheight + 73 * yRatio\r\n\t\t\t\tratio = (panelChart.Height)/(panelChart.Width)\r\n\t\t\t\th = float(panelChart.Height)\r\n\t\t\t\tw = float(panelChart.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\tchart_maxsize = formwidth - xlabel - rightmargin\r\n\t\t\t\tpanelChart.Size = Size(chart_maxsize,chart_maxsize*ratio)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Radar\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Dock = DockStyle.Fill\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelCtrls.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Show/Hide legend\"\r\n\t\t\t\tpanelCtrls.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Show/Hide labels\"\r\n\t\t\t\tpanelCtrls.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uipointchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Point\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Change marker size\r\n\t\t\t\toriginalMarkerSize = 8\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tfor p in s.Points:\r\n\t\t\t\t\t\tp.MarkerSize = originalMarkerSize\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\tchartArea1 = chart1.ChartAreas[0]\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend2 = Legend()\r\n\t\t\t\t#Add legends to charts\r\n\t\t\t\tchart1.Legends.Add(legend1)\r\n\t\t\t\tchart1.Legends.Add(legend2)\r\n\t\t\t\t#Create Custom legend\r\n\t\t\t\tcustomevent = CustomizeLegendEventArgs(legend2.CustomItems)\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tlegend2.CustomItems.Add(LegendItem(s.Name.ToString(),s.Color,\"\"))\t\t\t\t\t\r\n\t\t\t\tdef chart_CustomizeLegend(sender, customevent ):\r\n\t\t\t\t\tchart1 = sender\r\n\t\t\t\t\t#legend1.Enabled = False\r\n\t\t\t\t\tlegend2.Name = \"Legend2\"\r\n\t\t\t\t\tfor s,it in zip(series,legend2.CustomItems):\r\n\t\t\t\t\t\tit.ImageStyle = LegendImageStyle.Marker\r\n\t\t\t\t\t\tit.MarkerStyle = s.MarkerStyle\r\n\t\t\t\t\t\tit.MarkerColor = s.Color\r\n\t\t\t\t\t\tit.BorderColor = Color.Transparent\r\n\t\t\t\t\t\tit.MarkerSize *= 1.3\r\n\t\t\t\tlegend1.Enabled = False\r\n\t\t\t\tlegend2.Font = originalFont\r\n\t\t\t\tlegend2.IsTextAutoFit = True\r\n\t\t\t\tlegend2.BackColor = formbody.BackColor\t\t\t\r\n\t\t\t\tchart1.CustomizeLegend += chart_CustomizeLegend\r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uilinechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Line\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uisplinechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Spline\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uibubblechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\t#panelChart.Padding = Padding(1) To create a black border\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\tautoheight = 250 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Height = autoheight + 73 * yRatio\r\n\t\t\t\tratio = (panelChart.Height)/(panelChart.Width)\r\n\t\t\t\th = float(panelChart.Height)\r\n\t\t\t\tw = float(panelChart.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\tchart_maxsize = formwidth - xlabel - rightmargin\r\n\t\t\t\tpanelChart.Size = Size(chart_maxsize,chart_maxsize*ratio)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Bubble\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Dock = DockStyle.Fill\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Show/Hide legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\r\n\t\t\telif j.__class__.__name__ == 'uitreeview':\r\n\t\t\t\ttv = TreeView()\r\n\t\t\t\ttv.CheckBoxes = True\r\n\t\t\t\ttitles = j._hastitles\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttv.Width = formwidth - rightmargin - xinput\r\n\t\t\t\t\ttv.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttv.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\t\ttv.Location = Point(xlabel,y)\r\n\t\t\t\ttv.Height = j._height\r\n\t\t\t\tdef treeIterationTitle(control, input):\r\n\t\t\t\t\tif isinstance(input,list):\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tcurrentNode = TreeNode(remove_accents(input[0].ToString()))\r\n\t\t\t\t\t\t\tcurrentNode.Tag = \"\"\r\n\t\t\t\t\t\t\tinput.pop(0)\r\n\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\tcurrentNode = TreeNode(control.Text +\".\"+ str(len(control.Nodes)+1))\r\n\t\t\t\t\t\t\tcurrentNode.Tag = \"\"\r\n\t\t\t\t\t\tcontrol.Nodes.Add(currentNode)\r\n\t\t\t\t\t\tfor i in input:\r\n\t\t\t\t\t\t\ttreeIterationTitle(currentNode, i)\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\titem = TreeNode(remove_accents(input.ToString()))\r\n\t\t\t\t\t\titem.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(item)\t\r\n\t\t\t\tdef treeIteration(control, input):\r\n\t\t\t\t\tif isinstance(input,list):\r\n\t\t\t\t\t\tcurrentNode = TreeNode(control.Text +\".\"+ str(len(control.Nodes)+1))\r\n\t\t\t\t\t\tcurrentNode.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(currentNode)\r\n\t\t\t\t\t\tfor i in input:\r\n\t\t\t\t\t\t\ttreeIteration(currentNode, i)\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\titem = TreeNode(remove_accents(input.ToString()))\r\n\t\t\t\t\t\titem.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(item)\r\n\t\t\t\tcurrentNode = TreeNode(\"List1\")\r\n\t\t\t\tcurrentNode.Expand()\t\t\t\t\r\n\t\t\t\tif titles:\r\n\t\t\t\t\ttv.Nodes.Add(currentNode)\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tfor dl in j.datalist:\r\n\t\t\t\t\t\ttreeIterationTitle(currentNode,dl)\t\r\n\t\t\t\telse:\r\n\t\t\t\t\ttv.Nodes.Add(currentNode)\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tfor dl in j.datalist:\r\n\t\t\t\t\t\ttreeIteration(currentNode,dl)\r\n\t\t\t\ttv.AfterCheck += form.CheckChildren\t\t\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(tv)\r\n\t\t\t\tform.output.append(tv)\r\n\t\t\t\ty = tv.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'listview':\r\n\t\t\t\tlvp = Panel()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tlvp.Location = Point(xinput,y)\r\n\t\t\t\t\tlvp.Width = formwidth - rightmargin - xinput\t\t\t\t\r\n\t\t\t\telif j.inputname == \"\" and j.element_count != 0:\r\n\t\t\t\t\tlvp.Location = Point(xlabel,y+35*yRatio)\r\n\t\t\t\t\tlvp.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\telse : \r\n\t\t\t\t\tlvp.Location = Point(xlabel,y)\r\n\t\t\t\t\tlvp.Width = formwidth - rightmargin - xlabel\t\t\t\t\r\n\t\t\t\tlvp.Height = j.height * yRatio + 25 * yRatio\r\n\t\t\t\t#Creating the listview box\r\n\t\t\t\tlv = mylistview()\r\n\t\t\t\tlv.Scrollable = True\r\n\t\t\t\tdummyheader = ColumnHeader()\r\n\t\t\t\tdummyheader.Text = \"\"\r\n\t\t\t\tdummyheader.Name = \"\"\r\n\t\t\t\tdummyheader.Width = -2 * xRatio\r\n\t\t\t\tlv.HeaderStyle = ColumnHeaderStyle.None\r\n\t\t\t\tlv.Columns.Add(dummyheader)\r\n\t\t\t\tlv.Values = j\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tlv.CheckBoxes = True\r\n\t\t\t\tlv.View = vi.Details\r\n\t\t\t\tlvItems =  [i for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'highlight' or i == 'display_mode' or i == 'element_count' or i == 'default_values' or i == 'sorted' or i == 'showId')]\r\n\t\t\t\tif j.sorted :\r\n\t\t\t\t\tlvItems = sorted(lvItems,key = remove_accents)\r\n\t\t\t\telse:\r\n\t\t\t\t\tpass\r\n\t\t\t\t[lv.Items.Add(i) for i in lvItems]\r\n\t\t\t\tlv.Location = Point(0,0)\r\n\t\t\t\tif j.inputname != \"\" and j.element_count != 0:\r\n\t\t\t\t\tlv.Width = formwidth - rightmargin - xinput\r\n\t\t\t\telif j.inputname != \"\" and j.element_count == 0:\r\n\t\t\t\t\tlv.Width = formwidth - rightmargin - xinput\r\n\t\t\t\telse:\r\n\t\t\t\t\tlv.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\tlv.Height = j.height * yRatio\r\n\t\t\t\tlv.Scrollable = True\r\n\t\t\t\tlv.ItemCheck += form.updateallnone\r\n\t\t\t\tfor i in j.default_values:\r\n\t\t\t\t\tdefInd = lvItems.index([x for x in j.keys() if not (x == 'inputname' or x == 'height' or x == 'highlight' or x == 'display_mode' or x == 'element_count' or x == 'default_values' or x == 'sorted' or x == 'showId')][i])\r\n\t\t\t\t\tlv.Items[defInd].Checked = True\r\n\t\t\t\t#Click listview items to hilight and center in appropriate view\r\n\t\t\t\tif j.highlight :\r\n\t\t\t\t\tlv.MouseDown += form.setviewforelement\r\n\t\t\t\t\tlv.MouseUp += form.zoomcenter\r\n\t\t\t\t\titems = list(lv.Items)\r\n\t\t\t\t\tlv.FullRowSelect = True\r\n\t\t\t\t\tdel items[::2]\r\n\t\t\t\t\tfor item in items:\r\n\t\t\t\t\t\titem.BackColor = Color.FromArgb(230,243,255)\r\n\t\t\t\t#Creating select all and select none radiobuttons\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\trball = RadioButton()\r\n\t\t\t\t\trball.Location = Point(0,(j.height+5)*yRatio)\r\n\t\t\t\t\trball.Width = 100 * xRatio\r\n\t\t\t\t\trball.Height = 20 * yRatio\r\n\t\t\t\t\trball.Font = SystemFonts.DefaultFont\r\n\t\t\t\t\trball.Text = \"Select all\"\r\n\t\t\t\t\trball.Click += form.selectall\r\n\t\t\t\t\trbnone = RadioButton()\r\n\t\t\t\t\trbnone.Location = Point(105 * xRatio,(j.height+5)*yRatio)\r\n\t\t\t\t\trbnone.Width = 100 * xRatio\r\n\t\t\t\t\trbnone.Height = 20 * yRatio\r\n\t\t\t\t\trbnone.Font = SystemFonts.DefaultFont\r\n\t\t\t\t\trbnone.Text = \"Select none\"\t\t\t\r\n\t\t\t\t\trbnone.Click += form.selectnone\t\t\t\r\n\t\t\t\t#Adding controls to panel\r\n\t\t\t\tlvp.Controls.Add(lv)\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tlvp.Controls.Add(rball)\r\n\t\t\t\t\tlvp.Controls.Add(rbnone)\r\n\t\t\t\tformbody.Controls.Add(lvp)\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tform.output.append(lv)\r\n\t\t\t\ty = lvp.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uitext':\r\n\t\t\t\ttb = myTextBox()\r\n\t\t\t\ttb.Text = j.defaultvalue\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttb.Width = formwidth  - rightmargin - xinput\r\n\t\t\t\t\ttb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttb.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\t\ttb.Location = Point(xlabel,y)\r\n\t\t\t\tif j._isnum:\r\n\t\t\t\t\ttb._isNum = True\r\n\t\t\t\t\ttb.KeyPress += form.numsOnly\r\n\t\t\t\tformbody.Controls.Add(tb)\r\n\t\t\t\tformbody.Controls.Add(label)\r\n\t\t\t\tform.output.append(tb)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uimultilinetext':\r\n\t\t\t\ttb = myTextBox()\r\n\t\t\t\ttb.Text = j.defaultvalue\r\n\t\t\t\ttb.Multiline  = True\r\n\t\t\t\ttb.Height = j._height * yRatio\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttb.Width = formwidth  - rightmargin - xinput\r\n\t\t\t\t\ttb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttb.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\t\ttb.Location = Point(xlabel,y)\r\n\t\t\t\tif j._isnum:\r\n\t\t\t\t\ttb._isNum = True\r\n\t\t\t\t\ttb.KeyPress += form.numsOnly\r\n\t\t\t\tformbody.Controls.Add(tb)\r\n\t\t\t\tformbody.Controls.Add(label)\r\n\t\t\t\tform.output.append(tb)\r\n\t\t\t\ty = tb.Bottom + 25 * yRatio\t\t\t\t\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'tableview':\r\n\t\t\t\t#Creating grouping panel\r\n\t\t\t\ttvp = Panel()\r\n\t\t\t\ttvp.Location = Point(xlabel,y)\r\n\t\t\t\ttvp.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\tif (50 + len(j.dataList) * 15) * yRatio > 800 * yRatio:\r\n\t\t\t\t\tautoheight = 800 * yRatio\r\n\t\t\t\telse:\r\n\t\t\t\t\tautoheight = (50 + len(j.dataList) * 15\t) * yRatio\t\t\t\r\n\t\t\t\ttvp.Height = autoheight + 73 * yRatio\r\n\t\t\t\t#Creating title\r\n\t\t\t\ttitlep = Label()\r\n\t\t\t\ttitlep.Text = j._tabletitle\r\n\t\t\t\ttitlep.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\ttitlep.BackColor = Color.FromArgb(153,180,209)\r\n\t\t\t\ttitlep.Font = Font(\"Arial\", 11, FontStyle.Bold)\r\n\t\t\t\ttitlep.TextAlign = ContentAlignment.MiddleLeft\r\n\t\t\t\ttitlep.BorderStyle = BorderStyle.FixedSingle\r\n\t\t\t\ttitlep.Location = Point(0,0)\r\n\t\t\t\ttvp.Controls.Add(titlep)\r\n\t\t\t\t#Creating data structure\r\n\t\t\t\tdg = myDataGridView()\r\n\t\t\t\t#dg.SelectionMode = DataGridViewSelectionMode.CellSelect\r\n\t\t\t\tdg.EnableHeadersVisualStyles = False\t\t\t\t\r\n\t\t\t\tdt = DataTable()\r\n\t\t\t\tdl = j.dataList\r\n\t\t\t\tfor i in range(len(dl[0])):\r\n\t\t\t\t\tif j._hasTitle:\r\n\t\t\t\t\t\tdt.Columns.Add(remove_accents(dl[0][i].ToString()))\r\n\t\t\t\t\t\trngstart = 1\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tdt.Columns.Add(\"Column \" + str(i))\r\n\t\t\t\t\t\trngstart = 0\t\t\t\t\t\t\r\n\t\t\t\tfor rindex in range(rngstart,len(dl)):\r\n\t\t\t\t\trow = dt.NewRow()\r\n\t\t\t\t\tfor i in range(len(dl[rindex])):\r\n\t\t\t\t\t\trow[i] = dl[rindex][i]\r\n\t\t\t\t\tdt.Rows.Add(row)\t\t\t\t\t\t\r\n\t\t\t\tdg.Tag = j._hasTitle\t\t\t\t\r\n\t\t\t\tdg.DataSource = dt\r\n\t\t\t\tdg.ClipboardCopyMode = DataGridViewClipboardCopyMode.EnableWithAutoHeaderText\r\n\t\t\t\tdg.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells\r\n\t\t\t\tdg.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\tdg.Location = Point(0,23 * yRatio)\r\n\t\t\t\tdg.Height = autoheight\r\n\t\t\t\t#Creatin Excel like drag copy functionalities\r\n\t\t\t\tdg.CellMouseDown += form.startCell\r\n\t\t\t\tdg.CellMouseUp += form.endCell\r\n\t\t\t\t#dg.MouseDown += form.startRowDrag\r\n\t\t\t\t#dg.MouseUp = \t\t\t\r\n\t\t\t\ttvp.Controls.Add(dg)\t\t\t\r\n\t\t\t\ty = tvp.Bottom + 15 * yRatio\r\n\t\t\t\t#Adding export to excel button\r\n\t\t\t\tex = Button()\r\n\t\t\t\tex.Tag = [j._hasTitle , j._openExcel , j._showinfo , j._fileInfo]\r\n\t\t\t\ttry:\r\n\t\t\t\t\texpImage = getImageByName(\"exp.png\")[0]\r\n\t\t\t\t\tex.BackgroundImage = expImage\r\n\t\t\t\texcept:\r\n\t\t\t\t\tex.Text = \"Export\"\t\t\t\t\t\r\n\t\t\t\tex.Width = 60 * xRatio\r\n\t\t\t\tex.Height = 30 * yRatio\r\n\t\t\t\tex.Location = Point(formwidth - 125 * xRatio ,dg.Bottom + 15 * yRatio)\t\t\t\t\t\r\n\t\t\t\ttvp.Controls.Add(ex)\r\n\t\t\t\tex.Click += form.exportToExcel\r\n\t\t\t\t#Adding filepath export textbox\r\n\t\t\t\tfilepathtb = TextBox()\r\n\t\t\t\tfilepathtb.Text = \"ExportFileName\"\r\n\t\t\t\tfilepathtb.Location = Point(0 ,dg.Bottom + 20 * yRatio)\r\n\t\t\t\tfilepathtb.Width = formwidth - xlabel - 125 * xRatio\r\n\t\t\t\ttvp.Controls.Add(filepathtb)\r\n\t\t\t\t#Adding copy to clipboard button\r\n\t\t\t\tcb = Button()\r\n\t\t\t\t#Adding panel to form\r\n\t\t\t\tformbody.Controls.Add(tvp)\r\n\t\t\t\tform.output.append(dg)\r\n\t\t\t\ty = tvp.Bottom + 25 * yRatio\r\n\t\t\t\tform.topmost()\r\n\t\t\telif j.__class__.__name__ == 'uitextnote':\r\n\t\t\t\tgb = GroupBox()\r\n\t\t\t\tgb.Text = j.title\r\n\t\t\t\tgb.Parent = form\r\n\t\t\t\tgb.SendToBack()\r\n\t\t\t\tgb.BackColor = Color.Transparent\r\n\t\t\t\tgb.Location = Point(xlabel, y)\r\n\t\t\t\ttn = Label()\r\n\t\t\t\ttn.Location = Point(xlabel,18 * yRatio)\r\n\t\t\t\ttn.AutoSize = True\r\n\t\t\t\ttn.MaximumSize = Size(formwidth - rightmargin - 50 * xRatio,0)\r\n\t\t\t\ttn.Text = j.textnote\r\n\t\t\t\ttn.BringToFront()\r\n\t\t\t\tgb.Controls.Add(tn)\r\n\t\t\t\tgb.Size = Size(formwidth  - rightmargin - 25 * xRatio, tn.Bottom-tn.Top+25 * yRatio)  \r\n\t\t\t\ty = gb.Bottom + 25 * xRatio\r\n\t\t\t\tformbody.Controls.Add(gb)\r\n\t\t\telif j.__class__.__name__ == 'uibool':\r\n\t\t\t\tyn = CheckBox()\r\n\t\t\t\tyn.Width = formwidth - xinput - rightmargin + 10 * xRatio\r\n\t\t\t\tyn.Location = Point(xinput,y)\r\n\t\t\t\tyn.Text = j.booltext\r\n\t\t\t\tg = yn.CreateGraphics()\r\n\t\t\t\tsizetext = g.MeasureString(yn.Text,yn.Font, formwidth - xinput - rightmargin -20 * xRatio)\r\n\t\t\t\theighttext = sizetext.Height\r\n\t\t\t\tyn.Height = heighttext + 15 * yRatio\r\n\t\t\t\tyn.Checked = j.defaultvalue\r\n\t\t\t\tformbody.Controls.Add(yn)\r\n\t\t\t\tform.output.append(yn)\r\n\t\t\t\ty = yn.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiradio':\r\n\t\t\t\tyrb = 20 * yRatio\r\n\t\t\t\trbs = []\r\n\t\t\t\trbgroup = mygroupbox()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\trbgroup.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\trbgroup.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\trbgroup.Width = formwidth - xlabel - rightmargin\r\n\t\t\t\t\trbgroup.Location = Point(xlabel,y)\t\t\t\t\t\r\n\t\t\t\trbgroup.Tag = j\r\n\t\t\t\trbcounter = 0\r\n\t\t\t\tfor key in j.keys():\r\n\t\t\t\t\tif key != 'inputname' and key != 'defaultvalue':\r\n\t\t\t\t\t\trb = RadioButton()\r\n\t\t\t\t\t\trb.Text = key \r\n\t\t\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\t\t\trb.Width = formwidth - xinput - rightmargin - 35 * xRatio\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\trb.Width = formwidth - xlabel - rightmargin - 35 * xRatio\r\n\t\t\t\t\t\trb.Location = Point(20 * xRatio,yrb)\r\n\t\t\t\t\t\tif rbcounter == j.defaultvalue:\r\n\t\t\t\t\t\t\trb.Checked = True\r\n\t\t\t\t\t\trbgroup.Controls.Add(rb)\r\n\t\t\t\t\t\tg = rb.CreateGraphics()\r\n\t\t\t\t\t\tsizetext = g.MeasureString(key,rb.Font, formwidth - xinput - 90*xRatio)\r\n\t\t\t\t\t\theighttext = sizetext.Height\r\n\t\t\t\t\t\trb.Height = heighttext + 15 * yRatio\r\n\t\t\t\t\t\tybot = rb.Bottom\r\n\t\t\t\t\t\tyrb += heighttext + 12 * yRatio\r\n\t\t\t\t\t\trbcounter += 1\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tpass\r\n\t\t\t\trbgroup.Height = ybot + 20 * yRatio\r\n\t\t\t\t[rbgroup.Controls.Add(rb) for rb in rbs]\r\n\t\t\t\tformbody.Controls.Add(rbgroup)\r\n\t\t\t\tform.output.append(rbgroup)\r\n\t\t\t\ty = rbgroup.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__  == 'uifilepath':\r\n\t\t\t\tfp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tfp.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tfp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tfp.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tfp.Location = Point(xlabel,y)\t\t\t\t\t\r\n\t\t\t\tfp.Tag = j.defaultvalue\r\n\t\t\t\tif not j.defaultvalue == \"FilePath\":\r\n\t\t\t\t\tfp.Tag = j.defaultvalue\r\n\t\t\t\t\tfp.MouseHover += form.showtooltip\t\r\n\t\t\t\tfp.Text = j.buttontext\r\n\t\t\t\tfp.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(fp)\r\n\t\t\t\tfp.Click += form.openfile\r\n\t\t\t\tform.output.append(fp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uidirectorypath':\r\n\t\t\t\tdp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tdp.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tdp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tdp.Location = Point(xlabel,y)\t\t\t\t\r\n\t\t\t\tdp.Tag = j.defaultvalue\r\n\t\t\t\tdp.Text = j.buttontext\r\n\t\t\t\tif not j.defaultvalue == \"DirectoryPath\":\r\n\t\t\t\t\tdp.Tag = j.defaultvalue\r\n\t\t\t\t\tdp.MouseHover += form.showtooltip\r\n\t\t\t\tdp.Text = j.buttontext\t\r\n\t\t\t\tdp.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(dp)\r\n\t\t\t\tdp.Click += form.opendirectory\r\n\t\t\t\tform.output.append(dp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.pickobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click  += form.pickobject\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectautocadelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.pickautocadobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click += form.pickautocadobject\t\t\t\t\t\t\t\t\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uiselectOrderedelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tse.Click  += form.pickobjectsordered\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectlinkedelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.picklinkedobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click  += form.picklinkedobject\r\n\t\t\t\tform.output.append(se)\r\n\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectlinkedelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tsec.Click += form.picklinkedobjectsofcat\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Click += form.picklinkedobjectofcat\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tsec.Click += form.pickobjectsofcat\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Click += form.pickobjectofcat\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectOrderedelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tsec.Click += form.pickobjectsofcatordered\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectfaces':\r\n\t\t\t\tsf = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsf.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsf.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsf.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsf.Location = Point(xlabel,y)\r\n\t\t\t\tsf.Text = j.buttontext\r\n\t\t\t\tsf.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sf)\r\n\t\t\t\tsf.Click += form.pickfaces\r\n\t\t\t\tform.output.append(sf)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectpointsonface':\r\n\t\t\t\tspf = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tspf.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tspf.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tspf.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tspf.Location = Point(xlabel,y)\r\n\t\t\t\tspf.Text = j.buttontext\r\n\t\t\t\tspf.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(spf)\r\n\t\t\t\tspf.Click += form.pickpointsonface\r\n\t\t\t\tform.output.append(spf)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectedges':\r\n\t\t\t\tsed = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsed.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsed.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsed.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsed.Location = Point(xlabel,y)\r\n\t\t\t\tsed.Text = j.buttontext\r\n\t\t\t\tsed.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sed)\r\n\t\t\t\tsed.Click += form.pickedges\r\n\t\t\t\tform.output.append(sed)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uislider':\r\n\t\t\t\tgb = Panel()\r\n\t\t\t\tif j.defaultvalue == '':\r\n\t\t\t\t\tdefval = j.minimum\r\n\t\t\t\telse:\r\n\t\t\t\t\tdefval = j.defaultvalue\r\n\t\t\t\tsl = mytrackbar(j.minimum,j.step)\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tgb.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tgb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tgb.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tgb.Location = Point(xlabel,y)\r\n\t\t\t\tgb.Height = 40 * yRatio\r\n\t\t\t\tsl.Minimum = 0\r\n\t\t\t\tsl.Maximum = (j.maximum-j.minimum)/j.step\r\n\t\t\t\tsl.Value = (defval - j.minimum) / j.step\r\n\t\t\t\tsl.TickFrequency = (j.maximum-j.minimum)/j.step/10\r\n\t\t\t\tsl.Location = Point(40 * xRatio,0)\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsl.Width = formwidth - xinput - rightmargin - 35 * xRatio\r\n\t\t\t\telse:\r\n\t\t\t\t\tsl.Width = formwidth - xlabel -rightmargin - 35 * xRatio\r\n\t\t\t\tgb.Controls.Add(sl)\r\n\t\t\t\tform.output.append(sl)\r\n\t\t\t\tdisplabel = Label()\r\n\t\t\t\tdisplabel.Width = 50 * xRatio\r\n\t\t\t\tdisplabel.Location = Point(0,5 * yRatio)\r\n\t\t\t\tdisplabel.Text = str(defval)\r\n\t\t\t\tdisplabel.Height = 30 * yRatio\r\n\t\t\t\tdisplabel.BringToFront()\r\n\t\t\t\tgb.Controls.Add(displabel)\t\r\n\t\t\t\tformbody.Controls.Add(gb)\t\t\t\r\n\t\t\t\tsl.Scroll += form.scroll\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiimage':\r\n\t\t\t\tpic = Image.FromFile(j.image)\r\n\t\t\t\tim = PictureBox()\r\n\t\t\t\tif j.showborder:\r\n\t\t\t\t\tim.BorderStyle = BorderStyle.Fixed3D\r\n\t\t\t\telse:\r\n\t\t\t\t\tim.BorderStyle = BorderStyle.None\r\n\t\t\t\tratio = (pic.Height)/(pic.Width)\r\n\t\t\t\th = float(pic.Height)\r\n\t\t\t\tw = float(pic.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\timage_maxsize = formwidth - xlabel - rightmargin\r\n\t\t\t\tim.Size = Size(image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tscaledimage = Bitmap(image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tgr = Graphics.FromImage(scaledimage)\r\n\t\t\t\tgr.DrawImage(pic,0,0,image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tim.Image = pic\r\n\t\t\t\tim.SizeMode = PictureBoxSizeMode.Zoom\r\n\t\t\t\tformbody.Controls.Add(im)\r\n\t\t\t\tim.Location = Point(25 * xRatio,y+25*yRatio)\r\n\t\t\t\ty = im.Bottom + 25 * yRatio\r\n\t\t\r\n\t\t\telif j.__class__.__name__ == 'uicolorpick' and importcolorselection == 0:\r\n\t\t\t\tcp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tcp.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tcp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcp.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tcp.Location = Point(xlabel,y)\r\n\t\t\t\tcp.Text = j.buttontext\r\n\t\t\t\tcp.Height = 30 * yRatio\r\n\t\t\t\tformbody.Controls.Add(cp)\r\n\t\t\t\tcp.Click += form.colorpicker\r\n\t\t\t\tform.output.append(cp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\t\r\n\t\t\telif j.__class__.__name__ == 'uicolorpick' and importcolorselection == 1:\r\n\t\t\t\timportcolorselection = 2\r\n\t\t\telif j.__class__.__name__ == 'uigroup':\r\n\t\t\t\tgrouppanel = GroupBox()\r\n\t\t\t\tgrouppanel.Text = j.groupname\r\n\t\t\t\tgrouppanel.Location = Point(xlabel,y)\r\n\t\t\t\tgrouppanel.Width = formwidth - 65 * xRatio\r\n\t\t\t\t#recursive implementation of the definition to process grouped inputs\r\n\t\t\t\taddinput(grouppanel,j.inputgroup,25*yRatio,xinput-25*xRatio,80 * xRatio,90 * xRatio,importcolorselection)\r\n\t\t\t\tformbody.Controls.Add(grouppanel)\r\n\t\t\t\ty = grouppanel.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiconditional':\r\n\t\t\t\tgrouppanelcond = GroupBox()\r\n\t\t\t\tgrouppanelcond.Location = Point(xlabel,y)\r\n\t\t\t\tgrouppanelcond.Width = formwidth - 65 * xRatio\t\r\n\t\t\t\tform.output.append(grouppanelcond)\t\t\t\t\r\n\t\t\t\t#recursive implementation of the definition to process conditional groups of inputs\r\n\t\t\t\tpanlist = []\r\n\t\t\t\trblist = []\r\n\t\t\t\typ = 25 * yRatio\r\n\t\t\t\txrb = 25 * xRatio\r\n\t\t\t\tfor i,d in zip(j._Conditions,j._GroupedInputs):\t\r\n\t\t\t\t\trb = RadioButton()\r\n\t\t\t\t\trb.CheckedChanged += form.ActivateOption\r\n\t\t\t\t\trb.Text = i\r\n\t\t\t\t\trb.Location\t= Point(xrb,10*yRatio)\r\n\t\t\t\t\trb.Width = 95 * xRatio\r\n\t\t\t\t\trblist.append(rb)\t\t\t\t\t\r\n\t\t\t\t\tgrouppanelcond.Controls.Add(rb)\t\t\t\t\r\n\t\t\t\t\tcondition_pannel = Panel()\r\n\t\t\t\t\tcondition_pannel.Name = i\r\n\t\t\t\t\tcondition_pannel.Top = yp\r\n\t\t\t\t\tcondition_pannel.Width = formwidth - 65 * xRatio\r\n\t\t\t\t\tcondition_pannel.BackColor = Color.Transparent\r\n\t\t\t\t\tcondition_pannel.BringToFront()\t\t\t\t\t\r\n\t\t\t\t\taddinput(condition_pannel,d,25*yRatio,xinput-25*xRatio,80*xRatio,90*xRatio,importcolorselection)\r\n\t\t\t\t\tpanlist.append(condition_pannel)\r\n\t\t\t\t\typ = condition_pannel.Bottom - 25*yRatio\r\n\t\t\t\t\txrb += 100 * xRatio\r\n\t\t\t\tfor pan in panlist:\r\n\t\t\t\t\tgrouppanelcond.Controls.Add(pan)\r\n\t\t\t\tfor e,pan in enumerate(panlist):\r\n\t\t\t\t\tif e != j._defaultOptionIndex:\r\n\t\t\t\t\t\tpan.Enabled = False\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\trblist[j._defaultOptionIndex].Checked = True\r\n\t\t\t\tgrouppanelcond.Height = sum([p.Height for p in panlist]) - (len(panlist)-2)*25 * yRatio\r\n\t\t\t\tgrouppanelcond.BackColor = Color.Transparent\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(grouppanelcond)\r\n\t\t\t\tform.output.append([grouppanelcond.Tag])\t\t\t\t\r\n\t\t\t\ty = grouppanelcond.Bottom + 25*yRatio\r\n\t\t\tformbody.Height = y\r\n\r\n\r\n\t# process input lists \r\n\taddinput(body,inputtypes,0,IN[9],40 * xRatio ,IN[9] * xRatio,importcolorselection)\r\n\t\r\n\t#add the formbody panel to the form\r\n\tform.Controls.Add(body)\t\t\r\n\t\r\n\r\n\tif IN[6] != None:\r\n\t\tif IN[8] > 400 * yRatio:\r\n\t\t\tformy += 50 * yRatio\r\n\t\t\txinput = 270 * yRatio\r\n\t\telse:\r\n\t\t\tformy = logo.Bottom + 20 * yRatio\r\n\telse:\r\n\t\tformy += 50 * yRatio\r\n\r\n\r\n\r\n\t#Adding validation button\r\n\t\r\n\tbutton = Button()\r\n\tbutton.Text = IN[1]\r\n\tbutton.Width = formwidth - xinput - 40 * xRatio\r\n\tbutton.Height = 20 * yRatio\r\n\tbutton.Location = Point (xinput,formy)\r\n\tbutton.Click += form.setclose\r\n\tform.Controls.Add(button)\r\n\tform.MaximizeBox = False\r\n\tform.MinimizeBox = False\r\n\tform.FormBorderStyle = FormBorderStyle.FixedSingle\r\n\t\r\n\t#Adding Cancel button\r\n\tif IN[6] != None:\r\n\t\tcancelbutton = Button()\r\n\t\tcancelbutton.Text = IN[6]\r\n\t\tcancelbutton.Width = 120 * xRatio\r\n\t\tcancelbutton.Height = 20 * xRatio\r\n\t\tcancelbutton.Name = \"Cancel\"\r\n\t\tcancelbutton.Location = Point (xinput -120 * xRatio ,formy)\r\n\t\tcancelbutton.Click += form.setclose\r\n\t\tform.Controls.Add(cancelbutton)\r\n\t\tform.CancelButton = cancelbutton\r\n\t\r\n\t#Adding link to help\r\n\t\r\n\tif IN[5] != None :\r\n\t\thelplink = LinkLabel()\r\n\t\thelplink.Text = \"Help\"\r\n\t\thelplink.Tag = IN[5]\r\n\t\thelplink.Click += form.openurl\r\n\t\thelplink.Location = Point(formwidth - 65 * xRatio ,formy+30 * yRatio)\r\n\t\tform.Controls.Add(helplink)\r\n\telse:\r\n\t\tpass\t\r\n\t\t\t\r\n\tform.ShowIcon = True\r\n\tform.Width = formwidth\r\n\tform.Height = formy + 120 * yRatio\r\n\tformfooterheight = form.Height - formheaderheight\r\n\t\r\n\t# Make formbody scrollable\r\n\t\r\n\t# if the form is longer than its maximum height, do the following:\r\n\t# modify the form height\r\n\t# make the formbody panel scrollable\r\n\tif form.Height + body.Height > IN[7] * yRatio and IN[7] * yRatio > 0:\r\n\t\tformbody_calculatedheight = IN[7] * yRatio - form.Height\r\n\t\t# make sure the formbody is at least 100 px high\r\n\t\tif formbody_calculatedheight < 100 * yRatio: formbody_calculatedheight = 100 * yRatio\r\n\t\tbody.Height = formbody_calculatedheight\r\n\t\tform.Height = form.Height + formbody_calculatedheight\r\n\t\t# this (and apparently only this) will implement a vertical AutoScroll *only*\r\n\t\t# http://stackoverflow.com/a/28583501\r\n\t\tbody.HorizontalScroll.Maximum = 0\r\n\t\tbody.AutoScroll = False\r\n\t\tbody.VerticalScroll.Visible = False\r\n\t\tbody.AutoScroll = True\r\n\t\tbody.BorderStyle = BorderStyle.Fixed3D\r\n\telse:\r\n\t\tform.Height = form.Height + body.Height\r\n\t# Move footer elements\r\n\tlogo.Location = Point(logo.Location.X, logo.Location.Y + body.Height)\r\n\tbutton.Location = Point(button.Location.X, button.Location.Y + body.Height)\r\n\tif IN[6] != None: cancelbutton.Location = Point(cancelbutton.Location.X, cancelbutton.Location.Y + body.Height)\r\n\tif IN[5] != None: helplink.Location = Point(helplink.Location.X, helplink.Location.Y + body.Height)\r\n\r\n\t#Positionning the form at top left of current view\r\n\t#In The revit environment\r\n\ttry:\r\n\t\tuiviews = uidoc.GetOpenUIViews()\r\n\t\tif doc.ActiveView.IsValidType(doc.ActiveView.GetTypeId()):\r\n\t\t\tactiveviewid = doc.ActiveView.Id\r\n\t\t\tactiveUIView = [v for v in uiviews if v.ViewId == activeviewid][0]\r\n\t\telse:\r\n\t\t\tactiveUIView = uiviews[0]\r\n\t\trect = activeUIView.GetWindowRectangle()\r\n\t\tform.StartPosition = FormStartPosition.Manual\r\n\t\tform.Location = Point(rect.Left-7 * xRatio,rect.Top)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\t\t\r\n\tif IN[2]:\r\n\t\tif importcolorselection != 2:\r\n\t\t\tApplication.Run(form)\r\n\t\t\tresult = form.values\r\n\t\t\tOUT = result,True, form.cancelled \r\n\t\telse:\r\n\t\t\tOUT = ['ColorSelection input is only available With Revit 2017'] , False, False\r\n\telse :\r\n\t\tOUT = ['Set toggle to true!'] , False, False\r\nexcept:\r\n\timport traceback\r\n\tOUT = traceback.format_exc() , \"error\", \"error\"\r\n",
      "VariableInputPorts": true,
      "Id": "c2d5f1ad99f247fdb6a40ac6a2d53e28",
      "Inputs": [
        {
          "Id": "7f2251a63b954fbc9784b82104a93a8e",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "77025160d4174ba385780353915de4cb",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0cc55e4ee6fb4fa59ad099ff8f9f3b0a",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1fbba57eaff647d38edd1869ba8edd49",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5531845cf3254979b24d7b5a00161bfb",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6604e9d1768944a3bca991e2ba7316be",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "af41b93656d147ca95583c55c666ed4f",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e582d72f3c2a42ee9e1f802f647d317f",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a61746960d18416c872069991ac1246d",
          "Name": "IN[8]",
          "Description": "Input #8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5043ccab43a444cca2cb5c39209e53d9",
          "Name": "IN[9]",
          "Description": "Input #9",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "2ddd14d7533448eb90712b9cf4fc0e1f",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) Data Shapes,  2020\r\n#Data-Shapes www.data-shapes.io , elayoubi.mostafa@data-shapes.io @data_shapes\r\n\t\r\nimport clr\r\nimport sys\r\npyt_path = r'C:\\Program Files (x86)\\IronPython 2.7\\Lib'\r\nsys.path.append(pyt_path)\r\nimport os\r\nimport webbrowser\r\nimport unicodedata\r\nimport io\r\nimport tempfile\r\nimport System\r\n\t\r\ntry:\r\n\tclr.AddReference('System.Windows.Forms')\r\n\tclr.AddReference('System.Drawing')\r\n\tclr.AddReference('System.Windows.Forms.DataVisualization')\r\n\t\r\n\tfrom System.Drawing import Point , Size , Graphics, Bitmap, Image, Font, FontStyle, Icon, Color, Region , Rectangle , ContentAlignment , SystemFonts, FontFamily\r\n\tfrom System.Windows.Forms import Application, DockStyle, Button, Form, Label, TrackBar , ToolTip, ColumnHeader, TextBox, CheckBox, FolderBrowserDialog, OpenFileDialog, DialogResult, ComboBox, FormBorderStyle, FormStartPosition, ListView, ListViewItem , SortOrder, Panel, ImageLayout, GroupBox, RadioButton, BorderStyle, PictureBox, PictureBoxSizeMode, LinkLabel, CheckState, ColumnHeaderStyle , ImageList, VScrollBar, DataGridView, DataGridViewSelectionMode, DataGridViewAutoSizeColumnsMode , DataGridViewClipboardCopyMode , TreeView , TreeNode , TreeNodeCollection , AutoScaleMode , Screen, Padding\r\n\tfrom System.Windows.Forms.DataVisualization.Charting import *#Chart , SeriesChartType\r\n\tfrom System.Collections.Generic import *\r\n\tfrom System.Collections.Generic import List as iList\r\n\tfrom System.Windows.Forms import View as vi\r\n\tclr.AddReference('System')\r\n\tfrom System import IntPtr , Char\r\n\tfrom System import Type as SType, IO\r\n\tfrom System import Array\r\n\tfrom System.ComponentModel import Container\r\n\tclr.AddReference('System.Data')\r\n\tfrom System.Data import DataTable , DataView\r\n\r\n\ttry: #try to import All Revit dependencies\r\n\t\tclr.AddReference('RevitAPIUI')\r\n\t\tfrom  Autodesk.Revit.UI import Selection , TaskDialog \r\n\t\tfrom  Autodesk.Revit.UI.Selection import ISelectionFilter\r\n\t\tclr.AddReference('RevitNodes')\r\n\t\timport Revit\r\n\t\tclr.ImportExtensions(Revit.Elements)\r\n\t\tclr.ImportExtensions(Revit.GeometryConversion)\r\n\t\t\r\n\t\tclr.AddReference('RevitServices')\r\n\t\tfrom RevitServices.Persistence import DocumentManager\r\n\t\tdoc = DocumentManager.Instance.CurrentDBDocument\r\n\t\tuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\t\r\n\t\tclr.AddReference('RevitAPI')\r\n\t\ttry:\r\n\t\t\tfrom Autodesk.Revit.DB import ImageImportOptions\t\r\n\t\texcept:\r\n\t\t\tfrom Autodesk.Revit.DB import ImageTypeOptions , ImageType, ImagePlacementOptions , ImageInstance\r\n\t\tfrom Autodesk.Revit.DB import FilteredElementCollector , Transaction, View , ViewType , ViewFamily, ViewDrafting, ViewFamilyType, Element, ElementId , FamilyInstance , Document , XYZ, BoxPlacement, UnitUtils\r\n\t\t\r\n\t\ttry:\r\n\t\t\tfrom Autodesk.Revit.DB import  UnitType\r\n\t\texcept:\r\n\t\t\tfrom Autodesk.Revit.DB import SpecTypeId\r\n\r\n\t\tdbviews = [v for v in FilteredElementCollector(doc).OfClass(View).ToElements() if (v.ViewType == ViewType.FloorPlan or v.ViewType == ViewType.CeilingPlan or v.ViewType == ViewType.Section or v.ViewType == ViewType.Elevation or v.ViewType == ViewType.ThreeD)]\r\n\t\tviewindex = 0\r\n\t\ttry:\r\n\t\t\tUIunit = Document.GetUnits(doc).GetFormatOptions(UnitType.UT_Length).DisplayUnits\r\n\t\texcept:\r\n\t\t\tUIunit = Document.GetUnits(doc).GetFormatOptions(SpecTypeId.Length).GetUnitTypeId()\r\n\t\t\t\r\n\t\tclass selectionfilter(ISelectionFilter):\r\n\t\t\tdef __init__(self,category):\r\n\t\t\t\tself.category = category\r\n\t\t\tdef AllowElement(self,element):\r\n\t\t\t\tif element.Category.Name in [c.Name for c in self.category]:\r\n\t\t\t\t\treturn True\r\n\t\t\t\telse:\r\n\t\t\t\t\treturn False\r\n\t\t\tdef AllowReference(reference,point):\r\n\t\t\t\treturn False\r\n\r\n\r\n\t\t\t\r\n\texcept: #in case we are in the Sandbox, Formit or Civil 3D environment\r\n\t\tpass\r\n\t\r\n\timportcolorselection = 0\r\n\t\r\n\ttry:\r\n\t\tfrom  Autodesk.Revit.UI import ColorSelectionDialog\r\n\texcept:\r\n\t\timportcolorselection = 1\r\n\t\r\n\r\n\t\r\n\tclr.AddReference('ProtoGeometry')\r\n\tfrom Autodesk.DesignScript.Geometry import Point as dsPoint\r\n\r\n\tfrom System.Reflection import Assembly\r\n\timport xml.etree.ElementTree as et\r\n\t\r\n\r\n\t\r\n\timport re\t\r\n\tdef regexEndNum(input):\r\n\t\ttry:\r\n\t\t\treturn \tre.search('(\\d+)$', input).group(0)\r\n\t\texcept:\r\n\t\t\treturn \"\"\r\n\r\n\tdef iterateThroughNodes(collection,li):\r\n\t\tif hasattr(collection,'Nodes'):\r\n\t\t\tntest = collection.Nodes\r\n\t\t\tif len(ntest) > 0:\r\n\t\t\t\tfor i in ntest:\r\n\t\t\t\t\titerateThroughNodes(i,li)\r\n\t\t\telse:\r\n\t\t\t\tif collection.Checked:\r\n\t\t\t\t\tli.append(collection.Tag)\r\n\t\treturn li\r\n\t\t\r\n\r\n\t\r\n\tclass MultiTextBoxForm(Form):\r\n\t\t\r\n\t    def __init__(self):\r\n\t        self.Text = 'strana-developer'\r\n\t        self.output = []\r\n\t        self.values = []\r\n\t        self.cancelled = False\r\n\t\r\n\t    def setclose(self, sender, event):\r\n\t    \tcbindexread = 0\r\n\t    \tif sender.Name != \"Cancel\":\r\n\t    \t\tfor f in self.output:\r\n\t    \t\t\tif f.GetType() == myTextBox:\r\n\t    \t\t\t\tif f._isNum :\r\n\t    \t\t\t\t\tval = float(f.Text)\r\n\t    \t\t\t\telse:\r\n\t    \t\t\t\t\tval = f.Text\r\n\t    \t\t\t\tself.values.append(val)\r\n\t    \t\t\tif f.GetType() == CheckBox:\r\n\t    \t\t\t\tself.values.append(f.Checked)\r\n\t    \t\t\tif f.GetType() == Button:\r\n\t    \t\t\t\tif isinstance(f.Tag ,list):\r\n\t    \t\t\t\t\ttry:\r\n\t    \t\t\t\t\t\tself.values.append([e for e in f.Tag if e.__class__.__name__ != \"Category\"])\t    \t\t\t\t\t\r\n\t    \t\t\t\t\texcept:\r\n\t    \t\t\t\t\t\tself.values.append(f.Tag)\t    \t\t\t\t\t\r\n\t    \t\t\t\telse:\r\n\t    \t\t\t\t\ttry:\t    \t\t\t\t\r\n\t    \t\t\t\t\t\tif f.Tag.__class__.__name__ != \"Category\":\r\n\t    \t\t\t\t\t\t\tself.values.append(f.Tag)\r\n\t    \t\t\t\t\t\telse:\r\n    \t\t\t\t\t\t\t\tself.values.append([])\r\n\t    \t\t\t\t\texcept:\r\n\t    \t\t\t\t\t\tself.values.append(f.Tag)\t\r\n\t    \t\t\tif f.GetType() == ComboBox:\r\n\t    \t\t\t\ttry:\r\n\t    \t\t\t\t\tkey = f.Text\r\n\t    \t\t\t\t\tself.values.append(f.Tag[key])\r\n\t    \t\t\t\texcept:\r\n\t    \t\t\t\t\tself.values.append(None)\r\n\t    \t\t\tif f.GetType() == mylistview:\r\n\t    \t\t\t\tself.values.append([f.Values[i.Text] for i in f.CheckedItems])\r\n\t    \t\t\tif f.GetType() == mytrackbar:\r\n\t    \t\t\t\tself.values.append(f.startval+f.Value*f.step)\r\n\t    \t\t\tif f.GetType() == mygroupbox:\r\n\t    \t\t\t\ttry:\r\n\t    \t\t\t\t\tkey = [j.Text for j in f.Controls if j.Checked == True][0]\r\n\t    \t\t\t\t\tself.values.append(f.Tag[key])\r\n\t    \t\t\t\texcept:\r\n\t    \t\t\t\t\tself.values.append(None)\r\n\t    \t\t\tif f.GetType() == myDataGridView:\r\n\t    \t\t\t\tf.EndEdit()\r\n\t    \t\t\t\tdsrc = f.DataSource\r\n\t    \t\t\t\tout = []\r\n\t    \t\t\t\tcolcount = f.ColumnCount\r\n\t    \t\t\t\trowcount = f.RowCount - 1\r\n\t    \t\t\t\tif f.Tag:\r\n\t\t    \t\t\t\tl = []\r\n\t    \t\t\t\t\tfor i in range(colcount):\t    \t\t\t\t\t\t\r\n\t    \t\t\t\t\t\tl.append(dsrc.Columns[i].ColumnName)\r\n\t    \t\t\t\t\tout.append(l)\t    \t\t\t\t\t\t\r\n\t\t    \t\t\t\tfor r in range(rowcount):\r\n\t\t    \t\t\t\t\tl = []\r\n\t\t    \t\t\t\t\tfor i in range(colcount):\r\n\t\t    \t\t\t\t\t\tl.append(dsrc.DefaultView[r].Row[i])\r\n\t\t    \t\t\t\t\tout.append(l)\r\n\t    \t\t\t\telse: \r\n\t\t    \t\t\t\tfor r in range(rowcount):\r\n\t\t    \t\t\t\t\tl = []\r\n\t\t    \t\t\t\t\tfor i in range(colcount):\r\n\t\t    \t\t\t\t\t\tl.append(dsrc.DefaultView[r].Row[i])\r\n\t\t    \t\t\t\t\tout.append(l)\r\n\t    \t\t\t\tself.values.append(out)\r\n\t    \t\t\tif f.GetType() == TreeView:\r\n\t    \t\t\t\tls = []\r\n\t    \t\t\t\tnds = f.Nodes[0]\r\n\t    \t\t\t\titerateThroughNodes(nds,ls)\r\n\t    \t\t\t\tself.values.append(ls)\r\n\t    \t\t\tif f.GetType() == GroupBox:\r\n\t    \t\t\t\trb = [c for c in f.Controls if c.GetType() == RadioButton and c.Checked][0]\r\n\t    \t\t\t\tself.values.append(rb.Text)\r\n\t    \t\t\t\tf.Controls.Remove(rb)\r\n\t    \telse:\r\n\t    \t\tself.values = None\r\n\t    \t\tself.cancelled = True\r\n\t    \tself.Close()\r\n\t\r\n\t    def reset(self, sender, event):\r\n\t\t\tpass\r\n\t\r\n\t    def openfile(self, sender, event):\r\n\t\t\tofd = OpenFileDialog()\r\n\t\t\tdr = ofd.ShowDialog()\r\n\t\t\tif dr == DialogResult.OK:\r\n\t\t\t\tsender.Text = ofd.FileName\r\n\t\t\t\tsender.Tag = ofd.FileName\r\n\r\n\t    def exportToExcel(self, sender, event):\r\n\t    \t#importing Excel IronPython libraries\r\n\t    \tclr.AddReferenceByName('Microsoft.Office.Interop.Excel, Version=11.0.0.0, Culture=neutral, PublicKeyToken=71e9bce111e9429c')\r\n\t    \tfrom Microsoft.Office.Interop import Excel\r\n\t    \tex = Excel.ApplicationClass()\r\n\t    \tex.Visible = sender.Tag[1]\r\n\t    \tex.DisplayAlerts = False\r\n\t    \tfbd = FolderBrowserDialog()\r\n\t    \tfbd.SelectedPath = sender.Text\r\n\t    \tparent = sender.Parent\r\n\t    \tfptextbox = parent.GetChildAtPoint(Point(parent.Location.X,sender.Location.Y+5*yRatio))\r\n\t    \tdataGrid = parent.GetChildAtPoint(Point(parent.Location.X,parent.Location.Y+23*xRatio))\r\n\t    \tdataTable = dataGrid.DataSource\r\n\t    \tfptext = fptextbox.Text\r\n\t    \ttitletext = parent.GetChildAtPoint(Point(0,0)).Text\r\n\t    \tdr = fbd.ShowDialog()\r\n\t    \tfrstRwTtle = sender.Tag[0]\r\n\t    \tif frstRwTtle:\r\n\t    \t\t_header = Excel.XlYesNoGuess.xlYes\r\n\t    \telse:\r\n\t    \t\t_header = Excel.XlYesNoGuess.xlNo\r\n\t    \tif dr == DialogResult.OK:\r\n\t    \t\tworkbk = ex.Workbooks.Add()\r\n\t    \t\tworksheet = workbk.Worksheets.Add()\r\n\t    \t\t#Writing title and doc info\r\n\t    \t\tif sender.Tag[2]:\r\n\t\t    \t\ttitleCell = worksheet.Cells[1,1]\r\n\t\t    \t\tworksheet.Cells[2,1].Value2 = sender.Tag[3]\r\n\t\t    \t\ttitleCell.Value2 = titletext\r\n\t\t    \t\ttitleCell.Font.Size = 18\r\n\t\t    \t\ttitleCell.Font.Bold = True\r\n\t\t    \t\tstartR = 3\r\n\t\t    \t\tendR = 3\r\n\t\t    \telse:\r\n\t\t    \t\tstartR = 1\r\n\t\t    \t\tendR = 0\t\r\n\t\t    \tif frstRwTtle:\r\n\t\t    \t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t    \t\t\tworksheet.Cells[startR,j+1] = dataTable.Columns[j].ColumnName\t\t    \t\r\n\t\t    \t\tfor i in range(0,dataTable.Rows.Count):\r\n\t\t    \t\t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t\t    \t\t\tworksheet.Cells[i+startR+1,j+1] = dataTable.DefaultView[i].Row[j].ToString()\r\n\t\t    \t\txlrange = ex.get_Range(worksheet.Cells[startR,1],worksheet.Cells[dataTable.Rows.Count+endR+1,dataTable.Columns.Count])\t\t\t    \t\t\t\r\n\t\t    \telse :\r\n\t\t    \t\tfor i in range(0,dataTable.Rows.Count):\r\n\t\t    \t\t\tfor j in range(0,dataTable.Columns.Count):\r\n\t\t\t    \t\t\tworksheet.Cells[i+startR,j+1] = dataTable.DefaultView[i].Row[j].ToString()\t\t    \t\r\n\t\t    \t\txlrange = ex.get_Range(worksheet.Cells[startR,1],worksheet.Cells[dataTable.Rows.Count+endR,dataTable.Columns.Count])\r\n\t\t    \txlrange.Columns.AutoFit()\r\n\t\t    \tworksheet.ListObjects.Add(Excel.XlListObjectSourceType.xlSrcRange, xlrange, SType.Missing, _header, SType.Missing).Name = \"DataShapesTable\"\r\n\t\t    \tworksheet.ListObjects[\"DataShapesTable\"].TableStyle =  \"TableStyleMedium16\"\r\n\t    \t\tworkbk.SaveAs(fbd.SelectedPath + \"\\\\\" + fptext)\r\n\t    \t\tif not sender.Tag[1]:\r\n\t    \t\t\tworkbk.Close()\r\n\t    \t\t\tex.Quit()\r\n\r\n\t    def startCell(self, sender, event ):\r\n\t\t\tsender.startcell[\"X\"] = event.ColumnIndex\r\n\t\t\tsender.startcell[\"Y\"] = event.RowIndex\t\r\n\r\n\t    def endCell(self, sender, event ):\r\n\t    \ttry:\r\n\t\t\t\tsender.endcell[\"X\"] = event.ColumnIndex\r\n\t\t\t\tsender.endcell[\"Y\"] = event.RowIndex \r\n\t\t\t\tstartval = sender.Rows[sender.startcell[\"Y\"]].Cells[sender.startcell[\"X\"]].Value\r\n\t\t\t\tendNum = regexEndNum(startval)\r\n\t\t\t\tif endNum != \"\":\r\n\t\t\t\t\tif sender.endcell[\"Y\"] == sender.startcell[\"Y\"]:\r\n\t\t\t\t\t\tfor e,i in enumerate(range(sender.startcell[\"X\"],sender.endcell[\"X\"] + 1)):\r\n\t\t\t\t\t\t\tsender.Rows[sender.startcell[\"Y\"]].Cells[i].Value = startval[:-len(endNum)] + str(int(endNum) + e)\r\n\t\t\t\t\telif sender.endcell[\"X\"] == sender.startcell[\"X\"]:\r\n\t\t\t\t\t\tfor e,i in enumerate(range(sender.startcell[\"Y\"],sender.endcell[\"Y\"] + 1)):\r\n\t\t\t\t\t\t\tsender.Rows[i].Cells[sender.endcell[\"X\"]].Value = startval[:-len(endNum)] + str(int(endNum) + e)\r\n\t\t\t\telse:\t\t\t\t\r\n\t\t\t\t\tif sender.endcell[\"Y\"] == sender.startcell[\"Y\"]:\r\n\t\t\t\t\t\tfor i in range(sender.startcell[\"X\"],sender.endcell[\"X\"] + 1):\r\n\t\t\t\t\t\t\tsender.Rows[sender.startcell[\"Y\"]].Cells[i].Value = startval\r\n\t\t\t\t\telif sender.endcell[\"X\"] == sender.startcell[\"X\"]:\r\n\t\t\t\t\t\tfor i in range(sender.startcell[\"Y\"],sender.endcell[\"Y\"] + 1):\r\n\t\t\t\t\t\t\tsender.Rows[i].Cells[sender.endcell[\"X\"]].Value = startval\r\n\t    \texcept:\r\n\t    \t\tpass\r\n\t    \t\t    \t\r\n\t    def startRowDrag(self, sender, event ):\r\n\t    \tshmak\r\n\t\t\t\r\n\t    def opendirectory(self, sender, event):\r\n\t\t\tfbd = FolderBrowserDialog()\r\n\t\t\tfbd.SelectedPath = sender.Text\r\n\t\t\tdr = fbd.ShowDialog()\r\n\t\t\tif dr == DialogResult.OK:\r\n\t\t\t\tsender.Text = fbd.SelectedPath\r\n\t\t\t\tsender.Tag = fbd.SelectedPath\r\n\t\r\n\t    def pickobjects(self, sender, event):   \r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.Element,'')\r\n\t\t\t\tselelem = [doc.GetElement(s.ElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t#THIS METHOD IS FOR CIVIL 3D EVIRONMENT\r\n\t    def pickautocadobjects(self, sender, event):   \r\n\t\t\tselelem = []\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tacadDoc = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Autocad.Application\").ActiveDocument\r\n\t\t\t\tacadDoc.Activate()\r\n\t\t\t\tacadUser = acadDoc.GetVariable(\"users5\")\t\r\n\t\t\t\tacadDoc.SendCommand(\"(and(princ\\042\"+ sender.Text + \"\\042)(setq ss(ssget))(setvar\\042users5\\042\\042LinkDWGUIOK\\042)(command\\042_.Select\\042ss\\042\\042)) \")\r\n\t\t\t\tselection_ = acadDoc.ActiveSelectionSet\r\n\t\t\t\tacadDoc.SendCommand(\"(setq ss nil) \")\r\n\t\t\t\tif acadDoc.GetVariable(\"users5\") == \"LinkDWGUIOK\" and selection_ != None:\r\n\t\t\t\t\tfor sel in selection_:\t\t\t\t\r\n\t\t\t\t\t\tselelem.append(sel)\t\t\r\n\t\t\t\t\tacadDoc.SetVariable(\"users5\", acadUser)\r\n\t\t\t\tsender.Tag = list(selelem)\t\t\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\r\n\r\n\t    def pickautocadobject(self, sender, event):   \r\n\t\t\tselelem = None\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tacadDoc = System.Runtime.InteropServices.Marshal.GetActiveObject(\"Autocad.Application\").ActiveDocument\r\n\t\t\t\tacadUser = acadDoc.GetVariable(\"users5\")\r\n\t\t\t\tacadPickBox = acadDoc.GetVariable(\"pickbox\")\r\n\t\t\t\tacadDoc.SetVariable(\"pickbox\", 5)\r\n\t\t\t\tacadDoc.Activate()\r\n\t\t\t\tacadDoc.SendCommand(\"(setq obj(car(entsel\\042\" + sender.Text + \"\\042))) \")\r\n\t\t\t\tacadDoc.SendCommand(\"(and obj(setvar\\042users5\\042(cdr(assoc 5(entget obj))))(setq obj nil)) \")\t\t\r\n\t\t\t\tselection_ = acadDoc.GetVariable(\"users5\")\r\n\t\t\t\tacadDoc.SetVariable(\"pickbox\", acadPickBox)\r\n\t\t\t\tacadDoc.SetVariable(\"users5\", acadUser)\r\n\t\t\t\tselelem = acadDoc.HandleToObject(selection_)\r\n\t\t\t\tsender.Tag = selelem\t\t\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\r\n\r\n\t    def pickobjectsordered(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\toutput = []\r\n\t\t\ttest = True\r\n\t\t\tTaskDialog.Show(\"Data|Shapes\", 'Pick elements in order, then hit ESC to exit.')\r\n\t\t\twhile test:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tsel = doc.GetElement(uidoc.Selection.PickObject(Selection.ObjectType.Element, 'Pick elements in order').ElementId)\r\n\t\t\t\t\toutput.append(sel.ToDSType(True))\r\n\t\t\t\texcept : \r\n\t\t\t\t\ttest = False\r\n\t\t\t\tsender.Tag = output\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t    \r\n\t    def pickobjectsofcatordered(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\toutput = []\r\n\t\t\ttest = True\r\n\t\t\tif isinstance(sender.Tag,list):\t\t\t\r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\tTaskDialog.Show(\"Data|Shapes\", 'Select %s in order, then press ESC to exit.' %(', '.join([c.Name for c in category])))\r\n\t\t\twhile test:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\t\tsel = doc.GetElement(uidoc.Selection.PickObject(Selection.ObjectType.Element,selfilt, 'Select %s' %(', '.join([c.Name for c in category]))).ElementId)\t\t\t\t\r\n\t\t\t\t\toutput.append(sel.ToDSType(True))\r\n\t\t\t\texcept : \r\n\t\t\t\t\ttest = False\r\n\t\t\t\tsender.Tag = (output)\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t    def picklinkedobjects(self, sender, event):\r\n\t\t\t#This part was made easier by Dimitar Venkov's work\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tlinkref = uidoc.Selection.PickObject(Selection.ObjectType.Element,'Select the link instance.')\r\n\t\t\t\tlink = doc.GetElement(linkref.ElementId).GetLinkDocument()\r\n\t\t\t\ttd = TaskDialog.Show('Data-Shapes','Select the linked elements and press Finish.')\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.LinkedElement,'Select the linked elements and press Finish.')\r\n\t\t\t\tselelem = [link.GetElement(s.LinkedElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\t\t\r\n\r\n\t    def pickobject(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.Element,'')\r\n\t\t\t\tselelem = doc.GetElement(sel.ElementId) \r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t    def picklinkedobject(self, sender, event):\r\n\t\t\t#This part was made easier by Dimitar Venkov's work\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tlinkref = uidoc.Selection.PickObject(Selection.ObjectType.Element,'Select the link instance.')\r\n\t\t\t\tlink = doc.GetElement(linkref.ElementId).GetLinkDocument()\r\n\t\t\t\ttd = TaskDialog.Show('Data-Shapes','Select the linked element.')\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.LinkedElement,'Select the linked element.')\r\n\t\t\t\tselelem = link.GetElement(sel.LinkedElementId)\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\t\t\t\t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t    def pickobjectsofcat(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tif isinstance(sender.Tag,list):\t    \r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\ttry:\r\n\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\tsel = uidoc.Selection.PickObjects(Selection.ObjectType.Element,selfilt,'Select %s' %(', '.join([c.Name for c in category])))\r\n\t\t\t\tselelem = [doc.GetElement(s.ElementId) for s in sel]\r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\r\n\t    def pickobjectofcat(self, sender, event):\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tif isinstance(sender.Tag,list):\t    \r\n\t\t\t\tcategory = UnwrapElement(sender.Tag)\r\n\t\t\telse:\r\n\t\t\t\tcategory = [UnwrapElement(sender.Tag)]\r\n\t\t\ttry:\r\n\t\t\t\tselfilt = selectionfilter(category)\r\n\t\t\t\tsel = uidoc.Selection.PickObject(Selection.ObjectType.Element,selfilt,'Select %s' %(', '.join([c.Name for c in category])))\r\n\t\t\t\tselelem = doc.GetElement(sel.ElementId) \r\n\t\t\t\tsender.Tag = (selelem)\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\r\n\t    def pickfaces(self, sender, event):\r\n\t\t\tfaces = []\t    \t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\ttry:\r\n\t\t\t\tselface = uidoc.Selection.PickObjects(Selection.ObjectType.Face,'')\r\n\t\t\t\tfor s in selface:\r\n\t\t\t\t\tf = uidoc.Document.GetElement(s).GetGeometryObjectFromReference(s).ToProtoType(True)\r\n\t\t\t\t\t[i.Tags.AddTag(\"RevitFaceReference\", s) for i in f]\r\n\t\t\t\t\tfaces.append(f)\r\n\t\t\t\tsender.Tag = [i for j in faces for i in j]\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\t\r\n\t    def pickpointsonface(self, sender, event):\r\n\t\t\tfaces = []\t    \t\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\r\n\t\t\tselpoints = uidoc.Selection.PickObjects(Selection.ObjectType.PointOnElement,'')\r\n\t\t\tpoints = []\r\n\t\t\tfor s in selpoints:\r\n\t\t\t\tpt = s.GlobalPoint\r\n\t\t\t\tpoints.append(dsPoint.ByCoordinates(UnitUtils.ConvertFromInternalUnits(pt.X,UIunit),UnitUtils.ConvertFromInternalUnits(pt.Y,UIunit),UnitUtils.ConvertFromInternalUnits(pt.Z,UIunit)))\r\n\t\t\tsender.Tag = points\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\t\t\t\t\r\n\t    def pickedges(self, sender, event):\r\n\t\t\tedges = []\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = False\t\r\n\t\t\ttry:\t\t\t\t\r\n\t\t\t\tseledge = uidoc.Selection.PickObjects(Selection.ObjectType.Edge,'')\r\n\t\t\t\tfor s in seledge:\r\n\t\t\t\t\te = uidoc.Document.GetElement(s).GetGeometryObjectFromReference(s).AsCurve().ToProtoType(True)\r\n\t\t\t\t\te.Tags.AddTag(\"RevitFaceReference\", s)\r\n\t\t\t\t\tedges.append(e)\r\n\t\t\t\tsender.Tag = edges\r\n\t\t\texcept:\r\n\t\t\t\tpass\r\n\t\t\tfor c in self.Controls:\r\n\t\t\t\tc.Enabled = True\r\n\r\n\t    def colorpicker(self, sender, event):\r\n\t\t\tdialog = ColorSelectionDialog()\r\n\t\t\tselection = ColorSelectionDialog.Show(dialog)\r\n\t\t\tselected = dialog.SelectedColor\r\n\t\t\tsender.Tag = selected\r\n\t\t\tsender.BackColor = Color.FromArgb(selected.Red,selected.Green,selected.Blue)\r\n\t\t\tsender.ForeColor = Color.FromArgb(selected.Red,selected.Green,selected.Blue)\r\n\t\r\n\t    def topmost(self):\r\n\t\t\tself.TopMost = True\r\n\t\r\n\t    def lvadd(self, sender, event):\r\n\t\t\tsender.Tag = [i for i in sender.CheckedItems]\r\n\t\t\t\r\n\t    def scroll(self, sender, event):\r\n\t\t\tparent = sender.Parent\r\n\t\t\tchild = parent.GetChildAtPoint(Point(0,5*yRatio))\r\n\t\t\tchild.Text = str(sender.startval+sender.Value*sender.step)\r\n\r\n\t    def openurl(self, sender, event):\r\n\t\t\twebbrowser.open(sender.Tag)\r\n\t\r\n\t    def selectall(self, sender, event):\r\n\t\t\tif sender.Checked:\r\n\t\t\t\tparent = sender.Parent\r\n\t\t\t\tlistview = parent.GetChildAtPoint(Point(0,0))\r\n\t\t\t\tfor i in listview.Items:\r\n\t\t\t\t\ti.Checked = True\r\n\t\t\telse:\r\n\t\t\t\tpass\r\n\t\t\t\t\r\n\t    def selectnone(self, sender, event):\r\n\t\t\tif sender.Checked:\r\n\t\t\t\tparent = sender.Parent\r\n\t\t\t\tlistview = parent.GetChildAtPoint(Point(0,0))\r\n\t\t\t\tfor i in listview.Items:\r\n\t\t\t\t\ti.Checked = False\r\n\t\t\telse:\r\n\t\t\t\tpass\t\t\r\n\r\n\t    def updateallnone(self, sender, event):\r\n\t    \ttry:\r\n\t    \t\tparent = sender.Parent\r\n\t    \t\trball = parent.GetChildAtPoint(Point(0,sender.Height + 5*yRatio))\r\n\t    \t\trbnone = parent.GetChildAtPoint(Point(80 * xRatio,sender.Height + 5*yRatio))\r\n\t    \t\tif sender.CheckedItems.Count == 0 and event.NewValue == CheckState.Unchecked:\r\n\t    \t\t\trbnone.Checked = False\r\n\t    \t\t\trball.Checked = False\r\n\t    \t\telif sender.CheckedItems.Count == sender.Items.Count and event.NewValue == CheckState.Unchecked:\r\n\t    \t\t\trball.Checked = False\r\n\t    \t\t\trbnone.Checked = False\r\n\t    \t\telif sender.CheckedItems.Count == sender.Items.Count-1 and event.NewValue == CheckState.Checked:\r\n\t    \t\t\trball.Checked = True\r\n\t    \t\t\trbnone.Checked = False\r\n\t    \t\telif sender.CheckedItems.Count == 1 and event.NewValue == CheckState.Unchecked:\r\n\t    \t\t\trball.Checked = False\r\n\t    \t\t\trbnone.Checked = True\t    \t\r\n\t    \t\telse :\r\n\t    \t\t\trball.Checked = False\r\n\t    \t\t\trbnone.Checked = False\r\n\t    \texcept:\r\n\t    \t\tpass\r\n\r\n\t    def zoomcenter(self, sender, event ):\r\n\t\t\tif event.X > 15:\t    \r\n\t\t\t\ttry:\r\n\t\t\t\t\telement = doc.GetElement(uidoc.Selection.GetElementIds()[0])\r\n\t\t\t\t\tuidoc.ShowElements(element)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\telse:\r\n\t\t\t\tpass\r\n\t\t\t\t\r\n\t\t\t\r\n\t    def setviewforelement(self, sender, event ):    \r\n\t\t\tif event.X > 15*xRatio:\t    \t\t\r\n\t\t\t\ttry:\r\n\t\t\t\t\titem = sender.GetItemAt(event.X,event.Y).Text\r\n\t\t\t\t\telement = UnwrapElement(sender.Values[item])\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tviewsforelement = [v for v in dbviews if (not v.IsTemplate) and (element.Id in [e.Id for e in FilteredElementCollector(doc,v.Id).OfClass(element.__class__).ToElements()])]\r\n\t\t\t\t\texcept:\r\n\t\t\t\t\t\tviewsforelement = [v for v in dbviews if (not v.IsTemplate) and (element.Id in [e.Id for e in FilteredElementCollector(doc,v.Id).OfClass(FamilyInstance).ToElements()])]\r\n\t\t\t\t\tglobal viewindex\r\n\t\t\t\t\tdbView = viewsforelement[viewindex]\r\n\t\t\t\t\tid = [element.Id]\r\n\t\t\t\t\ticollection = iList[ElementId](id)\r\n\t\t\t\t\tuidoc.Selection.SetElementIds(icollection)\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\telse:\t    \r\n\t\t\t\tpass\r\n\r\n\r\n\t    def CheckChildren(self, sender, event ):\r\n\t\t\tevNode = event.Node\t    \r\n\t\t\tcheckState = evNode.Checked\t\r\n\t\t\tfor n in event.Node.Nodes:\t   \t\r\n\t\t\t\tn.Checked = checkState\t\t\t\r\n\t\t\t\t\r\n\t    def ActivateOption(self, sender, event ):\r\n\t    \tparent = sender.Parent\r\n\t    \tassociatedControls = [p for p in parent.Controls if p.Name == sender.Text and p.GetType() == Panel][0]\r\n\t    \trestofcontrols = [p for p in parent.Controls if p.Name != sender.Text and p.GetType() == Panel]\r\n\t    \tif sender.Checked:\r\n\t    \t\tassociatedControls.Enabled = True\r\n\t    \t\tfor c in restofcontrols:\r\n\t    \t\t\tc.Enabled = False\r\n\t    \t\tparent.Tag = sender.Text\r\n\t    \t\t\r\n\t    def showtooltip(self, sender, event ):\r\n\t    \tttp = ToolTip()\r\n\t    \tttp.AutoPopDelay = 10000\r\n\t    \tttp.SetToolTip(sender , sender.Tag)\t\r\n\r\n\t    def numsOnly(self, sender, event ):\r\n\t    \tif Char.IsDigit(event.KeyChar)==False and event.KeyChar != \".\" and Char.IsControl(event.KeyChar)==False:\r\n\t    \t\tevent.Handled = True\r\n\t    \r\n\t    def chart_showLabels(self, sender, event):\r\n\t\t\tcb = sender\r\n\t\t\tpanelcht = sender.Parent\r\n\t\t\tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t\t\tfor s in chart1.Series:\r\n\t\t\t\tif s.ChartType == SeriesChartType.Pie:\r\n\t\t\t\t\tif cb.Checked:\r\n\t\t\t\t\t\ts[\"PieLabelStyle\"] = \"Inside\"\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\ts[\"PieLabelStyle\"] = \"Disabled\"\r\n\t\t\t\telse:\r\n\t\t\t\t\tif cb.Checked:\r\n\t\t\t\t\t\ts.IsValueShownAsLabel = True\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\ts.IsValueShownAsLabel = False\r\n\t    \t\t\r\n\t    def imageexport(self, sender, event):\r\n\t    \timport datetime\r\n\t    \tfrom datetime import datetime\r\n\t    \tfrom RevitServices.Transactions import TransactionManager\r\n\t    \t#Modify resolution before the render\r\n\t    \tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t    \toriginalFont = Font(fontFam,8)\r\n\t    \tpanelcht = sender.Parent\r\n\t    \tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t    \toriginalTitleFont = chart1.Titles[0].Font\r\n\t    \toriginalWidth = chart1.Width\r\n\t    \toriginalHeight = chart1.Height\r\n\t    \tchart1.Visible = False\r\n\t    \tchart1.Dock = DockStyle.None\r\n\t    \tchart1.Width = 2100 * 0.8\r\n\t    \tchart1.Height = 1500 * 0.8\r\n\t    \tchart1.ChartAreas[0].AxisX.LabelAutoFitStyle = LabelAutoFitStyles.None\r\n\t    \tchart1.ChartAreas[0].AxisY.LabelAutoFitStyle = LabelAutoFitStyles.None\r\n\t    \tchart1.ChartAreas[0].AxisX.LabelStyle.Font = Font(fontFam, 30)\r\n\t    \tchart1.ChartAreas[0].AxisY.LabelStyle.Font = Font(fontFam, 30)\r\n\t    \tchart1.ChartAreas[0].AxisX.TitleFont = Font(fontFam, 30)\r\n\t    \tchart1.ChartAreas[0].AxisY.TitleFont = Font(fontFam, 30)\r\n\t    \tchart1.TextAntiAliasingQuality = TextAntiAliasingQuality.High\r\n\t    \tchart1.BackColor = Color.White\r\n\t    \tchart1.Titles[0].Font = Font(fontFam, 32, FontStyle.Bold)\r\n\t    \tchart1.ChartAreas[0].BackColor = Color.White\r\n\t    \tfor serie in chart1.Series:\r\n\t    \t\tserie.Font = Font(fontFam, 30)\r\n\t\t    \tfor p in serie.Points:\r\n\t\t    \t\tp.Font = Font(fontFam, 30)\r\n\t\t    \t\tp.MarkerSize = 15\r\n\t    \tfor legend in chart1.Legends:\r\n\t    \t\tlegend.Font = Font(fontFam, 30)\r\n\t    \t\tlegend.BackColor = Color.White\r\n\t    \tchart1.Invalidate()\r\n\t    \tchart1.SaveImage(tempfile.gettempdir() + \"\\\\chartImage.bmp\", ChartImageFormat.Bmp)\r\n\t    \t#Get back to original settings\r\n\t    \tchart1.Width = originalWidth\r\n\t    \tchart1.Height = originalHeight\r\n\t    \tchart1.BackColor = Color.Transparent\r\n\t    \tchart1.ChartAreas[0].BackColor = Color.Transparent\r\n\t    \tchart1.ChartAreas[0].AxisX.LabelStyle.Font = originalFont\r\n\t    \tchart1.ChartAreas[0].AxisY.LabelStyle.Font = originalFont\r\n\t    \tchart1.ChartAreas[0].AxisX.TitleFont = originalFont\r\n\t    \tchart1.ChartAreas[0].AxisY.TitleFont = originalFont\r\n\t    \tchart1.Titles[0].Font = originalTitleFont\r\n\t    \tfor serie in chart1.Series:\r\n\t    \t\tserie.Font = originalFont\r\n\t    \t\tfor p in serie.Points:\r\n\t    \t\t\tp.Font = originalFont\r\n\t\t    \t\tp.MarkerSize = 8\r\n\t    \tfor legend in chart1.Legends:\r\n\t    \t\tlegend.Font = originalFont\r\n\t    \t\tlegend.BackColor = Color.Transparent\r\n\t    \tchart1.Invalidate()\r\n\t    \tchart1.Visible = True\r\n\t    \t#Import the picture in a Drafting View\r\n\t    \t#Import the picture in a Drafting View // The try catch if for handling the fact that ImageImportOptions was deprecated in 2020 and is obsolete in 2021\t    \t\r\n\t    \ttry:\r\n\t    \t\timportOptions = ImageImportOptions()\t\r\n\t    \t\timportOptions.Resolution = 72\r\n\t    \t\timportOptions.Placement = BoxPlacement.TopLeft\t    \t\t\r\n\t    \texcept:\r\n\t    \t\timageTypeOption = ImageTypeOptions()\t\r\n\t    \t\timageTypeOption.Resolution = 72\r\n\r\n\t    \tcollector = FilteredElementCollector(doc).OfClass(ViewFamilyType)\r\n\t    \tviewFamilyTypes = []\r\n\t    \tfor c in collector:\r\n\t    \t\tif c.ViewFamily == ViewFamily.Drafting:\r\n\t    \t\t\tviewFamilyTypes.append(c)\r\n\t    \tviewFamilyType = viewFamilyTypes[0]\r\n\t    \tTransactionManager.Instance.EnsureInTransaction(doc)\r\n\t    \tdraftView = ViewDrafting.Create(doc,viewFamilyType.Id)\r\n\t    \tdraftView.Name = chart1.Titles[0].Text + datetime.now().strftime(\" (%m/%d/%Y, %H.%M.%S)\")\r\n\t    \timagePath = tempfile.gettempdir() + \"\\\\chartImage.bmp\"\r\n\t    \tnewElement = clr.StrongBox[Element]()\r\n\t    \ttry:\r\n\t    \t\tdoc.Import(imagePath,importOptions,draftView,newElement)\t    \t\r\n\t    \texcept:\r\n\t    \t\timageTypeOption.SetPath(imagePath)\r\n\t    \t\timageType = ImageType.Create(doc,imageTypeOption)\r\n\t    \t\tplacementOptions = ImagePlacementOptions(XYZ(0,0,0),BoxPlacement.TopLeft)\r\n\t    \t\tImageInstance.Create(doc,draftView,imageType.Id,placementOptions)\t    \t\t\r\n\t    \tTransactionManager.Instance.TransactionTaskDone()\r\n\t    \t\t    \t\r\n\t    def chart_showLegend(self, sender, event ):\r\n\t    \tcb = sender\r\n\t    \tpanelcht = sender.Parent\r\n\t    \tchart1 = panelcht.GetChildAtPoint(Point(0,0))\r\n\t    \tif len(chart1.Legends) <= 1:\r\n\t    \t\tfor legend in chart1.Legends:\r\n\t    \t\t\tif cb.Checked:\r\n\t    \t\t\t\tlegend.Enabled = True\r\n\t    \t\t\telse:\r\n\t    \t\t\t\tlegend.Enabled = False\r\n\t    \telse:\r\n\t    \t\tif cb.Checked:\r\n\t    \t\t\tchart1.Legends[1].Enabled = True\r\n\t    \t\telse:\r\n\t    \t\t\tchart1.Legends[1].Enabled = False\r\n\t\t    \t\t\r\n\r\n\tclass mylistview(ListView):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.Values = []\r\n\r\n\tclass mytrackbar(TrackBar):\r\n\t\r\n\t\tdef __init__(self,startval,step):\r\n\t\t\tself.startval = startval\r\n\t\t\tself.step = step\r\n\r\n\tclass myDataGridView(DataGridView):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.startcell = {}\r\n\t\t\tself.endcell = {}\r\n\t\t\t\r\n\tclass mygroupbox(GroupBox):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself.Values = []\r\n\t\t\t\r\n\tclass myTextBox(TextBox):\r\n\t\r\n\t\tdef __init__(self):\r\n\t\t\tself._isNum = False\r\n\t\r\n\t\t\t\r\n\t#Form initialization\r\n\t\r\n\tform = MultiTextBoxForm()\r\n\txRatio = Screen.PrimaryScreen.Bounds.Width/1920\r\n\tif xRatio == 0:\r\n\t\txRatio = 1\r\n\tyRatio = Screen.PrimaryScreen.Bounds.Height/1080\r\n\tif yRatio == 0:\r\n\t\tyRatio = 1\r\n\tform.topmost()\t\r\n\tform.ControlBox = True\r\n\txlabel = 25 * xRatio\r\n\txinput = 150 * xRatio\r\n\tformy = 10 * yRatio\r\n\tif IN[8] * xRatio > (350 * xRatio):\tformwidth = IN[8] * xRatio\r\n\telse: formwidth = 350 * xRatio\r\n\tfields = []\r\n\terror = 0\r\n\t\r\n\t#Description \r\n\t\r\n\tif IN[3] != \"\":\r\n\t\tdes = Label()\r\n\t\tdes.Location = Point(xlabel,formy)\r\n\t\tdes.Font = Font(\"Arial\", 15,FontStyle.Bold)\t\t\r\n\t\tdes.AutoSize = True\r\n\t\tdes.MaximumSize = Size(formwidth - (2 * xlabel)*xRatio,0)\r\n\t\tdes.Text = IN[3]\r\n\t\tform.Controls.Add(des)\r\n\t\tformy = des.Bottom + (15*xRatio)\r\n\tformheaderheight = formy\r\n\t\r\n\t#Input form\r\n\t\r\n\t# Create a container panel for all inputs\r\n\tbody = Panel()\r\n\tbody.Location = Point(0,formy)\r\n\tbody.Width = formwidth - 15*xRatio\r\n\t\r\n\t\r\n\t# Process form inputs\r\n\tif isinstance(IN[0],list):\r\n\t\tinputtypes = IN[0]\r\n\telse:\r\n\t\tinputtypes = [IN[0]]\r\n\t# This definition is to handle the sorting of special characters\r\n\tdef remove_accents(input_str):\r\n\t    nfkd_form = unicodedata.normalize('NFKD', input_str)\r\n\t    only_ascii = nfkd_form.encode('ASCII', 'ignore')\r\n\t    return only_ascii\t\r\n\r\n\t#Adding Logo \r\n\t#default logo in case no input\t\r\n\tdef getImageByName(ImName):\r\n\t\tdynamo = Assembly.Load('DynamoCore')\r\n\t\tversion = str(dynamo.GetName().Version)[:3]\t\t\r\n\t\tdynPath = os.getenv('APPDATA')+\"\\\\Dynamo\\Dynamo Revit\\\\\" + version \r\n\t\troot = et.parse(dynPath + \"\\DynamoSettings.xml\").getroot()\r\n\t\tlogopaths = []\r\n\t\tfor child in root:\r\n\t\t\tif child.tag == \"CustomPackageFolders\":\r\n\t\t\t\tfor path in child:\r\n\t\t\t\t\tlogopaths.append(path.text + \"\\packages\\Data-Shapes\\extra\\\\\" + ImName)\r\n\t\t\t\t\tlogopaths.append(path.text + \"\\Data-Shapes\\extra\\\\\" + ImName)\r\n\t\tdeflogopath = \"\"\r\n\t\tfor path in logopaths:\r\n\t\t\tif deflogopath == \"\":\r\n\t\t\t\tif os.path.isfile(path):\r\n\t\t\t\t\tdeflogopath = path\r\n\t\t\t\t\ttry:\r\n\t\t\t\t\t\tima = Image.FromFile(deflogopath)\r\n\t\t\t\t\t\tbmp = Bitmap.FromFile(deflogopath)\r\n\t\t\t\t\t\treturn ima,bmp\r\n\t\t\t\t\texcept: \r\n\t\t\t\t\t\tpass\r\n\t\t\t\t\t\t\r\n\ttry:\r\n\t\tif IN[4] != '':\r\n\t\t\ttry:\r\n\t\t\t\tima = Image.FromFile(IN[4])\r\n\t\t\t\tbmp = Bitmap.FromFile(IN[4])\r\n\t\t\texcept:\r\n\t\t\t\tima = IN[4]\r\n\t\t\t\tbmp = IN[4]\r\n\r\n\t\telse :\r\n\t\t\t_ims = getImageByName(\"a.png\")\r\n\t\t\tima = _ims[0]\r\n\t\t\tbmp = _ims[1]\r\n\t\t\t\r\n\t\tlogo = Panel()\r\n\t\tif IN[6] == None:\r\n\t\t\txlogo = 20 * xRatio\r\n\t\t\tylogo = formy+ 10*yRatio\r\n\t\telse:\r\n\t\t\txlogo = 30 * xRatio\r\n\t\t\tylogo = formy\r\n\t\tsize = 110 * xRatio\r\n\t\tlogo = PictureBox()\r\n\t\tratio = (ima.Height)/(ima.Width)\r\n\t\th = float(ima.Height)\r\n\t\tw = float(ima.Width)\r\n\t\tratio = h/w\r\n\t\tlogo.Size = Size(size,size*ratio)\r\n\t\tscaledimage = Bitmap(size,size*ratio)\r\n\t\tgr = Graphics.FromImage(scaledimage)\r\n\t\tgr.DrawImage(ima,0,0,size,size*ratio)\r\n\t\tlogo.Image = ima\r\n\t\tlogo.SizeMode = PictureBoxSizeMode.Zoom\r\n\t\tform.Controls.Add(logo)\r\n\t\tlogo.Location = Point(xlogo,ylogo)\r\n\t\t\r\n\t\t\r\n\t\t#Setting icon \r\n\t\tthumb = bmp.GetThumbnailImage(64, 64, bmp.GetThumbnailImageAbort,IntPtr.Zero)\r\n\t\tthumb.MakeTransparent();\r\n\t\ticon = Icon.FromHandle(thumb.GetHicon())\r\n\t\tform.Icon = icon\r\n\r\n\texcept :\r\n\t\tlogo = Panel()\r\n\t\tlogo.Width = 110 * xRatio\r\n\t\tlogo.Height = 110 * yRatio\r\n\t\r\n\tdef addinput(formbody,inputs,starty,xinput,rightmargin,labelsize,importcolorselection):\r\n\t\ty = starty\r\n\t\tfor j in inputs:\r\n\t\t\tlabel = Label()\r\n\t\t\tlabel.Location = Point(xlabel,y+4*yRatio)\r\n\t\t\tlabel.AutoSize = True\r\n\t\t\tlabel.MaximumSize = Size(labelsize,0)\r\n\t\t\tif j.__class__.__name__ == 'listview' and j.element_count > 0:\r\n\t\t\t\tlabel.Text = j.inputname + '\\n(' + str(j.element_count) + ' element' + (\"s\" if j.element_count > 1 else \"\") + ')'\r\n\t\t\telse:\r\n\t\t\t\ttry:\r\n\t\t\t\t\tlabel.Text = j.inputname\r\n\t\t\t\texcept:\r\n\t\t\t\t\tpass\r\n\t\t\tformbody.Controls.Add(label)\r\n\t\r\n\t\t\tif j.__class__.__name__ == 'dropdown':\r\n\t\t\t\tcb = ComboBox()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tcb.Width = formwidth - rightmargin - xinput\r\n\t\t\t\t\tcb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcb.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\t\tcb.Location = Point(xlabel,y)\r\n\t\t\t\tcb.Sorted = j._sorted\r\n\t\t\t\t[cb.Items.Add(i) for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'defaultvalue' or i == 'highlight' or i == '_sorted' )]\r\n\t\t\t\tcb.Tag = j\r\n\t\t\t\tif j.defaultvalue != None:\r\n\t\t\t\t\tdefindex = [i for i in cb.Items].index([i for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'defaultvalue' or i == 'highlight' or i == '_sorted' )][j.defaultvalue])\r\n\t\t\t\t\tcb.SelectedIndex = defindex\r\n\t\t\t\tformbody.Controls.Add(cb)\r\n\t\t\t\tform.output.append(cb)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\t#CHARTS \r\n\t\t\tif j.__class__.__name__ == 'uipiechart':\t\t\t\t\t\r\n\t\t\t\tlabels = j.xseries\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\txseries = [j.xseries]\r\n\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tlabel = SmartLabelStyle()\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs[\"PieLabelStyle\"] = \"Inside\"\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Pie\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,len(xseries)):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Legend text of the points\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tfor p in s.Points: \r\n\t\t\t\t\t\tp.Font = originalFont\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\t\t\t\t\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tlegend1.IsTextAutoFit = True\r\n\t\t\t\tlegend1.LegendStyle = LegendStyle.Column\r\n\t\t\t\tchart1.Legends.Add(legend1)\r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Font = originalFont\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Font = originalFont\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 30)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uibarchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\thorizont = j.ishorizontal\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values,_horizont):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tif _horizont:\r\n\t\t\t\t\t\tsrs.ChartType = SeriesChartType.Bar\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tsrs.ChartType = SeriesChartType.Column\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i],horizont))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tlegend1.Docking = Docking.Right\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Font = originalFont\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uiradarchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Create a panel for buttons\r\n\t\t\t\tpanelCtrls = Panel()\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\tpanelCtrls.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\tautoheight = 250 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Height = autoheight + 73 * yRatio\r\n\t\t\t\tratio = (panelChart.Height)/(panelChart.Width)\r\n\t\t\t\th = float(panelChart.Height)\r\n\t\t\t\tw = float(panelChart.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\tchart_maxsize = formwidth - xlabel - rightmargin\r\n\t\t\t\tpanelChart.Size = Size(chart_maxsize,chart_maxsize*ratio)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Radar\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Dock = DockStyle.Fill\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelCtrls.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Show/Hide legend\"\r\n\t\t\t\tpanelCtrls.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Show/Hide labels\"\r\n\t\t\t\tpanelCtrls.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uipointchart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Point\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Change marker size\r\n\t\t\t\toriginalMarkerSize = 8\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tfor p in s.Points:\r\n\t\t\t\t\t\tp.MarkerSize = originalMarkerSize\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\tchartArea1 = chart1.ChartAreas[0]\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend2 = Legend()\r\n\t\t\t\t#Add legends to charts\r\n\t\t\t\tchart1.Legends.Add(legend1)\r\n\t\t\t\tchart1.Legends.Add(legend2)\r\n\t\t\t\t#Create Custom legend\r\n\t\t\t\tcustomevent = CustomizeLegendEventArgs(legend2.CustomItems)\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tlegend2.CustomItems.Add(LegendItem(s.Name.ToString(),s.Color,\"\"))\t\t\t\t\t\r\n\t\t\t\tdef chart_CustomizeLegend(sender, customevent ):\r\n\t\t\t\t\tchart1 = sender\r\n\t\t\t\t\t#legend1.Enabled = False\r\n\t\t\t\t\tlegend2.Name = \"Legend2\"\r\n\t\t\t\t\tfor s,it in zip(series,legend2.CustomItems):\r\n\t\t\t\t\t\tit.ImageStyle = LegendImageStyle.Marker\r\n\t\t\t\t\t\tit.MarkerStyle = s.MarkerStyle\r\n\t\t\t\t\t\tit.MarkerColor = s.Color\r\n\t\t\t\t\t\tit.BorderColor = Color.Transparent\r\n\t\t\t\t\t\tit.MarkerSize *= 1.3\r\n\t\t\t\tlegend1.Enabled = False\r\n\t\t\t\tlegend2.Font = originalFont\r\n\t\t\t\tlegend2.IsTextAutoFit = True\r\n\t\t\t\tlegend2.BackColor = formbody.BackColor\t\t\t\r\n\t\t\t\tchart1.CustomizeLegend += chart_CustomizeLegend\r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uilinechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Line\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uisplinechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\tpanelChart.Name = \"panelChart\"\r\n\t\t\t\t#Panels colors\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Spline\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.IsValueShownAsLabel = True\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tsrs.BorderWidth = 4\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Size = Size(panelChart.Width,panelChart.Width)\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.AutoSize = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t\r\n\t\t\t\t#Add a checkBox to show/hide labels\r\n\t\t\t\tcheckBox2 = CheckBox()\r\n\t\t\t\tcheckBox2.AutoCheck = True\r\n\t\t\t\tcheckBox2.Name = \"checkBox2\"\r\n\t\t\t\tcheckBox2.Text = \"Labels\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox2)\r\n\t\t\t\tcheckBox2.BringToFront()\r\n\t\t\t\tcheckBox2.Checked = True\r\n\t\t\t\tcheckBox2.Font = originalFont\r\n\t\t\t\tcheckBox2.AutoSize = True\r\n\t\t\t\tcheckBox2.Click += form.chart_showLabels\r\n\t\t\t\t\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uibubblechart':\r\n\t\t\t\tif isinstance(j.labels,list):\r\n\t\t\t\t\tlabels = j.labels\r\n\t\t\t\telse:\r\n\t\t\t\t\tlabels = [j.labels]\r\n\t\t\t\tinputcolors = j.inputcolors\r\n\t\t\t\tpyList = []\r\n\t\t\t\tif isinstance(j.xseries[0],list) and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.xseries[0],list) == False and isinstance(j.yseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.yseries)\r\n\t\t\t\t\txseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\txseries.append(j.xseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\tyseries = j.yseries\r\n\t\t\t\telif isinstance(j.yseries[0],list) == False and isinstance(j.xseries[0],list):\r\n\t\t\t\t\tnbOfSeries = len(j.xseries)\r\n\t\t\t\t\tyseries = []\r\n\t\t\t\t\ti = 1\r\n\t\t\t\t\twhile i <= nbOfSeries:\r\n\t\t\t\t\t\tyseries.append(j.yseries)\r\n\t\t\t\t\t\ti = i + 1\r\n\t\t\t\t\txseries = j.xseries\r\n\t\t\t\telse:\r\n\t\t\t\t\txseries = [j.xseries]\r\n\t\t\t\t\tyseries = [j.yseries]\r\n\t\t\t\t\tnbOfSeries = 1\r\n\t\t\t\tif inputcolors is not None:\r\n\t\t\t\t\tcolorBool = True\r\n\t\t\t\t\tfor color in inputcolors:\r\n\t\t\t\t\t\tpyList.append(Color.FromArgb(color.Red,color.Green,color.Blue))\r\n\t\t\t\t\twfColor = Array[Color](pyList)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcolorBool = False\r\n\t\t\t\t#Set a global Font code\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\toriginalFont = Font(fontFam,8)\r\n\t\t\t\t#Chart created and Panel to host the chart\r\n\t\t\t\tchart1 = Chart()\r\n\t\t\t\tpanelChart = Panel()\r\n\t\t\t\t#panelChart.Padding = Padding(1) To create a black border\r\n\t\t\t\tchart1.BackColor = formbody.BackColor\r\n\t\t\t\tpanelChart.BackColor = Color.Transparent\r\n\t\t\t\t#PanelChart location\r\n\t\t\t\tpanelChart.Width = formwidth  - rightmargin - xlabel\r\n\t\t\t\tpanelChart.Location = Point(xlabel,y + 30)\t\t\t\t\r\n\t\t\t\tautoheight = 250 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Height = autoheight + 73 * yRatio\r\n\t\t\t\tratio = (panelChart.Height)/(panelChart.Width)\r\n\t\t\t\th = float(panelChart.Height)\r\n\t\t\t\tw = float(panelChart.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\tchart_maxsize = formwidth - xlabel - rightmargin\r\n\t\t\t\tpanelChart.Size = Size(chart_maxsize,chart_maxsize*ratio)\t\t\t\t\r\n\t\t\t\t#Chart colors palette\r\n\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tif colorBool:\r\n\t\t\t\t\tchart1.PaletteCustomColors = wfColor\r\n\t\t\t\telse:\r\n\t\t\t\t\tchart1.Palette =  ChartColorPalette.None\r\n\t\t\t\tchart1.Series.Clear()\r\n\t\t\t\t#Series created\r\n\t\t\t\tdef createSeries(seriesName,_keys,_values):\r\n\t\t\t\t\tsrs = Series()\r\n\t\t\t\t\tsrs.Name = seriesName\r\n\t\t\t\t\tsrs.ChartType = SeriesChartType.Bubble\r\n\t\t\t\t\tsrs.ToolTip = \"Percent: #PERCENT\"\r\n\t\t\t\t\tsrs.Font = originalFont\r\n\t\t\t\t\tfor i,j in zip(_keys,_values):\r\n\t\t\t\t\t\tsrs.Points.AddXY(i,j)\r\n\t\t\t\t\treturn srs\r\n\t\t\t\t#Create series\r\n\t\t\t\tseries = []\r\n\t\t\t\tfor i in range(0,nbOfSeries):\r\n\t\t\t\t\tseries.append(createSeries(labels[i],xseries[i],yseries[i]))\r\n\t\t\t\t#Add series to chart\r\n\t\t\t\tfor s in series:\r\n\t\t\t\t\tchart1.Series.Add(s)\r\n\t\t\t\t#Refresh the Chart\r\n\t\t\t\tchart1.Invalidate()\r\n\t\t\t\t#Create a ChartArea and add it to the chart\r\n\t\t\t\tchartArea1 = ChartArea()\r\n\t\t\t\tchartArea1.BackColor = formbody.BackColor\r\n\t\t\t\tchartArea1.Name = \"ChartArea1\"\r\n\t\t\t\tchartArea1.AxisX.Title = j.xaxislabel\r\n\t\t\t\tchartArea1.AxisY.Title = j.yaxislabel\r\n\t\t\t\tchart1.ChartAreas.Add(chartArea1)\r\n\t\t\t\t#Create a Legend and add it to the chart\r\n\t\t\t\tlegend1 = Legend()\r\n\t\t\t\tlegend1.BackColor = formbody.BackColor\r\n\t\t\t\tlegend1.Font = originalFont\r\n\t\t\t\tlegend1.Name = \"Legend1\"\r\n\t\t\t\tchart1.Legends.Add(legend1) \r\n\t\t\t\t#Initialize the chart and its properties\r\n\t\t\t\tchart1.BeginInit()\r\n\t\t\t\tchart1.Dock = DockStyle.Fill\r\n\t\t\t\tchart1.AntiAliasing = AntiAliasingStyles.All\r\n\t\t\t\tfontFam = FontFamily(\"Segoe UI Symbol\")\r\n\t\t\t\ttitleFont = Font(fontFam,10,FontStyle.Bold)\r\n\t\t\t\ttitle = Title()\r\n\t\t\t\ttitle.Text = j.chartname\r\n\t\t\t\ttitle.Alignment = ContentAlignment.TopLeft\r\n\t\t\t\ttitle.Font = titleFont\r\n\t\t\t\tchart1.Titles.Add(title)\r\n\t\t\t\t#Add a button to push on view\r\n\t\t\t\tbt = Button()\r\n\t\t\t\tbt.Tag = \"Push the chart on a view in Revit\"\r\n\t\t\t\tbt.Text = \"Push on a draft view\"\r\n\t\t\t\tbt.Height = 20 * yRatio\r\n\t\t\t\tbt.Width = 140 * yRatio\t\t\t\r\n\t\t\t\tpanelChart.Controls.Add(bt)\r\n\t\t\t\tbt.BringToFront()\r\n\t\t\t\tbt.Click += form.imageexport\r\n\t\t\t\t#Add a checkBox to show/hide legend\r\n\t\t\t\tcheckBox1 = CheckBox()\r\n\t\t\t\tcheckBox1.AutoCheck = True\r\n\t\t\t\tcheckBox1.Name = \"checkBox1\"\r\n\t\t\t\tcheckBox1.Text = \"Show/Hide legend\"\r\n\t\t\t\tpanelChart.Controls.Add(checkBox1)\r\n\t\t\t\tcheckBox1.BringToFront()\r\n\t\t\t\tcheckBox1.Checked = True\r\n\t\t\t\tcheckBox1.Click += form.chart_showLegend\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Size = Size(panelChart.Width, panelChart.Width + checkBox2.Height + 20)\r\n\t\t\t\t#Add chart to panel\r\n\t\t\t\tpanelChart.Controls.Add(chart1)\r\n\t\t\t\tchart1.Location = Point(0,0)\r\n\t\t\t\tbt.Location = Point(panelChart.Width - bt.Width, panelChart.Width + 15)\r\n\t\t\t\tcheckBox1.Location = Point(panelChart.Width - bt.Width - 80, panelChart.Width + 15)\r\n\t\t\t\tcheckBox2.Location = Point(panelChart.Width - bt.Width - 160, panelChart.Width + 15)\r\n\t\t\t\tformbody.Controls.Add(panelChart)\r\n\t\t\t\t\r\n\t\t\t\ty = panelChart.Bottom + 25 * yRatio\r\n\r\n\t\t\telif j.__class__.__name__ == 'uitreeview':\r\n\t\t\t\ttv = TreeView()\r\n\t\t\t\ttv.CheckBoxes = True\r\n\t\t\t\ttitles = j._hastitles\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttv.Width = formwidth - rightmargin - xinput\r\n\t\t\t\t\ttv.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttv.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\t\ttv.Location = Point(xlabel,y)\r\n\t\t\t\ttv.Height = j._height\r\n\t\t\t\tdef treeIterationTitle(control, input):\r\n\t\t\t\t\tif isinstance(input,list):\r\n\t\t\t\t\t\ttry:\r\n\t\t\t\t\t\t\tcurrentNode = TreeNode(remove_accents(input[0].ToString()))\r\n\t\t\t\t\t\t\tcurrentNode.Tag = \"\"\r\n\t\t\t\t\t\t\tinput.pop(0)\r\n\t\t\t\t\t\texcept:\r\n\t\t\t\t\t\t\tcurrentNode = TreeNode(control.Text +\".\"+ str(len(control.Nodes)+1))\r\n\t\t\t\t\t\t\tcurrentNode.Tag = \"\"\r\n\t\t\t\t\t\tcontrol.Nodes.Add(currentNode)\r\n\t\t\t\t\t\tfor i in input:\r\n\t\t\t\t\t\t\ttreeIterationTitle(currentNode, i)\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\titem = TreeNode(remove_accents(input.ToString()))\r\n\t\t\t\t\t\titem.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(item)\t\r\n\t\t\t\tdef treeIteration(control, input):\r\n\t\t\t\t\tif isinstance(input,list):\r\n\t\t\t\t\t\tcurrentNode = TreeNode(control.Text +\".\"+ str(len(control.Nodes)+1))\r\n\t\t\t\t\t\tcurrentNode.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(currentNode)\r\n\t\t\t\t\t\tfor i in input:\r\n\t\t\t\t\t\t\ttreeIteration(currentNode, i)\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\titem = TreeNode(remove_accents(input.ToString()))\r\n\t\t\t\t\t\titem.Tag = input\r\n\t\t\t\t\t\tcontrol.Nodes.Add(item)\r\n\t\t\t\tcurrentNode = TreeNode(\"List1\")\r\n\t\t\t\tcurrentNode.Expand()\t\t\t\t\r\n\t\t\t\tif titles:\r\n\t\t\t\t\ttv.Nodes.Add(currentNode)\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tfor dl in j.datalist:\r\n\t\t\t\t\t\ttreeIterationTitle(currentNode,dl)\t\r\n\t\t\t\telse:\r\n\t\t\t\t\ttv.Nodes.Add(currentNode)\t\t\t\t\t\t\t\t\r\n\t\t\t\t\tfor dl in j.datalist:\r\n\t\t\t\t\t\ttreeIteration(currentNode,dl)\r\n\t\t\t\ttv.AfterCheck += form.CheckChildren\t\t\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(tv)\r\n\t\t\t\tform.output.append(tv)\r\n\t\t\t\ty = tv.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'listview':\r\n\t\t\t\tlvp = Panel()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tlvp.Location = Point(xinput,y)\r\n\t\t\t\t\tlvp.Width = formwidth - rightmargin - xinput\t\t\t\t\r\n\t\t\t\telif j.inputname == \"\" and j.element_count != 0:\r\n\t\t\t\t\tlvp.Location = Point(xlabel,y+35*yRatio)\r\n\t\t\t\t\tlvp.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\telse : \r\n\t\t\t\t\tlvp.Location = Point(xlabel,y)\r\n\t\t\t\t\tlvp.Width = formwidth - rightmargin - xlabel\t\t\t\t\r\n\t\t\t\tlvp.Height = j.height * yRatio + 25 * yRatio\r\n\t\t\t\t#Creating the listview box\r\n\t\t\t\tlv = mylistview()\r\n\t\t\t\tlv.Scrollable = True\r\n\t\t\t\tdummyheader = ColumnHeader()\r\n\t\t\t\tdummyheader.Text = \"\"\r\n\t\t\t\tdummyheader.Name = \"\"\r\n\t\t\t\tdummyheader.Width = -2 * xRatio\r\n\t\t\t\tlv.HeaderStyle = ColumnHeaderStyle.None\r\n\t\t\t\tlv.Columns.Add(dummyheader)\r\n\t\t\t\tlv.Values = j\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tlv.CheckBoxes = True\r\n\t\t\t\tlv.View = vi.Details\r\n\t\t\t\tlvItems =  [i for i in j.keys() if not (i == 'inputname' or i == 'height' or i == 'highlight' or i == 'display_mode' or i == 'element_count' or i == 'default_values' or i == 'sorted' or i == 'showId')]\r\n\t\t\t\tif j.sorted :\r\n\t\t\t\t\tlvItems = sorted(lvItems,key = remove_accents)\r\n\t\t\t\telse:\r\n\t\t\t\t\tpass\r\n\t\t\t\t[lv.Items.Add(i) for i in lvItems]\r\n\t\t\t\tlv.Location = Point(0,0)\r\n\t\t\t\tif j.inputname != \"\" and j.element_count != 0:\r\n\t\t\t\t\tlv.Width = formwidth - rightmargin - xinput\r\n\t\t\t\telif j.inputname != \"\" and j.element_count == 0:\r\n\t\t\t\t\tlv.Width = formwidth - rightmargin - xinput\r\n\t\t\t\telse:\r\n\t\t\t\t\tlv.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\tlv.Height = j.height * yRatio\r\n\t\t\t\tlv.Scrollable = True\r\n\t\t\t\tlv.ItemCheck += form.updateallnone\r\n\t\t\t\tfor i in j.default_values:\r\n\t\t\t\t\tdefInd = lvItems.index([x for x in j.keys() if not (x == 'inputname' or x == 'height' or x == 'highlight' or x == 'display_mode' or x == 'element_count' or x == 'default_values' or x == 'sorted' or x == 'showId')][i])\r\n\t\t\t\t\tlv.Items[defInd].Checked = True\r\n\t\t\t\t#Click listview items to hilight and center in appropriate view\r\n\t\t\t\tif j.highlight :\r\n\t\t\t\t\tlv.MouseDown += form.setviewforelement\r\n\t\t\t\t\tlv.MouseUp += form.zoomcenter\r\n\t\t\t\t\titems = list(lv.Items)\r\n\t\t\t\t\tlv.FullRowSelect = True\r\n\t\t\t\t\tdel items[::2]\r\n\t\t\t\t\tfor item in items:\r\n\t\t\t\t\t\titem.BackColor = Color.FromArgb(230,243,255)\r\n\t\t\t\t#Creating select all and select none radiobuttons\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\trball = RadioButton()\r\n\t\t\t\t\trball.Location = Point(0,(j.height+5)*yRatio)\r\n\t\t\t\t\trball.Width = 100 * xRatio\r\n\t\t\t\t\trball.Height = 20 * yRatio\r\n\t\t\t\t\trball.Font = SystemFonts.DefaultFont\r\n\t\t\t\t\trball.Text = \"Select all\"\r\n\t\t\t\t\trball.Click += form.selectall\r\n\t\t\t\t\trbnone = RadioButton()\r\n\t\t\t\t\trbnone.Location = Point(105 * xRatio,(j.height+5)*yRatio)\r\n\t\t\t\t\trbnone.Width = 100 * xRatio\r\n\t\t\t\t\trbnone.Height = 20 * yRatio\r\n\t\t\t\t\trbnone.Font = SystemFonts.DefaultFont\r\n\t\t\t\t\trbnone.Text = \"Select none\"\t\t\t\r\n\t\t\t\t\trbnone.Click += form.selectnone\t\t\t\r\n\t\t\t\t#Adding controls to panel\r\n\t\t\t\tlvp.Controls.Add(lv)\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tlvp.Controls.Add(rball)\r\n\t\t\t\t\tlvp.Controls.Add(rbnone)\r\n\t\t\t\tformbody.Controls.Add(lvp)\r\n\t\t\t\tif not j.display_mode:\r\n\t\t\t\t\tform.output.append(lv)\r\n\t\t\t\ty = lvp.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uitext':\r\n\t\t\t\ttb = myTextBox()\r\n\t\t\t\ttb.Text = j.defaultvalue\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttb.Width = formwidth  - rightmargin - xinput\r\n\t\t\t\t\ttb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttb.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\t\ttb.Location = Point(xlabel,y)\r\n\t\t\t\tif j._isnum:\r\n\t\t\t\t\ttb._isNum = True\r\n\t\t\t\t\ttb.KeyPress += form.numsOnly\r\n\t\t\t\tformbody.Controls.Add(tb)\r\n\t\t\t\tformbody.Controls.Add(label)\r\n\t\t\t\tform.output.append(tb)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uimultilinetext':\r\n\t\t\t\ttb = myTextBox()\r\n\t\t\t\ttb.Text = j.defaultvalue\r\n\t\t\t\ttb.Multiline  = True\r\n\t\t\t\ttb.Height = j._height * yRatio\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\ttb.Width = formwidth  - rightmargin - xinput\r\n\t\t\t\t\ttb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\ttb.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\t\ttb.Location = Point(xlabel,y)\r\n\t\t\t\tif j._isnum:\r\n\t\t\t\t\ttb._isNum = True\r\n\t\t\t\t\ttb.KeyPress += form.numsOnly\r\n\t\t\t\tformbody.Controls.Add(tb)\r\n\t\t\t\tformbody.Controls.Add(label)\r\n\t\t\t\tform.output.append(tb)\r\n\t\t\t\ty = tb.Bottom + 25 * yRatio\t\t\t\t\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'tableview':\r\n\t\t\t\t#Creating grouping panel\r\n\t\t\t\ttvp = Panel()\r\n\t\t\t\ttvp.Location = Point(xlabel,y)\r\n\t\t\t\ttvp.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\tif (50 + len(j.dataList) * 15) * yRatio > 800 * yRatio:\r\n\t\t\t\t\tautoheight = 800 * yRatio\r\n\t\t\t\telse:\r\n\t\t\t\t\tautoheight = (50 + len(j.dataList) * 15\t) * yRatio\t\t\t\r\n\t\t\t\ttvp.Height = autoheight + 73 * yRatio\r\n\t\t\t\t#Creating title\r\n\t\t\t\ttitlep = Label()\r\n\t\t\t\ttitlep.Text = j._tabletitle\r\n\t\t\t\ttitlep.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\ttitlep.BackColor = Color.FromArgb(153,180,209)\r\n\t\t\t\ttitlep.Font = Font(\"Arial\", 11, FontStyle.Bold)\r\n\t\t\t\ttitlep.TextAlign = ContentAlignment.MiddleLeft\r\n\t\t\t\ttitlep.BorderStyle = BorderStyle.FixedSingle\r\n\t\t\t\ttitlep.Location = Point(0,0)\r\n\t\t\t\ttvp.Controls.Add(titlep)\r\n\t\t\t\t#Creating data structure\r\n\t\t\t\tdg = myDataGridView()\r\n\t\t\t\t#dg.SelectionMode = DataGridViewSelectionMode.CellSelect\r\n\t\t\t\tdg.EnableHeadersVisualStyles = False\t\t\t\t\r\n\t\t\t\tdt = DataTable()\r\n\t\t\t\tdl = j.dataList\r\n\t\t\t\tfor i in range(len(dl[0])):\r\n\t\t\t\t\tif j._hasTitle:\r\n\t\t\t\t\t\tdt.Columns.Add(remove_accents(dl[0][i].ToString()))\r\n\t\t\t\t\t\trngstart = 1\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tdt.Columns.Add(\"Column \" + str(i))\r\n\t\t\t\t\t\trngstart = 0\t\t\t\t\t\t\r\n\t\t\t\tfor rindex in range(rngstart,len(dl)):\r\n\t\t\t\t\trow = dt.NewRow()\r\n\t\t\t\t\tfor i in range(len(dl[rindex])):\r\n\t\t\t\t\t\trow[i] = dl[rindex][i]\r\n\t\t\t\t\tdt.Rows.Add(row)\t\t\t\t\t\t\r\n\t\t\t\tdg.Tag = j._hasTitle\t\t\t\t\r\n\t\t\t\tdg.DataSource = dt\r\n\t\t\t\tdg.ClipboardCopyMode = DataGridViewClipboardCopyMode.EnableWithAutoHeaderText\r\n\t\t\t\tdg.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.AllCells\r\n\t\t\t\tdg.Width = formwidth - rightmargin - xlabel\r\n\t\t\t\tdg.Location = Point(0,23 * yRatio)\r\n\t\t\t\tdg.Height = autoheight\r\n\t\t\t\t#Creatin Excel like drag copy functionalities\r\n\t\t\t\tdg.CellMouseDown += form.startCell\r\n\t\t\t\tdg.CellMouseUp += form.endCell\r\n\t\t\t\t#dg.MouseDown += form.startRowDrag\r\n\t\t\t\t#dg.MouseUp = \t\t\t\r\n\t\t\t\ttvp.Controls.Add(dg)\t\t\t\r\n\t\t\t\ty = tvp.Bottom + 15 * yRatio\r\n\t\t\t\t#Adding export to excel button\r\n\t\t\t\tex = Button()\r\n\t\t\t\tex.Tag = [j._hasTitle , j._openExcel , j._showinfo , j._fileInfo]\r\n\t\t\t\ttry:\r\n\t\t\t\t\texpImage = getImageByName(\"exp.png\")[0]\r\n\t\t\t\t\tex.BackgroundImage = expImage\r\n\t\t\t\texcept:\r\n\t\t\t\t\tex.Text = \"Export\"\t\t\t\t\t\r\n\t\t\t\tex.Width = 60 * xRatio\r\n\t\t\t\tex.Height = 30 * yRatio\r\n\t\t\t\tex.Location = Point(formwidth - 125 * xRatio ,dg.Bottom + 15 * yRatio)\t\t\t\t\t\r\n\t\t\t\ttvp.Controls.Add(ex)\r\n\t\t\t\tex.Click += form.exportToExcel\r\n\t\t\t\t#Adding filepath export textbox\r\n\t\t\t\tfilepathtb = TextBox()\r\n\t\t\t\tfilepathtb.Text = \"ExportFileName\"\r\n\t\t\t\tfilepathtb.Location = Point(0 ,dg.Bottom + 20 * yRatio)\r\n\t\t\t\tfilepathtb.Width = formwidth - xlabel - 125 * xRatio\r\n\t\t\t\ttvp.Controls.Add(filepathtb)\r\n\t\t\t\t#Adding copy to clipboard button\r\n\t\t\t\tcb = Button()\r\n\t\t\t\t#Adding panel to form\r\n\t\t\t\tformbody.Controls.Add(tvp)\r\n\t\t\t\tform.output.append(dg)\r\n\t\t\t\ty = tvp.Bottom + 25 * yRatio\r\n\t\t\t\tform.topmost()\r\n\t\t\telif j.__class__.__name__ == 'uitextnote':\r\n\t\t\t\tgb = GroupBox()\r\n\t\t\t\tgb.Text = j.title\r\n\t\t\t\tgb.Parent = form\r\n\t\t\t\tgb.SendToBack()\r\n\t\t\t\tgb.BackColor = Color.Transparent\r\n\t\t\t\tgb.Location = Point(xlabel, y)\r\n\t\t\t\ttn = Label()\r\n\t\t\t\ttn.Location = Point(xlabel,18 * yRatio)\r\n\t\t\t\ttn.AutoSize = True\r\n\t\t\t\ttn.MaximumSize = Size(formwidth - rightmargin - 50 * xRatio,0)\r\n\t\t\t\ttn.Text = j.textnote\r\n\t\t\t\ttn.BringToFront()\r\n\t\t\t\tgb.Controls.Add(tn)\r\n\t\t\t\tgb.Size = Size(formwidth  - rightmargin - 25 * xRatio, tn.Bottom-tn.Top+25 * yRatio)  \r\n\t\t\t\ty = gb.Bottom + 25 * xRatio\r\n\t\t\t\tformbody.Controls.Add(gb)\r\n\t\t\telif j.__class__.__name__ == 'uibool':\r\n\t\t\t\tyn = CheckBox()\r\n\t\t\t\tyn.Width = formwidth - xinput - rightmargin + 10 * xRatio\r\n\t\t\t\tyn.Location = Point(xinput,y)\r\n\t\t\t\tyn.Text = j.booltext\r\n\t\t\t\tg = yn.CreateGraphics()\r\n\t\t\t\tsizetext = g.MeasureString(yn.Text,yn.Font, formwidth - xinput - rightmargin -20 * xRatio)\r\n\t\t\t\theighttext = sizetext.Height\r\n\t\t\t\tyn.Height = heighttext + 15 * yRatio\r\n\t\t\t\tyn.Checked = j.defaultvalue\r\n\t\t\t\tformbody.Controls.Add(yn)\r\n\t\t\t\tform.output.append(yn)\r\n\t\t\t\ty = yn.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiradio':\r\n\t\t\t\tyrb = 20 * yRatio\r\n\t\t\t\trbs = []\r\n\t\t\t\trbgroup = mygroupbox()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\trbgroup.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\trbgroup.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\trbgroup.Width = formwidth - xlabel - rightmargin\r\n\t\t\t\t\trbgroup.Location = Point(xlabel,y)\t\t\t\t\t\r\n\t\t\t\trbgroup.Tag = j\r\n\t\t\t\trbcounter = 0\r\n\t\t\t\tfor key in j.keys():\r\n\t\t\t\t\tif key != 'inputname' and key != 'defaultvalue':\r\n\t\t\t\t\t\trb = RadioButton()\r\n\t\t\t\t\t\trb.Text = key \r\n\t\t\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\t\t\trb.Width = formwidth - xinput - rightmargin - 35 * xRatio\r\n\t\t\t\t\t\telse:\r\n\t\t\t\t\t\t\trb.Width = formwidth - xlabel - rightmargin - 35 * xRatio\r\n\t\t\t\t\t\trb.Location = Point(20 * xRatio,yrb)\r\n\t\t\t\t\t\tif rbcounter == j.defaultvalue:\r\n\t\t\t\t\t\t\trb.Checked = True\r\n\t\t\t\t\t\trbgroup.Controls.Add(rb)\r\n\t\t\t\t\t\tg = rb.CreateGraphics()\r\n\t\t\t\t\t\tsizetext = g.MeasureString(key,rb.Font, formwidth - xinput - 90*xRatio)\r\n\t\t\t\t\t\theighttext = sizetext.Height\r\n\t\t\t\t\t\trb.Height = heighttext + 15 * yRatio\r\n\t\t\t\t\t\tybot = rb.Bottom\r\n\t\t\t\t\t\tyrb += heighttext + 12 * yRatio\r\n\t\t\t\t\t\trbcounter += 1\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tpass\r\n\t\t\t\trbgroup.Height = ybot + 20 * yRatio\r\n\t\t\t\t[rbgroup.Controls.Add(rb) for rb in rbs]\r\n\t\t\t\tformbody.Controls.Add(rbgroup)\r\n\t\t\t\tform.output.append(rbgroup)\r\n\t\t\t\ty = rbgroup.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__  == 'uifilepath':\r\n\t\t\t\tfp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tfp.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tfp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tfp.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tfp.Location = Point(xlabel,y)\t\t\t\t\t\r\n\t\t\t\tfp.Tag = j.defaultvalue\r\n\t\t\t\tif not j.defaultvalue == \"FilePath\":\r\n\t\t\t\t\tfp.Tag = j.defaultvalue\r\n\t\t\t\t\tfp.MouseHover += form.showtooltip\t\r\n\t\t\t\tfp.Text = j.buttontext\r\n\t\t\t\tfp.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(fp)\r\n\t\t\t\tfp.Click += form.openfile\r\n\t\t\t\tform.output.append(fp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uidirectorypath':\r\n\t\t\t\tdp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tdp.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tdp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tdp.Location = Point(xlabel,y)\t\t\t\t\r\n\t\t\t\tdp.Tag = j.defaultvalue\r\n\t\t\t\tdp.Text = j.buttontext\r\n\t\t\t\tif not j.defaultvalue == \"DirectoryPath\":\r\n\t\t\t\t\tdp.Tag = j.defaultvalue\r\n\t\t\t\t\tdp.MouseHover += form.showtooltip\r\n\t\t\t\tdp.Text = j.buttontext\t\r\n\t\t\t\tdp.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(dp)\r\n\t\t\t\tdp.Click += form.opendirectory\r\n\t\t\t\tform.output.append(dp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.pickobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click  += form.pickobject\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectautocadelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.pickautocadobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click += form.pickautocadobject\t\t\t\t\t\t\t\t\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uiselectOrderedelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tse.Click  += form.pickobjectsordered\r\n\t\t\t\tform.output.append(se)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectlinkedelements':\r\n\t\t\t\tse = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tse.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tse.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tse.Location = Point(xlabel,y)\r\n\t\t\t\tse.Text = j.buttontext\r\n\t\t\t\tse.Height = 20 * yRatio\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(se)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tse.Click += form.picklinkedobjects\r\n\t\t\t\telse:\r\n\t\t\t\t\tse.Click  += form.picklinkedobject\r\n\t\t\t\tform.output.append(se)\r\n\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectlinkedelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tsec.Click += form.picklinkedobjectsofcat\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Click += form.picklinkedobjectofcat\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tif j.multi == False:\r\n\t\t\t\t\tsec.Click += form.pickobjectsofcat\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Click += form.pickobjectofcat\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectOrderedelementsofcat':\r\n\t\t\t\tsec = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsec.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsec.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsec.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsec.Location = Point(xlabel,y)\r\n\t\t\t\tsec.Text = j.buttontext\r\n\t\t\t\tsec.Tag = j.category\r\n\t\t\t\tsec.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sec)\r\n\t\t\t\tsec.Click += form.pickobjectsofcatordered\r\n\t\t\t\tform.output.append(sec)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectfaces':\r\n\t\t\t\tsf = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsf.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsf.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsf.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsf.Location = Point(xlabel,y)\r\n\t\t\t\tsf.Text = j.buttontext\r\n\t\t\t\tsf.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sf)\r\n\t\t\t\tsf.Click += form.pickfaces\r\n\t\t\t\tform.output.append(sf)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectpointsonface':\r\n\t\t\t\tspf = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tspf.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tspf.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tspf.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tspf.Location = Point(xlabel,y)\r\n\t\t\t\tspf.Text = j.buttontext\r\n\t\t\t\tspf.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(spf)\r\n\t\t\t\tspf.Click += form.pickpointsonface\r\n\t\t\t\tform.output.append(spf)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiselectedges':\r\n\t\t\t\tsed = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsed.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tsed.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tsed.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tsed.Location = Point(xlabel,y)\r\n\t\t\t\tsed.Text = j.buttontext\r\n\t\t\t\tsed.Height = 20 * yRatio\r\n\t\t\t\tformbody.Controls.Add(sed)\r\n\t\t\t\tsed.Click += form.pickedges\r\n\t\t\t\tform.output.append(sed)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\t\t\r\n\t\t\telif j.__class__.__name__ == 'uislider':\r\n\t\t\t\tgb = Panel()\r\n\t\t\t\tif j.defaultvalue == '':\r\n\t\t\t\t\tdefval = j.minimum\r\n\t\t\t\telse:\r\n\t\t\t\t\tdefval = j.defaultvalue\r\n\t\t\t\tsl = mytrackbar(j.minimum,j.step)\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tgb.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tgb.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tgb.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tgb.Location = Point(xlabel,y)\r\n\t\t\t\tgb.Height = 40 * yRatio\r\n\t\t\t\tsl.Minimum = 0\r\n\t\t\t\tsl.Maximum = (j.maximum-j.minimum)/j.step\r\n\t\t\t\tsl.Value = (defval - j.minimum) / j.step\r\n\t\t\t\tsl.TickFrequency = (j.maximum-j.minimum)/j.step/10\r\n\t\t\t\tsl.Location = Point(40 * xRatio,0)\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tsl.Width = formwidth - xinput - rightmargin - 35 * xRatio\r\n\t\t\t\telse:\r\n\t\t\t\t\tsl.Width = formwidth - xlabel -rightmargin - 35 * xRatio\r\n\t\t\t\tgb.Controls.Add(sl)\r\n\t\t\t\tform.output.append(sl)\r\n\t\t\t\tdisplabel = Label()\r\n\t\t\t\tdisplabel.Width = 50 * xRatio\r\n\t\t\t\tdisplabel.Location = Point(0,5 * yRatio)\r\n\t\t\t\tdisplabel.Text = str(defval)\r\n\t\t\t\tdisplabel.Height = 30 * yRatio\r\n\t\t\t\tdisplabel.BringToFront()\r\n\t\t\t\tgb.Controls.Add(displabel)\t\r\n\t\t\t\tformbody.Controls.Add(gb)\t\t\t\r\n\t\t\t\tsl.Scroll += form.scroll\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiimage':\r\n\t\t\t\tpic = Image.FromFile(j.image)\r\n\t\t\t\tim = PictureBox()\r\n\t\t\t\tif j.showborder:\r\n\t\t\t\t\tim.BorderStyle = BorderStyle.Fixed3D\r\n\t\t\t\telse:\r\n\t\t\t\t\tim.BorderStyle = BorderStyle.None\r\n\t\t\t\tratio = (pic.Height)/(pic.Width)\r\n\t\t\t\th = float(pic.Height)\r\n\t\t\t\tw = float(pic.Width)\r\n\t\t\t\tratio = h/w\r\n\t\t\t\timage_maxsize = formwidth - xlabel - rightmargin\r\n\t\t\t\tim.Size = Size(image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tscaledimage = Bitmap(image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tgr = Graphics.FromImage(scaledimage)\r\n\t\t\t\tgr.DrawImage(pic,0,0,image_maxsize,image_maxsize*ratio)\r\n\t\t\t\tim.Image = pic\r\n\t\t\t\tim.SizeMode = PictureBoxSizeMode.Zoom\r\n\t\t\t\tformbody.Controls.Add(im)\r\n\t\t\t\tim.Location = Point(25 * xRatio,y+25*yRatio)\r\n\t\t\t\ty = im.Bottom + 25 * yRatio\r\n\t\t\r\n\t\t\telif j.__class__.__name__ == 'uicolorpick' and importcolorselection == 0:\r\n\t\t\t\tcp = Button()\r\n\t\t\t\tif j.inputname != \"\":\r\n\t\t\t\t\tcp.Width = formwidth - xinput - rightmargin\r\n\t\t\t\t\tcp.Location = Point(xinput,y)\r\n\t\t\t\telse:\r\n\t\t\t\t\tcp.Width = formwidth - xlabel - rightmargin\t\t\r\n\t\t\t\t\tcp.Location = Point(xlabel,y)\r\n\t\t\t\tcp.Text = j.buttontext\r\n\t\t\t\tcp.Height = 30 * yRatio\r\n\t\t\t\tformbody.Controls.Add(cp)\r\n\t\t\t\tcp.Click += form.colorpicker\r\n\t\t\t\tform.output.append(cp)\r\n\t\t\t\ty = label.Bottom + 25 * yRatio\t\r\n\t\t\telif j.__class__.__name__ == 'uicolorpick' and importcolorselection == 1:\r\n\t\t\t\timportcolorselection = 2\r\n\t\t\telif j.__class__.__name__ == 'uigroup':\r\n\t\t\t\tgrouppanel = GroupBox()\r\n\t\t\t\tgrouppanel.Text = j.groupname\r\n\t\t\t\tgrouppanel.Location = Point(xlabel,y)\r\n\t\t\t\tgrouppanel.Width = formwidth - 65 * xRatio\r\n\t\t\t\t#recursive implementation of the definition to process grouped inputs\r\n\t\t\t\taddinput(grouppanel,j.inputgroup,25*yRatio,xinput-25*xRatio,80 * xRatio,90 * xRatio,importcolorselection)\r\n\t\t\t\tformbody.Controls.Add(grouppanel)\r\n\t\t\t\ty = grouppanel.Bottom + 25 * yRatio\r\n\t\t\telif j.__class__.__name__ == 'uiconditional':\r\n\t\t\t\tgrouppanelcond = GroupBox()\r\n\t\t\t\tgrouppanelcond.Location = Point(xlabel,y)\r\n\t\t\t\tgrouppanelcond.Width = formwidth - 65 * xRatio\t\r\n\t\t\t\tform.output.append(grouppanelcond)\t\t\t\t\r\n\t\t\t\t#recursive implementation of the definition to process conditional groups of inputs\r\n\t\t\t\tpanlist = []\r\n\t\t\t\trblist = []\r\n\t\t\t\typ = 25 * yRatio\r\n\t\t\t\txrb = 25 * xRatio\r\n\t\t\t\tfor i,d in zip(j._Conditions,j._GroupedInputs):\t\r\n\t\t\t\t\trb = RadioButton()\r\n\t\t\t\t\trb.CheckedChanged += form.ActivateOption\r\n\t\t\t\t\trb.Text = i\r\n\t\t\t\t\trb.Location\t= Point(xrb,10*yRatio)\r\n\t\t\t\t\trb.Width = 95 * xRatio\r\n\t\t\t\t\trblist.append(rb)\t\t\t\t\t\r\n\t\t\t\t\tgrouppanelcond.Controls.Add(rb)\t\t\t\t\r\n\t\t\t\t\tcondition_pannel = Panel()\r\n\t\t\t\t\tcondition_pannel.Name = i\r\n\t\t\t\t\tcondition_pannel.Top = yp\r\n\t\t\t\t\tcondition_pannel.Width = formwidth - 65 * xRatio\r\n\t\t\t\t\tcondition_pannel.BackColor = Color.Transparent\r\n\t\t\t\t\tcondition_pannel.BringToFront()\t\t\t\t\t\r\n\t\t\t\t\taddinput(condition_pannel,d,25*yRatio,xinput-25*xRatio,80*xRatio,90*xRatio,importcolorselection)\r\n\t\t\t\t\tpanlist.append(condition_pannel)\r\n\t\t\t\t\typ = condition_pannel.Bottom - 25*yRatio\r\n\t\t\t\t\txrb += 100 * xRatio\r\n\t\t\t\tfor pan in panlist:\r\n\t\t\t\t\tgrouppanelcond.Controls.Add(pan)\r\n\t\t\t\tfor e,pan in enumerate(panlist):\r\n\t\t\t\t\tif e != j._defaultOptionIndex:\r\n\t\t\t\t\t\tpan.Enabled = False\r\n\t\t\t\t\telse:\r\n\t\t\t\t\t\tcontinue\r\n\t\t\t\trblist[j._defaultOptionIndex].Checked = True\r\n\t\t\t\tgrouppanelcond.Height = sum([p.Height for p in panlist]) - (len(panlist)-2)*25 * yRatio\r\n\t\t\t\tgrouppanelcond.BackColor = Color.Transparent\t\t\t\t\r\n\t\t\t\tformbody.Controls.Add(grouppanelcond)\r\n\t\t\t\tform.output.append([grouppanelcond.Tag])\t\t\t\t\r\n\t\t\t\ty = grouppanelcond.Bottom + 25*yRatio\r\n\t\t\tformbody.Height = y\r\n\r\n\r\n\t# process input lists \r\n\taddinput(body,inputtypes,0,IN[9],40 * xRatio ,IN[9] * xRatio,importcolorselection)\r\n\t\r\n\t#add the formbody panel to the form\r\n\tform.Controls.Add(body)\t\t\r\n\t\r\n\r\n\tif IN[6] != None:\r\n\t\tif IN[8] > 400 * yRatio:\r\n\t\t\tformy += 50 * yRatio\r\n\t\t\txinput = 270 * yRatio\r\n\t\telse:\r\n\t\t\tformy = logo.Bottom + 20 * yRatio\r\n\telse:\r\n\t\tformy += 50 * yRatio\r\n\r\n\r\n\r\n\t#Adding validation button\r\n\t\r\n\tbutton = Button()\r\n\tbutton.Text = IN[1]\r\n\tbutton.Width = formwidth - xinput - 40 * xRatio\r\n\tbutton.Height = 20 * yRatio\r\n\tbutton.Location = Point (xinput,formy)\r\n\tbutton.Click += form.setclose\r\n\tform.Controls.Add(button)\r\n\tform.MaximizeBox = False\r\n\tform.MinimizeBox = False\r\n\tform.FormBorderStyle = FormBorderStyle.FixedSingle\r\n\t\r\n\t#Adding Cancel button\r\n\tif IN[6] != None:\r\n\t\tcancelbutton = Button()\r\n\t\tcancelbutton.Text = IN[6]\r\n\t\tcancelbutton.Width = 120 * xRatio\r\n\t\tcancelbutton.Height = 20 * xRatio\r\n\t\tcancelbutton.Name = \"Cancel\"\r\n\t\tcancelbutton.Location = Point (xinput -120 * xRatio ,formy)\r\n\t\tcancelbutton.Click += form.setclose\r\n\t\tform.Controls.Add(cancelbutton)\r\n\t\tform.CancelButton = cancelbutton\r\n\t\r\n\t#Adding link to help\r\n\t\r\n\tif IN[5] != None :\r\n\t\thelplink = LinkLabel()\r\n\t\thelplink.Text = \"Help\"\r\n\t\thelplink.Tag = IN[5]\r\n\t\thelplink.Click += form.openurl\r\n\t\thelplink.Location = Point(formwidth - 65 * xRatio ,formy+30 * yRatio)\r\n\t\tform.Controls.Add(helplink)\r\n\telse:\r\n\t\tpass\t\r\n\t\t\t\r\n\tform.ShowIcon = True\r\n\tform.Width = formwidth\r\n\tform.Height = formy + 120 * yRatio\r\n\tformfooterheight = form.Height - formheaderheight\r\n\t\r\n\t# Make formbody scrollable\r\n\t\r\n\t# if the form is longer than its maximum height, do the following:\r\n\t# modify the form height\r\n\t# make the formbody panel scrollable\r\n\tif form.Height + body.Height > IN[7] * yRatio and IN[7] * yRatio > 0:\r\n\t\tformbody_calculatedheight = IN[7] * yRatio - form.Height\r\n\t\t# make sure the formbody is at least 100 px high\r\n\t\tif formbody_calculatedheight < 100 * yRatio: formbody_calculatedheight = 100 * yRatio\r\n\t\tbody.Height = formbody_calculatedheight\r\n\t\tform.Height = form.Height + formbody_calculatedheight\r\n\t\t# this (and apparently only this) will implement a vertical AutoScroll *only*\r\n\t\t# http://stackoverflow.com/a/28583501\r\n\t\tbody.HorizontalScroll.Maximum = 0\r\n\t\tbody.AutoScroll = False\r\n\t\tbody.VerticalScroll.Visible = False\r\n\t\tbody.AutoScroll = True\r\n\t\tbody.BorderStyle = BorderStyle.Fixed3D\r\n\telse:\r\n\t\tform.Height = form.Height + body.Height\r\n\t# Move footer elements\r\n\tlogo.Location = Point(logo.Location.X, logo.Location.Y + body.Height)\r\n\tbutton.Location = Point(button.Location.X, button.Location.Y + body.Height)\r\n\tif IN[6] != None: cancelbutton.Location = Point(cancelbutton.Location.X, cancelbutton.Location.Y + body.Height)\r\n\tif IN[5] != None: helplink.Location = Point(helplink.Location.X, helplink.Location.Y + body.Height)\r\n\r\n\t#Positionning the form at top left of current view\r\n\t#In The revit environment\r\n\ttry:\r\n\t\tuiviews = uidoc.GetOpenUIViews()\r\n\t\tif doc.ActiveView.IsValidType(doc.ActiveView.GetTypeId()):\r\n\t\t\tactiveviewid = doc.ActiveView.Id\r\n\t\t\tactiveUIView = [v for v in uiviews if v.ViewId == activeviewid][0]\r\n\t\telse:\r\n\t\t\tactiveUIView = uiviews[0]\r\n\t\trect = activeUIView.GetWindowRectangle()\r\n\t\tform.StartPosition = FormStartPosition.Manual\r\n\t\tform.Location = Point(rect.Left-7 * xRatio,rect.Top)\r\n\texcept:\r\n\t\tpass\r\n\t\r\n\t\t\r\n\tif IN[2]:\r\n\t\tif importcolorselection != 2:\r\n\t\t\tApplication.Run(form)\r\n\t\t\tresult = form.values\r\n\t\t\tOUT = result,True, form.cancelled \r\n\t\telse:\r\n\t\t\tOUT = ['ColorSelection input is only available With Revit 2017'] , False, False\r\n\telse :\r\n\t\tOUT = ['Set toggle to true!'] , False, False\r\nexcept:\r\n\timport traceback\r\n\tOUT = traceback.format_exc() , \"error\", \"error\"\r\n",
      "VariableInputPorts": true,
      "Id": "08e9026470f04151af978e2a464f01f2",
      "Inputs": [
        {
          "Id": "cb0b5355a2584bd6b47aff5a93db5ade",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ffefd5ad52df40cfb676736e8a3d1cdb",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cf92068362ef497686b68b021bf2b808",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "ddceddf6372942899f4d491e47e65e6a",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b123aa6eecea484f8648ae60694b8c9d",
          "Name": "IN[4]",
          "Description": "Input #4",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "902618cf43ce47a8809690025a971650",
          "Name": "IN[5]",
          "Description": "Input #5",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "eb15ec9f65f547b09a2ce480f84c04ba",
          "Name": "IN[6]",
          "Description": "Input #6",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b4109d46216141fd912b6bbc9bc92aff",
          "Name": "IN[7]",
          "Description": "Input #7",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2e4ec9e8e88f43c19d265e27a6b016e8",
          "Name": "IN[8]",
          "Description": "Input #8",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "408087d336504fcb9bed2151dea8fbd9",
          "Name": "IN[9]",
          "Description": "Input #9",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "796819b20edc4abbb9266cfaf1dca1ae",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uitext():\r\n\r\n    def __init__(self,inputname,defaultvalue,_isnum):\r\n        self.inputname = inputname\r\n        self._isnum = _isnum\r\n        if _isnum: self.defaultvalue = defaultvalue.replace(',','.')\r\n        else: self.defaultvalue = defaultvalue\r\n\r\n    def __repr__(self):\r\n        return 'UI.Textbox input'\r\n        \r\nx = uitext(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "VariableInputPorts": true,
      "Id": "16932f0068dd4ac0a9b49bba8159f5eb",
      "Inputs": [
        {
          "Id": "b089bcb4d5354c5a83cb7722bc80fb83",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "aca0b6ce036846d09cca804103fcce56",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b972f9cb084244b0828be3ec5e59d7cd",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "5b53858c4e9d4bd0ba011a831e774283",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uitext():\r\n\r\n    def __init__(self,inputname,defaultvalue,_isnum):\r\n        self.inputname = inputname\r\n        self._isnum = _isnum\r\n        if _isnum: self.defaultvalue = defaultvalue.replace(',','.')\r\n        else: self.defaultvalue = defaultvalue\r\n\r\n    def __repr__(self):\r\n        return 'UI.Textbox input'\r\n        \r\nx = uitext(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "VariableInputPorts": true,
      "Id": "00eb0c98fd0548028f216d3fd27cd58a",
      "Inputs": [
        {
          "Id": "2f82ed3f099e4c3193b4cca3c1406734",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "501eb41ee7ec4d1898989acb0cdc348a",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "b586b072fb51428ebc45a6b0eb0866ff",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9d6e06afc472485995f27c48be9adee1",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uitext():\r\n\r\n    def __init__(self,inputname,defaultvalue,_isnum):\r\n        self.inputname = inputname\r\n        self._isnum = _isnum\r\n        if _isnum: self.defaultvalue = defaultvalue.replace(',','.')\r\n        else: self.defaultvalue = defaultvalue\r\n\r\n    def __repr__(self):\r\n        return 'UI.Textbox input'\r\n        \r\nx = uitext(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "VariableInputPorts": true,
      "Id": "a459182b49b04c6b95807f7034b52262",
      "Inputs": [
        {
          "Id": "249699bdb3f74faa89411677774e8dca",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9d0ceab660b440fcbda0a8c6590643f0",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "1e98c73aeeaa4503bb8c33390621e4a9",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8aa0e8ba32f44db195fca370ab81f28b",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uitext():\r\n\r\n    def __init__(self,inputname,defaultvalue,_isnum):\r\n        self.inputname = inputname\r\n        self._isnum = _isnum\r\n        if _isnum: self.defaultvalue = defaultvalue.replace(',','.')\r\n        else: self.defaultvalue = defaultvalue\r\n\r\n    def __repr__(self):\r\n        return 'UI.Textbox input'\r\n        \r\nx = uitext(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "VariableInputPorts": true,
      "Id": "1ce0f5dc94b24d51b13ab0fc19b6e613",
      "Inputs": [
        {
          "Id": "fc42d8cb77d145c6aaf971ec149034c1",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d3e2f9bf83824d069cf21117c01bc0ff",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d34b7423966c417583efa49d0cbca0b7",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cb57901cd0a640858689b1ddc454465f",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uitext():\r\n\r\n    def __init__(self,inputname,defaultvalue,_isnum):\r\n        self.inputname = inputname\r\n        self._isnum = _isnum\r\n        if _isnum: self.defaultvalue = defaultvalue.replace(',','.')\r\n        else: self.defaultvalue = defaultvalue\r\n\r\n    def __repr__(self):\r\n        return 'UI.Textbox input'\r\n        \r\nx = uitext(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "VariableInputPorts": true,
      "Id": "f9539ce593d6492aa6c1ae233389b344",
      "Inputs": [
        {
          "Id": "3295707014144970a34ba6988a3c4f60",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "cf98b272bffc49d69a3604794d1f85ec",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "60a37f968ea24ff79dfd827464aea688",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "0dcaa44481124430bd693400c2ae02f6",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "#Copyright (c) mostafa el ayoubi ,  2018\r\n#Data-Shapes www.data-shapes.net , elayoubi.mostafa@gmail.com\r\n\r\nclass uitext():\r\n\r\n    def __init__(self,inputname,defaultvalue,_isnum):\r\n        self.inputname = inputname\r\n        self._isnum = _isnum\r\n        if _isnum: self.defaultvalue = defaultvalue.replace(',','.')\r\n        else: self.defaultvalue = defaultvalue\r\n\r\n    def __repr__(self):\r\n        return 'UI.Textbox input'\r\n        \r\nx = uitext(IN[0],IN[1],IN[2])\r\n\r\n\r\nOUT = x",
      "VariableInputPorts": true,
      "Id": "ff346bd3136b4844b1de90649d3d855e",
      "Inputs": [
        {
          "Id": "933b91dd9c4747e4b34e2039cb0999c7",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c31e22e598cd49dbb38617513f9d47d8",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8a6e44780a154a7a80bf4dbeb4cc184e",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "077cf3f22cb54026b0dc58bad550810d",
          "Name": "OUT",
          "Description": "Результат сценария Python",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Выполнение встроенного сценария IronPython."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "null;",
      "Id": "6555689cfef148e0ab7b37991bccfb4d",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "575fe2d1a4204d69a8ae2b1be04e37c3",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "null;",
      "Id": "b0e5633ae5bd40d69f1ad3ead5734365",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "ff4b7f6fc3f44c9392ec75c3e4901dd6",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x[0];",
      "Id": "081813152be0426eb3c21a7323173d71",
      "Inputs": [
        {
          "Id": "973ee42e9987484dafd98fa95528557c",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "179d1947a8264c769c86c435050219d4",
          "Name": "",
          "Description": "Значение выражения в строке 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Обеспечивает возможность непосредственного авторства кода DesignScript"
    }
  ],
  "Connectors": [
    {
      "Start": "e271d633a47e4e76ab66cde160d588af",
      "End": "b38a2281079c4bfe9a538d5f193859e4",
      "Id": "326d9fb0dd8e4960972551243153a7c0"
    },
    {
      "Start": "06a43b52507843858a91aa18b9beb112",
      "End": "44daf3c7c90e46b4935300088f9dd528",
      "Id": "da68480f5be04fef83f054b73d8f59b3"
    },
    {
      "Start": "a61babbd8a4d436db3033a38ec571671",
      "End": "d19e4e521e55499483883e3aba1719b0",
      "Id": "94c67a4fe70f40b793f307802273c3b9"
    },
    {
      "Start": "4ae1be0373844f0c91b8b27c21766ee5",
      "End": "b7ca1a1579d646ba80c7b84313387aca",
      "Id": "7d47247fa04548c2b606c698d4e0330b"
    },
    {
      "Start": "4ae1be0373844f0c91b8b27c21766ee5",
      "End": "4feb2f5f1a0a401487a2898420393f70",
      "Id": "7de6b1b9fca84ec78d6f408dbcdb79bd"
    },
    {
      "Start": "20d39307e559429294c4f43217bfb377",
      "End": "d64488b18a524aff98434bba7b8fa3df",
      "Id": "b6ab43c537b649e0a9ae6f32d7312cf4"
    },
    {
      "Start": "32bcc44d7519450d881baf49a22d6ece",
      "End": "ffdf036b1bfd49f3808154a74c562618",
      "Id": "dbb2af50edea4e9a83c47c3c977a54b5"
    },
    {
      "Start": "c10bdd81a7564436a7c44837de224d2b",
      "End": "a56ddfcbd3c54dec8c4690a1b029f2f3",
      "Id": "62abc31d7036432d9dd112bbd4ce74b9"
    },
    {
      "Start": "4a63187b49a942a598fcd19e7f5de5bc",
      "End": "459512a9729e4ba98084a96a41d98c7d",
      "Id": "71853cd0747649ddbfdcf6949fe1c752"
    },
    {
      "Start": "b22de98a08df46b6a5a5f68e64c5a259",
      "End": "39d6ea0f48824a92a9ce96dfc0554856",
      "Id": "5a30c19b5b80407cac05a379015b2dcd"
    },
    {
      "Start": "76f41a65e23047cfb4ed16bf0aeb34e9",
      "End": "d8289462234a4f74acf3a0ae74e0622c",
      "Id": "ce3dd5db098243158ca8f55e13b3b08b"
    },
    {
      "Start": "76f41a65e23047cfb4ed16bf0aeb34e9",
      "End": "0dfd730dc05c4096ad76f3fcba447a86",
      "Id": "02c0ca238a0242c99db38d425005e80e"
    },
    {
      "Start": "76f41a65e23047cfb4ed16bf0aeb34e9",
      "End": "874ac22a6c8648db9ee510acb1cf2ed0",
      "Id": "3997f3e80e3646e0994b8ac33a47a708"
    },
    {
      "Start": "76f41a65e23047cfb4ed16bf0aeb34e9",
      "End": "c9b737b2f6bc4f31abdadba96afe4eec",
      "Id": "4fe1e618e58348bfa65da66201f57778"
    },
    {
      "Start": "76f41a65e23047cfb4ed16bf0aeb34e9",
      "End": "9f065299d7cc4a22bcdcf80e4a9138de",
      "Id": "730a2ac3882e477d97ec7460e94b193e"
    },
    {
      "Start": "ab60f46fc2d146c6992587c514332f6b",
      "End": "40d49dd3058e46e98d935abae06af1a2",
      "Id": "e0ceecd421994024947e508718f725bb"
    },
    {
      "Start": "805d4fb883b2462babdddb5528d85e0c",
      "End": "7c7166def3544b57a1332c8a7a6b218b",
      "Id": "4bfc8e31eadb41d2bb6f60d82f58c0ca"
    },
    {
      "Start": "805d4fb883b2462babdddb5528d85e0c",
      "End": "d8f437276b854c85bd280deca6778ff3",
      "Id": "d12905df8e7d4f8e824567de7b02b192"
    },
    {
      "Start": "93393a57ed034f5e90d5a8580269cdf5",
      "End": "7e55649b23044f828c7d9cbf66fcceda",
      "Id": "f6a05f5325cf4bc1ab75d90fc43de3cf"
    },
    {
      "Start": "93393a57ed034f5e90d5a8580269cdf5",
      "End": "9a12564a4be94ad99ed53b9e0dd34e1f",
      "Id": "7af8cde5f0e5403e86f8b0b593d3a048"
    },
    {
      "Start": "2e9db2548e5649e7a8962e89beb80254",
      "End": "13aa1ceaf4884ade892ebae16a7a861a",
      "Id": "c65c09fbfdb648beaf1e1af9f45495f7"
    },
    {
      "Start": "c2aee47404f34971ad724f839e7e17a4",
      "End": "284b3ae496574c5ba7f27273cc228281",
      "Id": "d97db18915bd49d1a37f6332d3339e0e"
    },
    {
      "Start": "1b61a492c5ba45ffa500ea5320f7d293",
      "End": "4a78e9b36e9c4f14a60c7b788e044df7",
      "Id": "a18d8f35ea654c67a981d62c58fb519c"
    },
    {
      "Start": "7291a05fd93340968a674fdd0b71eef8",
      "End": "f223d1338a694cc792f1c35b49cc42c2",
      "Id": "5d8ffdf4e006466b80e6c08b06c96abe"
    },
    {
      "Start": "7291a05fd93340968a674fdd0b71eef8",
      "End": "9d51cf6bbc2040c998ef5addac5e70e5",
      "Id": "e629b7ac2f9044789427a3588251c0ea"
    },
    {
      "Start": "7291a05fd93340968a674fdd0b71eef8",
      "End": "3cff142858bc458bb54250e10ec00872",
      "Id": "43672ad639b34580b22d408d50c2ad1f"
    },
    {
      "Start": "7291a05fd93340968a674fdd0b71eef8",
      "End": "a0c076da71fc461f9ea6e45661191f7a",
      "Id": "42f4cb5802b745398cc1dcae387abe14"
    },
    {
      "Start": "6af8594bda64495396902c4afa6f03d0",
      "End": "0dc78a051a5047f5bc0a489f73b10656",
      "Id": "2dc44e25ce9048258671f89b8b575116"
    },
    {
      "Start": "de050d1943a14570bc9620b5a070fad3",
      "End": "3b3ec8e289e64cc880facd23badd818a",
      "Id": "c6d7545e2fe345b39057e8b187b18bcf"
    },
    {
      "Start": "4435285b70c04bfaba7977187c2f6e92",
      "End": "27b32b54915b46299efb39304e1522a2",
      "Id": "b22029c5de9b4b1c8beeb9ff79684c02"
    },
    {
      "Start": "0133d2f37ba14ec499621cfe3c1a0597",
      "End": "64d2611126af4bfb936710685d620e8f",
      "Id": "91017f35093a4c6b887683deda2fef91"
    },
    {
      "Start": "0133d2f37ba14ec499621cfe3c1a0597",
      "End": "037e9366c9b44b5c9ea6eba138c49ee4",
      "Id": "7d29535330d942fa92bc5b8f79ad6eec"
    },
    {
      "Start": "0133d2f37ba14ec499621cfe3c1a0597",
      "End": "bfb34ec3f4a64e7586e3b18228a1e61a",
      "Id": "9d8eaf4c20994be0ab5fa0d92ebd29e7"
    },
    {
      "Start": "0133d2f37ba14ec499621cfe3c1a0597",
      "End": "33bb2e9573df4db08709f7dfe168aca6",
      "Id": "c0cb39d91c144e819e0910fd5efd9317"
    },
    {
      "Start": "0133d2f37ba14ec499621cfe3c1a0597",
      "End": "7b688b8f7cfa4315861ef104a152be7c",
      "Id": "2581a37e517e47a49507c604a03275c9"
    },
    {
      "Start": "e3f71876478d47cba57d11419367765f",
      "End": "f9d29f495e2f430bb254496701899f33",
      "Id": "bd1cb1d3903a4b4db9cafdb7d6ade5ec"
    },
    {
      "Start": "560cb3a07e0846108239228ffc82c646",
      "End": "0cc0c25168594a97b73f0465257a207a",
      "Id": "c827b3c78d144e599d4408f561d50f62"
    },
    {
      "Start": "2c7f8203cf93440abef65f0eb5a2f782",
      "End": "6c15b84a76084339ba395621ecb23884",
      "Id": "cac47462e4b446e3b58a69fc6590bede"
    },
    {
      "Start": "40c03a2923904786a38d82334237191c",
      "End": "ba9cc4f6141b4b74a2f969a3db526038",
      "Id": "09e836502c3840ad89ed36644de916ce"
    },
    {
      "Start": "794e12e82e0e482e8f47c895172226cf",
      "End": "39b40381009046f4b6ca5712e4afda2d",
      "Id": "f2066d8e6af24ac98afd930f9c3030eb"
    },
    {
      "Start": "02f0f2b49e954d40bfc5ad7cf54a3edc",
      "End": "f69e1a917d3846e5a1ebe7e83fffac04",
      "Id": "2d21a8ebcee043dca3116d5e7835ff73"
    },
    {
      "Start": "2a436693289148a8a1c6e41f5a432905",
      "End": "dfa83f3dc8ec4c5cb89e23df5127173d",
      "Id": "a9e8e90f42b84fc093aaba26b4746560"
    },
    {
      "Start": "2e8e8a68421b4746a082f0122f08cdf2",
      "End": "d3a73707834e4b18810a147df9c87f02",
      "Id": "945c352f18e94055a23e229d21a1fca4"
    },
    {
      "Start": "2e8e8a68421b4746a082f0122f08cdf2",
      "End": "ba5d21857b1d4698b4e9aa77516b487b",
      "Id": "fddbda1b938543f0b6f7a87ad8ff2847"
    },
    {
      "Start": "2e8e8a68421b4746a082f0122f08cdf2",
      "End": "b9febde62c3240f7b3555bcbd71d3d02",
      "Id": "b8263c681279438980387073e81c69ed"
    },
    {
      "Start": "2e8e8a68421b4746a082f0122f08cdf2",
      "End": "806c7e2dd02c44d48bb8af83bef90069",
      "Id": "049d47e33c94407fb8e3d94ebc02d9a1"
    },
    {
      "Start": "2446421dead24808b8a8db550390821b",
      "End": "754e9dad5a6046d9bff722e752d88293",
      "Id": "b6d1959068f64635b32dca4be93c67ac"
    },
    {
      "Start": "991a20cada114179953acadaf0eeef5b",
      "End": "b20f951852cb4380aad1485d8e85d574",
      "Id": "8e71b19a6c19462dbc3332a1428663dd"
    },
    {
      "Start": "d10ccd90dd35433f8565e7b93457a401",
      "End": "694bea8849ce4771959f3bdc97021a31",
      "Id": "4b29a4ec39f6450e9d75f9333aec60c3"
    },
    {
      "Start": "dc1194fb162f427586cc534c7cbc887f",
      "End": "73a7450dfdaf471ebba4ccc52c54a0ff",
      "Id": "996304f64f994ff7ba3009d0a78da5e2"
    },
    {
      "Start": "8c1728d2f3bc4100b073a915782d2333",
      "End": "1d86e1803eba4d339044502d9cb8e4b9",
      "Id": "d0a5d5c810c44fde9d38e32d18822851"
    },
    {
      "Start": "8c1728d2f3bc4100b073a915782d2333",
      "End": "b052a075d7be4f1b95f48be727ca13d1",
      "Id": "1b34dd01729b4a85b4c0f5ee29112c7a"
    },
    {
      "Start": "8c1728d2f3bc4100b073a915782d2333",
      "End": "d2a6822dacaa4bdca5da34b160a3972f",
      "Id": "71f6465b7d554ca69dd47b5e0dddd607"
    },
    {
      "Start": "355299ffc4244a0698b61e597793894d",
      "End": "ab9f199d386b4e2884c0f7b4a6cfe34c",
      "Id": "b47338ec19d74423976566ac2d3a86a9"
    },
    {
      "Start": "96f1e0c19bed4162983ed19470a8cd51",
      "End": "fb76b52b1ed847cdba41ad53bcb95388",
      "Id": "62c884a678f84d78baf883c129853a53"
    },
    {
      "Start": "9df0f11210e24371bd926c681d204bed",
      "End": "4bcf2774771a4dedb4513ef70e7ad8b9",
      "Id": "d394395900fa4fbaa97b14f702d09a8b"
    },
    {
      "Start": "6f8fea666f554d5d915fec390780d6c8",
      "End": "025e46405bee4f62b1f0b513c5600b36",
      "Id": "847df4542fc3472b852505affd32d092"
    },
    {
      "Start": "f678fa2de1f64e74a14ac92ce0cb3993",
      "End": "03ee84ef24aa4fb58419ccd382308e31",
      "Id": "f7e0c8091edc4db3a5b53489ac570610"
    },
    {
      "Start": "8a71e416aef345e0a9ef15cac6829370",
      "End": "6fff7645352d48b6ba7a65e5f414642a",
      "Id": "c78e2a634ec84f9e831d894c8505fd0a"
    },
    {
      "Start": "072984e07fde4b2fb3624b33529d8473",
      "End": "f098273ffd3247808467cde825cb6717",
      "Id": "73db99aba2b4494090900e2121410937"
    },
    {
      "Start": "1f950145d0e747479a0848024c430e1e",
      "End": "46a558d6084a40c080b64d9e551869b2",
      "Id": "178e892073a7454782087e06ad5097e9"
    },
    {
      "Start": "1f950145d0e747479a0848024c430e1e",
      "End": "c7d82e30083f4ebfb6f92c2db5038b70",
      "Id": "8b4f32bb73a045aa9eb28d7ae50f17aa"
    },
    {
      "Start": "1f950145d0e747479a0848024c430e1e",
      "End": "a3031266e9784725826e930800852920",
      "Id": "a8c623531bfe49ff9ca4e4429a801099"
    },
    {
      "Start": "276b1716921f4f119ab6dcb69de9fd1a",
      "End": "50b2f73272aa4d70bb3e77e3e2131cfc",
      "Id": "08ed2643f3ba49708dc94ff483a2f826"
    },
    {
      "Start": "7bac371366aa4e0688d695fb5e220eda",
      "End": "8eda90fd841e441cb20b03d272991717",
      "Id": "49cf04a700a94791b66dcad092fa3345"
    },
    {
      "Start": "a3688513e4884fc5bca5188707d4849b",
      "End": "c6de120b85a2463499b8b00e871edba0",
      "Id": "cb4a47adafd44a45969072c5aa2436c9"
    },
    {
      "Start": "b15d7d5ecbea4af19a22c23e1c691ca4",
      "End": "6946bf01963b40f4b88e243c94410673",
      "Id": "173e81b3752f4f00ab46b46582537e34"
    },
    {
      "Start": "e5be8ec1783d46bda09377c81e4d1608",
      "End": "11b490519d6943b5a08a085aa1b613f5",
      "Id": "7f1844a6ca4f4ab488317309c2d46cfe"
    },
    {
      "Start": "76d5cd2378e745768308f3701f6bf35b",
      "End": "ff8ede7424fa473ebdc5b3f84cfe0c7d",
      "Id": "47cc1ca77c5449ef9eff99574e8e2165"
    },
    {
      "Start": "10a6b675d4fe48a8b911c8021f098676",
      "End": "8350c80d7bbc4d53aa57c3db2982434d",
      "Id": "977b82f8627343e79b4a2ce44d71238a"
    },
    {
      "Start": "ec02877881864ec281e3b995b7f6af1c",
      "End": "b8d45d555cac4c35b663d4c932ccac3d",
      "Id": "63756b7e1bc6493f8da6ed25014c1c3c"
    },
    {
      "Start": "dfd52a70cae9469aabaf65deeafc7f4e",
      "End": "f0f141c4ded6420c8bde056a4da807fe",
      "Id": "20e7be8eec38417c82764b6110d796b1"
    },
    {
      "Start": "c59cb0a0123a471dbb0882f32445f4e0",
      "End": "48ca6b44b2094aba965979706bc98fa7",
      "Id": "7eeedc8e75414bc59bd348b480d63e54"
    },
    {
      "Start": "71eb1e4972c340ff971e8731f56159e3",
      "End": "4e5f1f7fee0847ea9fd34fb69ab728c6",
      "Id": "6342c29a5c6f4821884c73ddf4243984"
    },
    {
      "Start": "cc59f57af6b3446a950bf5557a386769",
      "End": "98c2f221136640eb945c4acfd1cd0b5e",
      "Id": "4565b9ac18224fcf8b00039e7ee9c849"
    },
    {
      "Start": "12c303b0b6464e1186430b66a218f3eb",
      "End": "0351203f88854194b818f08c41e13c2d",
      "Id": "5d23715b90f144a8af0fc407cf7b76ea"
    },
    {
      "Start": "12c303b0b6464e1186430b66a218f3eb",
      "End": "03058bb175f748a5abeededc84f2cf86",
      "Id": "98fde88c6a1a43369bbf4be76efccf5f"
    },
    {
      "Start": "0cdc50887d634c278a9bcef35baf517c",
      "End": "85c4f463c0d44fa985d9e40270c27d0d",
      "Id": "12f817e55fd14697a593c58a4364ccc0"
    },
    {
      "Start": "b6e8b60d5c624386996e6949f6bf1af2",
      "End": "7b4c38269f19431bb7ffcbb7d72b68e9",
      "Id": "605e6870ce364b4f804e5fb581f4ccfe"
    },
    {
      "Start": "266141f68aa2472c922fe497f87e6461",
      "End": "ca32a1b93fb54442aa8347ff82c2e3a9",
      "Id": "9e907a87d1364c9a8be510fe97789d1c"
    },
    {
      "Start": "a2f5684b5fa04436bc06a1f9d5e0a001",
      "End": "012cf7412dcb467093e8102b955e505c",
      "Id": "a0740348914440e9802bbc435acb78a2"
    },
    {
      "Start": "1ac874b644b5464ca8c285e6c517a314",
      "End": "8c40ac1bf64d4d008d6732935d74eb45",
      "Id": "e73dcd52bcd443da89bd45c6f86ec5e7"
    },
    {
      "Start": "b7b5087098ae478bb42d4b23a4d71bc9",
      "End": "82f692959d62486390986d14046b22fe",
      "Id": "66be5a4540074bc39242d05cdacac3df"
    },
    {
      "Start": "da1efa3f811847a797fa4c5c1a2c88a0",
      "End": "3cb31da4ec004603b57d4d68022ac97f",
      "Id": "29bd8e9d0b76484caf9a76316a4a023b"
    },
    {
      "Start": "dc4be96f4823413a9764c63a5ea8713d",
      "End": "f55fcbe651f74dbb9bc0cad80ce545ac",
      "Id": "1b2cc523bcb44609aa0f07338336512e"
    },
    {
      "Start": "6dd3ca7511bd4474b40277fb38853b4b",
      "End": "ec111e1e7443428fb8de5329785540b2",
      "Id": "40b211faff8a499a9a9fc903e89029da"
    },
    {
      "Start": "c0824a8a708a466b861b03b7a81a88b7",
      "End": "97cf320d576e45019f3d47a675cfd07d",
      "Id": "99d34b951ed64534aaa6b3fbc41a65b7"
    },
    {
      "Start": "e2012871b78a46caa7502fedec098469",
      "End": "8e4d210c8fba4ff29f527d0b22bca875",
      "Id": "99cb0e6c43e5489c80391fb505820ed4"
    },
    {
      "Start": "ace4a8166481419ba57d7467b27047e4",
      "End": "904ca0c441104fdc925cd49811339bf6",
      "Id": "0e39f2bcd2544011b17dbea83dcdc5dc"
    },
    {
      "Start": "ace4a8166481419ba57d7467b27047e4",
      "End": "4944c3f29bcc489495cdb12b8c4f5b0f",
      "Id": "171af7cbe3ea4729ac2671f80f57b868"
    },
    {
      "Start": "4b2f904757b6433e9c4749285019b7b2",
      "End": "197d9ecab23345b097d5b1d506b98769",
      "Id": "515598702b3f44f59880309f2932a93c"
    },
    {
      "Start": "11528855ebcf4d86a20b7ae7e3ea89cc",
      "End": "b1ec34f00a644633bc934706dc79232a",
      "Id": "72a04bf0af06448e81f094aac5c01706"
    },
    {
      "Start": "df2433c649b04944b0d202fbb3530239",
      "End": "6d5fe9ed774642558768f0fff45110de",
      "Id": "aa4f1ff397f043c59d0d378f645e9b58"
    },
    {
      "Start": "aae09442950b4db08ebc25962f012965",
      "End": "aa30604d008d4576a19880dac2962ab9",
      "Id": "ac141bd28e2c46beb32a889875afccb1"
    },
    {
      "Start": "820aff517f354488976da3bdaca6db89",
      "End": "18f36256df9b41c09b7134bbd8f560c1",
      "Id": "5b68ad8edd1748938d6b9036db8ba340"
    },
    {
      "Start": "2012237fd8944ad1be396f5d721d0264",
      "End": "036e10dcf38d4f2b977560fdfc4fc68f",
      "Id": "15610c679fce4d879a9d58c226fcc5cd"
    },
    {
      "Start": "f5afde33d5c84ff1bf0b401578c9cbe3",
      "End": "983601cb5dbe48af84206c09fad2a714",
      "Id": "0903fc743bb844918bb25cca5d1853cb"
    },
    {
      "Start": "5475ab0fea3946ce901d28bc3387b4aa",
      "End": "7d1c574c03b24fb8b7a48ef9d5a90cf5",
      "Id": "11502b06245c490280b327730326755f"
    },
    {
      "Start": "c6fbbfaf4701417b839bbeed5f6e430a",
      "End": "fb85afcef91246d6bda9d2ceef9efdfd",
      "Id": "c2ae8b36e330411994892533e01f7493"
    },
    {
      "Start": "cbd138336b3c40319f9be5fb372f3553",
      "End": "eaebea366a83403f98f83b8ebec2a506",
      "Id": "010b9deae9c3447f8a9a8e115dc93fa4"
    },
    {
      "Start": "46455265b6714759840595cd43004441",
      "End": "abb7939d554e46128c31a0097e1568b0",
      "Id": "fa4527f15a834687b06f6e15dc65223a"
    },
    {
      "Start": "36a515b57093434db316220baccc5040",
      "End": "6bd4b20a9ddc4f19a2f1a29d80f4f5d4",
      "Id": "00750f63537e4583b0c93b1f447b5d8a"
    },
    {
      "Start": "d74fe63a73734f60b544fa80f0dab04a",
      "End": "7f087515bcb542bc9868e5fdc4ced15b",
      "Id": "7df490d6614441bcb73d2e529bff6899"
    },
    {
      "Start": "d74fe63a73734f60b544fa80f0dab04a",
      "End": "572d41b3796d41b9bc2ee360cfdba2c4",
      "Id": "b2f96b6acb474926b79386e41a5bd19c"
    },
    {
      "Start": "d74fe63a73734f60b544fa80f0dab04a",
      "End": "bec83875173849cabd5ab96e504f4d0a",
      "Id": "a36d8a5033ee4a6eaee016ea6396d32b"
    },
    {
      "Start": "d74fe63a73734f60b544fa80f0dab04a",
      "End": "d1c56384bf094afdb617222c2401411b",
      "Id": "08a8caf41619437ba3dfc5c982c16e93"
    },
    {
      "Start": "0568b97f4bcb4392a3bb6932a258a995",
      "End": "3024846ca6db49d9bb4c6e898c30217f",
      "Id": "a7670711fcdb4acea44427980552efe2"
    },
    {
      "Start": "0568b97f4bcb4392a3bb6932a258a995",
      "End": "337c55db8e2a4fcbb61738853d2f1e4b",
      "Id": "1b8323e06ba84b29bb7abd62a46c9a47"
    },
    {
      "Start": "e6be2b40f3174ec2ba618a663e8289ff",
      "End": "e27a494b1e2c441fac37bc761bf56c5e",
      "Id": "dfbd7ecfeabb47be8452ce2a444eeeda"
    },
    {
      "Start": "43a4c07c33994bf0aa1ebc37911922e5",
      "End": "ff4d22a7b0334f52a78c129bc61a844b",
      "Id": "d20dc9c469da42ec8c3d605d56bebab7"
    },
    {
      "Start": "73c1caaf3fed4ae9879f9d30f7533e57",
      "End": "2d2100fd3cc449a8ab57ae6c0f00f597",
      "Id": "8b9b6cfa0d4a41eb90e6807476e49a78"
    },
    {
      "Start": "b7970f4a409540c3b51e21feb1eb7022",
      "End": "61d60baff68a4356927eae5785974e3b",
      "Id": "9aa333b9308449dc8f1bd0d319eb195b"
    },
    {
      "Start": "41f642f400954a139f368f1459487f77",
      "End": "feb14f385df44d3faffc8394ac17bae3",
      "Id": "074fd9d064c34b98a29a94c151a4190b"
    },
    {
      "Start": "578922d8a12145ceb598ab94df6f6d94",
      "End": "bb5881e51b1a4dfc897261f7121dc9c6",
      "Id": "14db832886b44c2e9d8c38da36cbd834"
    },
    {
      "Start": "091c194e42aa4085b61b89150df73c65",
      "End": "d2cf9cd63d5b43daa9aa921da680f748",
      "Id": "10bb56e25edf4433b92307bb7f6c9d60"
    },
    {
      "Start": "2619e395d46842b8bfb902fe48fd4723",
      "End": "b404940e5a7e48c1a6805c6f5fc8d222",
      "Id": "c1c5a368d822480486e3c96c59f3a500"
    },
    {
      "Start": "6e5fb215d91549e3ac0c7ef234759355",
      "End": "2b93d656e27740958fa44e9a2a3a90eb",
      "Id": "1e86cb451f284d99acce498324f31c83"
    },
    {
      "Start": "5012b114c3034d53864f7fe2f30fdc38",
      "End": "2042a0e325b7490a8c4e88a23b18398e",
      "Id": "0dedb8ecfd2b4aadbbc09111dfac1022"
    },
    {
      "Start": "83499b6795554a48b27420fb910796fc",
      "End": "096b620279624843a84a6272bad984cb",
      "Id": "4851232bc0d9472c8fb0bb358918aafd"
    },
    {
      "Start": "a93c7e1c938147af82c30a02d5a04167",
      "End": "4730cd9fd1d74260a9639dffa958555d",
      "Id": "e7a0c610beb349028208c2cf1723d4aa"
    },
    {
      "Start": "c007199102ba4a298ae7eda94f3e908d",
      "End": "be6e3e64b0654cb099de60b4feb42616",
      "Id": "0b182157e20f46c591b657f7b6549889"
    },
    {
      "Start": "c007199102ba4a298ae7eda94f3e908d",
      "End": "9d4b60c3dbb74698a3f5db6ca5c3fc8e",
      "Id": "65b5f33ddfd0472a8083d5f39f8cb62a"
    },
    {
      "Start": "c007199102ba4a298ae7eda94f3e908d",
      "End": "12aef50b59b943d99ca58c1e4229ed1b",
      "Id": "c3d11ae2fb1a424a8acd55c0e1fcf683"
    },
    {
      "Start": "c007199102ba4a298ae7eda94f3e908d",
      "End": "5c4b2797e5424e54bf5f37c4ec1c440d",
      "Id": "1f369418828b47c5bf1556e1bce01131"
    },
    {
      "Start": "b3cca59ae0444fc69af9da023360ec8b",
      "End": "6d8545b4ffd74e30b19ed44c6017f265",
      "Id": "6d37a1b24edf4b62bc8b4890a0340303"
    },
    {
      "Start": "43b16b7c8b654ea1a45ffb4f75b493c5",
      "End": "39c9eca713f4430fbef67f0167cc87e2",
      "Id": "d827cc4347bf4f099ff3fdb11be265ca"
    },
    {
      "Start": "9f26c73c64f54e2884a4450927c3f617",
      "End": "28fc42dd6c634741a905d3fe1cbaf757",
      "Id": "7a74d5ee1ae6434c850efd25145be949"
    },
    {
      "Start": "6284b1368c834eb096faec4a1a0c019e",
      "End": "4d78b5ec2c2f4e989a8b38adab7e735d",
      "Id": "cff5194b0fb94b39a56303be42d965c6"
    },
    {
      "Start": "f32b88ccd5be40039b547a5699faba0e",
      "End": "b97c402477fa42ea8c8a5ad5f700f4b4",
      "Id": "bce08229ef5d4d30870aca28ffa61110"
    },
    {
      "Start": "258074da705742098e4b92233c25a1c3",
      "End": "74f5f2dcfd494a41b82564acb6bc7f70",
      "Id": "7bd8f1206a754215a6cbe16db26d381f"
    },
    {
      "Start": "554b54c0ab704460ba402335a71c8de2",
      "End": "b1c3db4e975144f583e67a929321a56a",
      "Id": "724db77af6f441a3baddb2788aba31dd"
    },
    {
      "Start": "cea122197ed04ccb99f1ab36cc760a79",
      "End": "05afd62adba0465a9c088e131ffef0f9",
      "Id": "92f6bac0da2d480eb11145a8309b4aeb"
    },
    {
      "Start": "6c7e8f7adf2241648a4a03acb3f380c1",
      "End": "60538dce55d84ad499572ecfa7fc77c7",
      "Id": "d01de076d5f64582bfbddef1ef5a0da9"
    },
    {
      "Start": "b1627441d4b64aaf8e6234afadc487b2",
      "End": "1192ec9c515b452398446d288ce8081c",
      "Id": "a6c12cd7d8e34badb9f0eb23df57dae9"
    },
    {
      "Start": "a363841048b94be887e73ae8af23c016",
      "End": "a3a325fcac204e5081e3eaa4f7277706",
      "Id": "d4beedf0eb044f159cd20f15e1bf75dd"
    },
    {
      "Start": "10ccf1aa92ce456e95baa032ae58c64d",
      "End": "0b5271626ae34d2fb10c4b768d2b572b",
      "Id": "8776c53b423d4e17b3a6980012ef310f"
    },
    {
      "Start": "69e65fdb320f4599829e69c74ae91285",
      "End": "5524640958764d8a8657c9b1e36e7141",
      "Id": "ef94f90b1b1648eebe952993d6d6f723"
    },
    {
      "Start": "514b9466b45a402388eeea0439328f62",
      "End": "2cc8be59c822422b8ffd34c4135fe543",
      "Id": "f6c6afc3a18f4f488161b8fd73ebc0e9"
    },
    {
      "Start": "749904d6e41840ffa1aa3b2d1efc7c51",
      "End": "df744b65be93411a97cc058732ffd411",
      "Id": "39781c047cfc47cc853c2d00e6b5868a"
    },
    {
      "Start": "661f072ad2274e69bee5099be5b61691",
      "End": "43790b4a10404e77af4ca4278cc000a6",
      "Id": "02fbfa2b71f742758dd43054b6934827"
    },
    {
      "Start": "c0ddcb08146940acbe0eead11684bb17",
      "End": "a217d41e5dc04f5ea948e1d1ede23da5",
      "Id": "954d756a26584a78bf9ae3b1cd6d30aa"
    },
    {
      "Start": "3386e22863d448618f4a23111c80f539",
      "End": "8047aace059a49ecb82814f59c8815b5",
      "Id": "d38fd5daa4074f6494c8bf6099554f2c"
    },
    {
      "Start": "e2cd58a23e54401e9309ee0fd906a4ac",
      "End": "341be58c30fa486faa00b135d6e66e0c",
      "Id": "0959ddae28a042138dc202362f11ed24"
    },
    {
      "Start": "c2ce0473db9e4b69bc96684ab8b3c3f2",
      "End": "17c216fd304d413489327fb27df8f1b1",
      "Id": "17845b1ad6ab42d690f91697dbfd07b8"
    },
    {
      "Start": "c2ce0473db9e4b69bc96684ab8b3c3f2",
      "End": "2b737e530f054353abdb1511f97309a7",
      "Id": "4adce48cd9184ea6bbfe797cc8fc0478"
    },
    {
      "Start": "647452b51b6d4d58bc7904ef1b38da7c",
      "End": "d35b5982d2ff4981829f992c33069197",
      "Id": "3da52d0e57564b64a6eaa376f9298ba9"
    },
    {
      "Start": "647452b51b6d4d58bc7904ef1b38da7c",
      "End": "41e5fbab8c344304b7f187a97d0c37a4",
      "Id": "44466d19643d4606bf4176e0097b64b6"
    },
    {
      "Start": "05d81bf9afc44d05ba3f909008cc3258",
      "End": "4d966dfc6f5b43a0bfce83507d8083f1",
      "Id": "2226f7e0fb154e3ba3cabb4cdcad1f65"
    },
    {
      "Start": "906832f1aa3a41d4bbcd229ee08bce8f",
      "End": "a4865df07d6a4208b3bfaa09ededd8bf",
      "Id": "cfc05045fec241eda72b0c3df738bc67"
    },
    {
      "Start": "c51e5d9ea69c4bf0ae0db5055393da5f",
      "End": "596e28d8dfee41148659152ca3d85a4c",
      "Id": "c19e9028d9c84a0980d574d40e8075f7"
    },
    {
      "Start": "c51e5d9ea69c4bf0ae0db5055393da5f",
      "End": "0a53b5c27b2546d6a46b63978b740540",
      "Id": "2a7409dddfdc4a288344a1594d03593b"
    },
    {
      "Start": "c51e5d9ea69c4bf0ae0db5055393da5f",
      "End": "f26141a607d444358db7f22030ef4bb4",
      "Id": "0ef5cb4a0b094ef3895419a8140699ae"
    },
    {
      "Start": "ad383f4246b04c5c89d15eb6671167c6",
      "End": "5bf732fdf85742ce84af8e65549629f3",
      "Id": "b63624a3ab2e4ed4bdb4b2d4889febe0"
    },
    {
      "Start": "28df807152664cd0bfb27f20afbfc3cb",
      "End": "972e28450b004116a5e3959b94813d88",
      "Id": "a75e22c9d76c464faa8b2340b35da72f"
    },
    {
      "Start": "ca08d14d5b634855b05bb284ca5c9b55",
      "End": "e0c1e1b2e2634e31bbfc6b1a0b1285c3",
      "Id": "f3da1095c02145d192ae0aff42e3f8dc"
    },
    {
      "Start": "6b7813fa84034cb0b074a8fcde9bc38d",
      "End": "34f594cf99c0467ea8668002a80a3e10",
      "Id": "82cfdec78e364c5394e176d152695646"
    },
    {
      "Start": "5fe2a05be37f436e8101da8020923282",
      "End": "a43b41f4407b4a43ab4da4ae0f1e0679",
      "Id": "f7218128cbc54bf4a2dfe364e3dd14e9"
    },
    {
      "Start": "12c2066007ca484ea3165b4a9354682f",
      "End": "d164f41d37f04ac5b92f68ba5be078bc",
      "Id": "b1a1e0ba18d543adb9a4f0bbd1947e90"
    },
    {
      "Start": "12c2066007ca484ea3165b4a9354682f",
      "End": "446baf38121f413fb629a6dc60d25d1b",
      "Id": "8168a423444a4eb68905dd5e6b1d893b"
    },
    {
      "Start": "3835675dc4fb44fabeeef0af91a67f1e",
      "End": "3c4f0c626ece4881a3159b7c505525ee",
      "Id": "d315a4103fb44002b079b22875e0461d"
    },
    {
      "Start": "3835675dc4fb44fabeeef0af91a67f1e",
      "End": "62e7b88d920d409cbb394939d3b7316d",
      "Id": "82021e79add048adb54adb6da2247eff"
    },
    {
      "Start": "a312577657fe4cf2bd2ea829a6d7d66a",
      "End": "93be078b4d1746fdb8e9cbf7eedc1221",
      "Id": "68f343cf41414a96a843f96184c67414"
    },
    {
      "Start": "a312577657fe4cf2bd2ea829a6d7d66a",
      "End": "f471de58e3f14c808f61ec483f8aa958",
      "Id": "00aef579362f41d888199dbceea155b2"
    },
    {
      "Start": "757b221649b04044945e6c4f59819896",
      "End": "3ffb5e5c670d4faea3f95e4b84c94e0a",
      "Id": "588f4642b8794d659269b2c8bc3367f3"
    },
    {
      "Start": "757b221649b04044945e6c4f59819896",
      "End": "d9d0d46317a94dbaa52f83a403e49ed3",
      "Id": "eb62f34674f9466cb5c4bd0a77e40623"
    },
    {
      "Start": "6254d65224934fb99426f7a25c26cd92",
      "End": "a41bb7b7fca146179c7d959cf32ca665",
      "Id": "db7133238e9b4d2c843d1b3f964c65d7"
    },
    {
      "Start": "525a5f1a4d054fd7b9e5b769b883fe6f",
      "End": "00e1e19c1afe4026911927b7ef6a28a6",
      "Id": "68fe5d30ced7445cad526dd71020f684"
    },
    {
      "Start": "67fb63d173c840ef89c169df13f3973e",
      "End": "40269f37449849f58d4de6e45435582a",
      "Id": "0658cd94b2a14094a7f1594d1d492d00"
    },
    {
      "Start": "67fb63d173c840ef89c169df13f3973e",
      "End": "147134c6849040ac8f94d02c4e5e0eb1",
      "Id": "74020ce39ce24fe39767a883dcbc4c15"
    },
    {
      "Start": "2e7aefd7f19c4a1d8efddaac9628c198",
      "End": "3fb7f5fca4aa40a4820ceb9b1090ec31",
      "Id": "345ee0fd5a44464ea4dc4221f8138563"
    },
    {
      "Start": "1f367e84f8cb45108318420cb77a3a98",
      "End": "557807427e8c42e0a0bae4d09524c011",
      "Id": "ac8b2bee604c4196ba3aba7dfbe425ae"
    },
    {
      "Start": "c1ebc7f86e42405da5cd9ecd40635a10",
      "End": "47df89e266514c819a682026421bbf6d",
      "Id": "fe66008fc0814991ae48a02b18dc9bbf"
    },
    {
      "Start": "cdaaaaa5db5046b18eaf81e166426922",
      "End": "b501163fed4a4ab2b5d982bd9ed92636",
      "Id": "48a3520fd5cf43b5a88dc5ca84316f6b"
    },
    {
      "Start": "ab8e8c97dd9f402b91ab970792b55adc",
      "End": "4a772a7ef8644dea814ae62270267238",
      "Id": "f0fa6486beed48809ac683f608dd96a5"
    },
    {
      "Start": "b9be907eaedb4f24819bc57cec95bed8",
      "End": "34291a514045479ba02e1572adba665e",
      "Id": "f63d7c4404b24857824eb40d781de050"
    },
    {
      "Start": "c1396f69d0704097b91a16de80544f2b",
      "End": "cb3cf0a7e5b64ba4b969de016fd81d71",
      "Id": "39e0e1fc0ad849fbacc3935dbdd97ac6"
    },
    {
      "Start": "72e48d9e62d24c81976ae67d9718ca75",
      "End": "de5d68003a2f433fad4c6378fd340a8e",
      "Id": "e1bb248e8e8547ada446343096787032"
    },
    {
      "Start": "5bc90c09a4504a51b618561c6e0552ec",
      "End": "5ee5060211314925ab875a134e404e35",
      "Id": "afc0245c3bdf439083480fa0ad43f614"
    },
    {
      "Start": "bdda59c97e714be9b6443cc3e805d9e4",
      "End": "ce439048628e4f1c939498abe7e704aa",
      "Id": "d75ca2db1d2046078028f36272a5597e"
    },
    {
      "Start": "3cbd02454cee4e9fa3cd44e4a228a4d8",
      "End": "f666fe321d004ac5a6ecd07e2bf1d2d6",
      "Id": "9b0761ed480744d9ad1c3535304aa201"
    },
    {
      "Start": "e6c8998ae6324febaae00044defbe844",
      "End": "43aa1a86d929459caa6a629239aba454",
      "Id": "5ffac92d38624a2790c39633f30a0d5d"
    },
    {
      "Start": "df42b3435f024ec59f4d2eda0b0196e4",
      "End": "1c45cc21f7224d9eae912b71ed46a72b",
      "Id": "a4bd32a2838d47529299a6594498a562"
    },
    {
      "Start": "df42b3435f024ec59f4d2eda0b0196e4",
      "End": "159af6c4e29b4c83ae24d31b0ee4b349",
      "Id": "3854ab428e884135a9d5dd4fe0699325"
    },
    {
      "Start": "d7583a0f022d4c15b468b9341bea45c8",
      "End": "201a43fa294a498ca1bcdb5a833e365f",
      "Id": "1463877f3c0d4b8d8d61d1d70c44a9d4"
    },
    {
      "Start": "977544ec0a1a46798a298a64f0bedb51",
      "End": "183161ac710b40b1ac1c802c96ae89d5",
      "Id": "66ab6a8904344969a06cbb197825ec71"
    },
    {
      "Start": "a96df49dab1e4277898cd702a4b0485d",
      "End": "af85be0b5c874d9eb1adcfb8f9b2df23",
      "Id": "af90e379bab34348a34e0ef5f2a07b3d"
    },
    {
      "Start": "89f58a63d73b488595481d50e6fb1ba3",
      "End": "16e72a36f04c4c8f81162d8feb700911",
      "Id": "95cf556e76d14ee6bb921cbc1783579d"
    },
    {
      "Start": "bb37ab2226e54ceb8aece066c3404590",
      "End": "908dd451c5c7415bb21b63cbb5892871",
      "Id": "b4a903d810704f6babe24ff32fa4ed65"
    },
    {
      "Start": "739594ca886c4618b6d3070148af3bb9",
      "End": "6747cd70aa0749cab1f028b66251d30f",
      "Id": "22b45ff53c944813ad9b6ea78c6d01e0"
    },
    {
      "Start": "739594ca886c4618b6d3070148af3bb9",
      "End": "a915a67263b64442b3622998855914c1",
      "Id": "25c8a816dbfa419f971d3d4cc579330e"
    },
    {
      "Start": "94c5e2d5e00d46bea1ad9d4d307d2a65",
      "End": "b6a23f28aaac44929f9a46938c1f6eb8",
      "Id": "28938551ccaa4ae09af8d93bc8273eaa"
    },
    {
      "Start": "94c5e2d5e00d46bea1ad9d4d307d2a65",
      "End": "030d054073914c4589e08610a1038d14",
      "Id": "3293344c14884dc090bc83ce4b0d4ed9"
    },
    {
      "Start": "94c5e2d5e00d46bea1ad9d4d307d2a65",
      "End": "424e162e76ad48308ca09b9835c60178",
      "Id": "d989ac2010034694a41427d46b1abf69"
    },
    {
      "Start": "e039640299454677ad1691698e5a68b9",
      "End": "5076925b325c4d3ea93af591a70f0b63",
      "Id": "4685b09ebd9041e7a01407e74124d587"
    },
    {
      "Start": "b8567b385351466ea75313f4af0fea9f",
      "End": "41e3b762291f41a5986ddb5342a4e050",
      "Id": "f42d3cfba55f4bd9976160838f30f0c3"
    },
    {
      "Start": "f6c2ca5049074be4b61fb7640f632920",
      "End": "2078e75bda8646f1b3bc19b54cd9edc1",
      "Id": "469c33da673144398ea5923a84f367bc"
    },
    {
      "Start": "e718e2ec6ad7457987e562089c7e393c",
      "End": "546e5e731d2d41deb6ad64cdf9780ab6",
      "Id": "f16d824719eb4063ab12a4b14df0b0df"
    },
    {
      "Start": "981750dd0b724f56a0a0998f10a66ebc",
      "End": "e2fc2468e6614374a37837b939b7f7df",
      "Id": "1283245b31a1418ea3613dfafdbc8540"
    },
    {
      "Start": "dd5858f8bd574c27b0cd3bd37917977d",
      "End": "f2888620c9da40f19a7848b1ec3c6b59",
      "Id": "96e7d0ba0fbf4aa0b25814a3f1302d69"
    },
    {
      "Start": "0fa3300c58d041f1ab2e64997b62203a",
      "End": "8931a00e04bc49c2b5faaf0a157fc837",
      "Id": "2362d4ffd4e54ee6b7a746d82c396fa5"
    },
    {
      "Start": "cebf0842ecf54569b3999b30331631f3",
      "End": "bcd303bafe9b462b8ae82727db570b3c",
      "Id": "97cfbac2cec44a6eb4cbdf7ceb13d3cd"
    },
    {
      "Start": "7f71294c203f4c50a38b51a006dcf76d",
      "End": "f5403276f1444519a49a5930b334e4f8",
      "Id": "8a1a428791124981a0ef52f5f60b6794"
    },
    {
      "Start": "fc84d965cc194498a87bb950321fb2da",
      "End": "617d99674cfe4f88a6bff6b87a43ded9",
      "Id": "3c9e88ef67ef460eabcb8dbc02094d8e"
    },
    {
      "Start": "137823292dc242e98e04798a0af7e8d3",
      "End": "e3225ab6a9974803b7a61f4fe14e7e09",
      "Id": "70a5d14d5f2744719cdfd2bc202c0df4"
    },
    {
      "Start": "6ae1ada0002842eab1f4bf1f62084925",
      "End": "fcc88052c3374a4888df3f50dfcc05ff",
      "Id": "d4ae0e95e48247b0a4a47fa7610ec8b8"
    },
    {
      "Start": "dde5c1d5871c4fa994bbfc6c8804fa3a",
      "End": "07ecac368d1e43e6863ec6c456e92ba5",
      "Id": "b4ff8356412047e092fec11d2e2c6f58"
    },
    {
      "Start": "ced7b70a9cb34440877bb7668cab53cb",
      "End": "c7c14865e49347a9a1a3f79f9c14f5e0",
      "Id": "1d7be362b90a4348aa1b077766d35ea0"
    },
    {
      "Start": "f39fd6eaa62541519d4c001702ca499e",
      "End": "caf7617145af4cd5964c2e6ac5fd7e3b",
      "Id": "e5f6d66088ee41a1aebad1bc9110fb8c"
    },
    {
      "Start": "ac822b8e65b14c46a47af9a55c51d94a",
      "End": "1d79655277d845b296bfa43bafcbd8d8",
      "Id": "72468aa3807e4f07a24ffb722fdc0187"
    },
    {
      "Start": "a15fd245363d40a5a7450416dccff16c",
      "End": "1aad3f81c3fb4d0590de34ee48471942",
      "Id": "85c34f2a0b7646308132f0c03276d38d"
    },
    {
      "Start": "8f98ebeaa6784729ae6d3a1c820727ac",
      "End": "425fa817d8064cbeb033606952c22d47",
      "Id": "af01e332e8b74fc6827bd1e0dd4e4fe0"
    },
    {
      "Start": "69622423bef2469faffacfa2e793fcb0",
      "End": "82248fe0df264a8aa512ec44aa631b09",
      "Id": "1d8dcb7920d04e3cb23d9c7bf24c66f3"
    },
    {
      "Start": "820e5e6b05c9455faaee7d733f456144",
      "End": "22a91bc569e14b0486e19281f546fb5f",
      "Id": "e77007f18b494b6f9eba6e158b205943"
    },
    {
      "Start": "2927263b15574259b20f76c7f7744176",
      "End": "bb52d3c0e3d940dd961d69f966c74ba5",
      "Id": "add61069a80d428693283fdd4dfd83d4"
    },
    {
      "Start": "c27f8bed0f0b400d97f563c15bb1b713",
      "End": "bcdffc6ea7254ab2bbb516644cd26b59",
      "Id": "de62fc48f4d4459ba9b497b2518030c1"
    },
    {
      "Start": "446446727ab14290ac195893ef896e1d",
      "End": "902e0dcf6e1b4551b7bda915af04fe46",
      "Id": "f2fd2b7a8ab04c6ea1628f3b7bb2a6dc"
    },
    {
      "Start": "ee999f3b9899481398d272c8c3877396",
      "End": "61a867da8f9b444a987284891032b32d",
      "Id": "d1fefd72a54942cc8bbf682c72e47605"
    },
    {
      "Start": "0c785ee4ab37434a8252aa365e730f21",
      "End": "098cb1bb0f8e4160bc4daf06a44414cf",
      "Id": "f75fc0bd179d4e489bf76e0defb2327d"
    },
    {
      "Start": "0c785ee4ab37434a8252aa365e730f21",
      "End": "95323475f4e944c980213dd41ee7d33d",
      "Id": "e514417fa8e843048e019ea366b676f6"
    },
    {
      "Start": "0c785ee4ab37434a8252aa365e730f21",
      "End": "442bf041ab98462a96d6f6f6bcc61888",
      "Id": "512a28068fa64f879814bc4bd382f07b"
    },
    {
      "Start": "0c785ee4ab37434a8252aa365e730f21",
      "End": "0a8bf0833e2841f2973d3196a3e27759",
      "Id": "ad6847b71aa1418cb791091722e8d039"
    },
    {
      "Start": "e823c152b34d4db5a8eb9446d6541e6f",
      "End": "b38a4d22b0644c44803aa6b0d205d74f",
      "Id": "47246653a00944aa8cd90e02b50c2c70"
    },
    {
      "Start": "d3788bce00cb4fee89afc1d2322555eb",
      "End": "790ed50adf684225915e17cf87866038",
      "Id": "f7121fca7f414d67a05b4283c1532993"
    },
    {
      "Start": "d3788bce00cb4fee89afc1d2322555eb",
      "End": "ff619ff0c07c4be1ae5765d98c0b9659",
      "Id": "9558e6a410524d37bade087d64f247d0"
    },
    {
      "Start": "d3788bce00cb4fee89afc1d2322555eb",
      "End": "3f26a79372e44497b8a1b7405ecc3e29",
      "Id": "20f775d31b6142618172b16af5b4ec66"
    },
    {
      "Start": "d3788bce00cb4fee89afc1d2322555eb",
      "End": "fe235aa105e14b9b91c6304afe24e505",
      "Id": "7f7a2295e19d4b32a74a56e1b26c7216"
    },
    {
      "Start": "7a8077aa0e1549d8a250893327ea2de9",
      "End": "dc27bb56114640e48d35c0dce2484c10",
      "Id": "22c0cf53e4f848fab16eb7ab856a784d"
    },
    {
      "Start": "c4c3239bd57a4033bf495b807ed66074",
      "End": "ed9f7a073cdc4a9981c29cf9ee3aec5e",
      "Id": "d900f2a39bbc433181e3789ad67bf09a"
    },
    {
      "Start": "e4a98e3f7e6d4f949969cacbec208d1f",
      "End": "1e35df08b2674990b1ca749c0171af32",
      "Id": "d330ca303237455a85cb29ac664b7691"
    },
    {
      "Start": "e4a98e3f7e6d4f949969cacbec208d1f",
      "End": "0a7d1ba706ef411193b17f6fd50a3814",
      "Id": "e4b55682ea0d4a1cae91a1a602cba479"
    },
    {
      "Start": "e4a98e3f7e6d4f949969cacbec208d1f",
      "End": "fae19768aeb846d7a18a1f5f1d916190",
      "Id": "e9d51d19fa554791bd16f2d932478074"
    },
    {
      "Start": "e4a98e3f7e6d4f949969cacbec208d1f",
      "End": "f06af758b2294500b41b654770f86a82",
      "Id": "86484b191773443fb10256b08498e28c"
    },
    {
      "Start": "6a6e0d2010ba4f558de3b0ded1f30317",
      "End": "0fdf8197ed1447f6bb52aebf0ab33f4d",
      "Id": "30459d2d24d546d0830022e0709086f6"
    },
    {
      "Start": "6a6e0d2010ba4f558de3b0ded1f30317",
      "End": "0a7e6c50a1604a398c19ac32024e46d0",
      "Id": "26db60c2e80b419ba6130656c1427fbb"
    },
    {
      "Start": "c1c1f3f400b94f2baddf7e17bc5b2728",
      "End": "c7f187a5fac8407a9497b165acbb279d",
      "Id": "3becd43dea8741ef90c69f5f3cb96c71"
    },
    {
      "Start": "c1c1f3f400b94f2baddf7e17bc5b2728",
      "End": "df19886dc25c4f52b853ed09672c3ad1",
      "Id": "cf88d045f9c4466da66e02aaf690d7ab"
    },
    {
      "Start": "328793c63f9c45afa6092954690fb55b",
      "End": "3832c8c1247f43f3a51f43d42baf89e5",
      "Id": "0ca616a25a02466c80b4615815f1d82b"
    },
    {
      "Start": "1b6f6eaeaf7b43d192c41a263c578876",
      "End": "c0eeb6367ec944e4b8db3f65e851d603",
      "Id": "39f46e4695b1440dbee10b45d0e8a435"
    },
    {
      "Start": "76be8160deb8453a88dc7bd97626b28c",
      "End": "6d49daae603f40709849bb9a47a32a98",
      "Id": "a14bb0c1bb824b0b92b5f517d214e770"
    },
    {
      "Start": "e1fee8836ceb47d9abf9d660103f3d64",
      "End": "17fd9be3930e49b98a82e08c196aebf2",
      "Id": "906c30ac0a30454cb84872d8fed9fc5f"
    },
    {
      "Start": "e1fee8836ceb47d9abf9d660103f3d64",
      "End": "82a4c45658dc424fb03d795708d78caa",
      "Id": "2489e92b83224bce999ee0fe82e71593"
    },
    {
      "Start": "e1fee8836ceb47d9abf9d660103f3d64",
      "End": "c81fab2b5a8e47bfb7ead6830b2a6540",
      "Id": "49ea24a1b196474ba89548c887860021"
    },
    {
      "Start": "e1fee8836ceb47d9abf9d660103f3d64",
      "End": "d8185577f834408fbf6ab75839b38bef",
      "Id": "712c87d5eaf94f60953481b4167516ca"
    },
    {
      "Start": "e1fee8836ceb47d9abf9d660103f3d64",
      "End": "0f7e72e935994b5eb433e294de0c6dd1",
      "Id": "89603a7599404622a9a83f304798495b"
    },
    {
      "Start": "a4aa58e43b9241fab010762d3d2c85d9",
      "End": "eb8702c9b36145ebacb759a883bf5ab1",
      "Id": "b560aa12a103453981e40fe527f35c8d"
    },
    {
      "Start": "042fa6dbd5d34728bde83b132150db23",
      "End": "8c5aa18965764901bb3fe374cbf33003",
      "Id": "3204b90fe2f64ce6a2a462e91d31f7b0"
    },
    {
      "Start": "43a40a4eb1454ffd8ad146fd505e2d4b",
      "End": "e2d7f25e6b8e4c0da05fe19d2c18f710",
      "Id": "9c725c3c8c2c48e3a40cd8f89b8fd5b8"
    },
    {
      "Start": "44942b37e17642cf82d27405b5cb4f14",
      "End": "46716163ecf0432ebe82946dc8d48395",
      "Id": "fda353bd6cee44d7b3f1d1e5b381efc4"
    },
    {
      "Start": "dc63aa82e92e4078aab37fbc1138a80a",
      "End": "a7a7f0a5a5ef42b3b9f42b6dce07cae1",
      "Id": "15ab9e259b334659ae6b71104bea7198"
    },
    {
      "Start": "a102f04dbb93488c9643e84054c04f84",
      "End": "d0a571082bfa4f31970df3f1113b1cbd",
      "Id": "d11429fd26644d21b518cc176f6a5a56"
    },
    {
      "Start": "bd3d55418c1946fe93f27f894793f0dc",
      "End": "d0f570e4cbca41979b800a6cbcbd2f2f",
      "Id": "0b56c1b0387a4ac4bc598cf9553c7fb7"
    },
    {
      "Start": "03fc79532bf04367b32c680922b2e25e",
      "End": "3d3caf875a0a4547adf0a6cad9bfb3bb",
      "Id": "88a30f90ba3441bcbdb3cd3ef668dfb9"
    },
    {
      "Start": "a9168529415f41568eefec9a8df063e3",
      "End": "c292fa09d1e0494194edc9f2815e8619",
      "Id": "9ac2822169174a9fa0b5facb481df75e"
    },
    {
      "Start": "556561ad13b44522b996d8117d9cabdf",
      "End": "2e2785e20f7d42deb6bbcc0f1b4d8b54",
      "Id": "858d345067f340a78803380dc4dc13f1"
    },
    {
      "Start": "556561ad13b44522b996d8117d9cabdf",
      "End": "45d552f734cd47fab42e0e5c98866aea",
      "Id": "e9f827b426cb474e9983711d302f975e"
    },
    {
      "Start": "64e5b009b4e5426784ad4ba742b236a0",
      "End": "16a3f8ee6ab244e49bd20583bc34e807",
      "Id": "1682d498863040cea5fc2a1063444b70"
    },
    {
      "Start": "64e5b009b4e5426784ad4ba742b236a0",
      "End": "9c4d1214039846fe8717d7de519ebd7e",
      "Id": "4fd60f7a0358413ba1821bb0be45e873"
    },
    {
      "Start": "e0865f02dda846dd9031406da955377b",
      "End": "b654658d9f1e4728b5537a08e44ef895",
      "Id": "cb581b83946346be97c293b7157ae417"
    },
    {
      "Start": "9de0a3d84409407f8b0e3f1543d02adb",
      "End": "337d77904093466cbbf49839a488479d",
      "Id": "1079fb772005435488702a3daeb0cb5e"
    },
    {
      "Start": "a65382ab9f8542d282b6b038e8bfec67",
      "End": "a53c27e6ac294f1ea7599ca280331f47",
      "Id": "a1ed2e398c55458b95ffb705af5af802"
    },
    {
      "Start": "0d1dfee863dd4e258cdee3561f4e65dc",
      "End": "6baf6752d9fb48bf98a17da8816ea9c6",
      "Id": "2087be6081c34506bbd8ffb794e200ae"
    },
    {
      "Start": "917ecd9fbca3489e858eb411251d330c",
      "End": "89bfa94126f443f8a20e415db173c75b",
      "Id": "f922fe1ef3774419b74a43af53f8737b"
    },
    {
      "Start": "41fd8d4ecad74e68b45c18a512107917",
      "End": "79a643510eb64af2bc47416846914cda",
      "Id": "c9644f2db90b472faf045edbb8a01828"
    },
    {
      "Start": "d861d7fb77044c0aaa55b98e445ec66d",
      "End": "85b512c3de634e128d4d7786d5b056e9",
      "Id": "9d01c41b87464f4c9a240e165a5500a2"
    },
    {
      "Start": "70ee3e2027d14b4eac4c1b8522f028f9",
      "End": "e82ade0f02fc4aaab4c79a33c00e4927",
      "Id": "7f1360b8ba3b4251966ed6b0998b3978"
    },
    {
      "Start": "70ee3e2027d14b4eac4c1b8522f028f9",
      "End": "108040412792409ca2c2011500d08a99",
      "Id": "ab0d9dbd16a54fe191d462d7fe0884b4"
    },
    {
      "Start": "70ee3e2027d14b4eac4c1b8522f028f9",
      "End": "9f6b30613c6746da90c2dafbfbbd8809",
      "Id": "62f066660b3d4ad9b78fcee735c824ed"
    },
    {
      "Start": "70ee3e2027d14b4eac4c1b8522f028f9",
      "End": "c1fa8a12f7ce44b39c27cbd75c10a4f8",
      "Id": "5a18cbc71e4e41fcb6e9d08147af3149"
    },
    {
      "Start": "70ee3e2027d14b4eac4c1b8522f028f9",
      "End": "475a71511246496182220e718759738e",
      "Id": "8455a60d1afb4a978b6069167b44985f"
    },
    {
      "Start": "70ee3e2027d14b4eac4c1b8522f028f9",
      "End": "d15ae2129e204444b6d2bdc46ab3463f",
      "Id": "49d0da00509f4fc89fd793d1ed13dd20"
    },
    {
      "Start": "70ee3e2027d14b4eac4c1b8522f028f9",
      "End": "887d99328eb64d109978b88d12a11912",
      "Id": "93c2e9210add4d269aad188f066550ab"
    },
    {
      "Start": "d8d2b60ef80341a8a67f695de85fbd07",
      "End": "704073543d7d486c87f8d351ce3f2bd6",
      "Id": "033faaa1adbf4179b06d5a29bdb54d0e"
    },
    {
      "Start": "d8d2b60ef80341a8a67f695de85fbd07",
      "End": "46266b39368f4584acb31b8e46eee927",
      "Id": "20ed490dda2543f5a33aa74bdd208882"
    },
    {
      "Start": "aeac68351d294c74826000c3ba77aa01",
      "End": "62bf1fbb11fe403081fc0e7b33e96623",
      "Id": "64767977b12e4ec98d254690db776350"
    },
    {
      "Start": "aa558a286daf4ba7a775c7856400fb77",
      "End": "174e84f34987470e9a9c074650d5aaa9",
      "Id": "f87a3ec8f0ab4518b941968825f28297"
    },
    {
      "Start": "aa558a286daf4ba7a775c7856400fb77",
      "End": "444d235eafbc47a88451a14b27e6d9fa",
      "Id": "91fb9490a41244beb52cb9443960fba4"
    },
    {
      "Start": "1d274bc88e2e4edf94ca36b0f5b63a4d",
      "End": "d6a01970ed454d6f804c95528839c641",
      "Id": "5eeace1785d94a549a0cc40fd7dfaecc"
    },
    {
      "Start": "66b25964cfa64c73b9a295c0df33b813",
      "End": "519154faf4d3449db6dce60831225bb3",
      "Id": "b526b0e479874d91aff205fb5efb2b5f"
    },
    {
      "Start": "54c8a199e8e049f999a1439fdff51068",
      "End": "b7d2e3a1d0d640d184893b8a37393e6b",
      "Id": "b6ef5e6c711b434982be969e13d61892"
    },
    {
      "Start": "54c8a199e8e049f999a1439fdff51068",
      "End": "a5c25cced96b45cb8fbe339f20ff351a",
      "Id": "cedbf632df8f4c92a5fc987d578a4348"
    },
    {
      "Start": "54c8a199e8e049f999a1439fdff51068",
      "End": "93b0036f355d44a78b636d4f9feb9996",
      "Id": "a70d05cff35a488b9d0776901598d1a6"
    },
    {
      "Start": "54c8a199e8e049f999a1439fdff51068",
      "End": "40d3ab4770ab4ecca9fcbeaeb1786763",
      "Id": "18e1b156c7994236ae2820a07589385c"
    },
    {
      "Start": "54c8a199e8e049f999a1439fdff51068",
      "End": "cafff1accaef42efa3d80ecb8ea885a7",
      "Id": "915c6bc07421486ea61ad5da398ec2a2"
    },
    {
      "Start": "54c8a199e8e049f999a1439fdff51068",
      "End": "17497703b0df45e085d9d6488bf51291",
      "Id": "399f3d978c3541dd821eb9a5d5cdecb2"
    },
    {
      "Start": "54c8a199e8e049f999a1439fdff51068",
      "End": "338db3ebdb4a4a109e9bd8e876da6362",
      "Id": "f1c98d0023344f70a81c41d13a34f7ec"
    },
    {
      "Start": "0c504c2da46646eab63e2d91a946c084",
      "End": "1ad159d345e34a059e13ea80735e44cf",
      "Id": "c6c6f9d6732841d6a32f636d92b3c464"
    },
    {
      "Start": "10d9fd3861ca4aa5b1c5d7d519dc16fc",
      "End": "1fa15a8c8dd34ddc9089880f815590cf",
      "Id": "7ee9ee44a8434736b98f034b08e4621a"
    },
    {
      "Start": "c4c4ced985aa4191bc7bbececf60bd4f",
      "End": "474f94ca6b2b4664afda93155b551c64",
      "Id": "b48d22da97534247ad51f7164fd74eb4"
    },
    {
      "Start": "2e107286686d4b879a29f47610e3ebea",
      "End": "8de0c59782d0471ba9493a246606366b",
      "Id": "0aa8edb95e2845acbeb3ab872e1a4a4e"
    },
    {
      "Start": "805c698a44f44473b6606942fb714070",
      "End": "fe45bc536a604358b2e82574d8819780",
      "Id": "b16951fa75634419a11e964c6106c273"
    },
    {
      "Start": "62f56c928db741248b5b9f8acfd4476d",
      "End": "457d99a170bf4ca69223dfee793ec05b",
      "Id": "b346b77321c6435caaae34d8616d6845"
    },
    {
      "Start": "62f56c928db741248b5b9f8acfd4476d",
      "End": "8490dc80773a4cf197c08cfad913d141",
      "Id": "89be02755beb408382d9393e89b105ee"
    },
    {
      "Start": "62f56c928db741248b5b9f8acfd4476d",
      "End": "41e1f1ad682b4e5ea20421e558e1d8f5",
      "Id": "203850eb4ffd4355afa61b3bc208aa0a"
    },
    {
      "Start": "d5d55107b61149be99b429c0c6874a79",
      "End": "f0ba6145631e44afb84a63e7ed9e3612",
      "Id": "1048e32fcb1f4834b8b2957c8d8d73c2"
    },
    {
      "Start": "d5d55107b61149be99b429c0c6874a79",
      "End": "e34372e04dd34d169744f5ada1912838",
      "Id": "6f3b04e9653a455e8d7598ca1aa36b01"
    },
    {
      "Start": "a4025439f0ec460fa891e0d2d6fecfd0",
      "End": "0f498dfc4d97469a8c6060ef788ce0bf",
      "Id": "0014bb23ae474378a8ef31d93d369a51"
    },
    {
      "Start": "a4025439f0ec460fa891e0d2d6fecfd0",
      "End": "3eb6f260a7574ba2ae31ecf107cc5510",
      "Id": "d6e78bf20f5946bd9535e503c413d366"
    },
    {
      "Start": "a4025439f0ec460fa891e0d2d6fecfd0",
      "End": "aa00f1d3375948fa9763e8d6a8c866ab",
      "Id": "c5809db5ce034dae80d15b6b7a9398dc"
    },
    {
      "Start": "a4025439f0ec460fa891e0d2d6fecfd0",
      "End": "78494ec87a9c4839ab83952395006a14",
      "Id": "bb56d83faa36412889edb868437b17cf"
    },
    {
      "Start": "49c409ca38f249ba83352dbdf6599ed3",
      "End": "8fce3460f85e44f3ad454b3805fd19f8",
      "Id": "3c5f9503bfed49ac915dfb11b10a60d9"
    },
    {
      "Start": "49c409ca38f249ba83352dbdf6599ed3",
      "End": "4f6b23e5ca4d49bab917db53ea9400e6",
      "Id": "5b586ffc07fe4ce2a7a607963a509e80"
    },
    {
      "Start": "5cbcfdc298844655b148115c27d4aca5",
      "End": "d4c89ea61e6d4d1d958bacfb0ea59ae0",
      "Id": "54e83ef34cd04e60b6af605c9abf82ad"
    },
    {
      "Start": "3f5e4d1250164729aec270df606d90cf",
      "End": "2d877b9459f74dd4a23ba6f253efd2a8",
      "Id": "67bd981594284c83becede4b67efd30d"
    },
    {
      "Start": "b49ad824425a42d58cf804269936f84a",
      "End": "90495dee8ad1494e849241276fa770b9",
      "Id": "e9ddad6425a3476ba8f96736f5c0b2ec"
    },
    {
      "Start": "2e65d8e2f0624575bb6ab470e47d1c01",
      "End": "bb72a7fe9d50439ea92d1bc71d583d86",
      "Id": "5723f26cfa8c4a39b35ea4f190452eac"
    },
    {
      "Start": "e5d01c1a2be5436b907d5ddaa6f894c5",
      "End": "3e4c36e1fbad44b8a4dc36f2afd2b3ad",
      "Id": "2e15a6b5c808481ca80b48257b587deb"
    },
    {
      "Start": "f156478f829f45ed9747eaf89ecef143",
      "End": "189eff9d529546158b9c74dcbb329f1b",
      "Id": "d81851fdd69d4898a69d9404986fe42d"
    },
    {
      "Start": "a280b1a93a0447389a92b04ceb91e574",
      "End": "f06c5d86f3ac4c9189a3b334e0a889d2",
      "Id": "37a7fa0db793443bb44399852a3ca963"
    },
    {
      "Start": "a280b1a93a0447389a92b04ceb91e574",
      "End": "bea22f48c5224d9d9f6b343bc26e36b9",
      "Id": "113d101893c541c5840853fb75844b75"
    },
    {
      "Start": "2e359ecfc29649a9bf990017c79da11d",
      "End": "512f95d9f3744f8da4aa3b2179c20ead",
      "Id": "fcf2c64b3a2e4b0d9c8a52c2073d31dd"
    },
    {
      "Start": "2e359ecfc29649a9bf990017c79da11d",
      "End": "479c6ad47483429f96d0200914853691",
      "Id": "720c94f6d32849e2aed811fca681475e"
    },
    {
      "Start": "2e359ecfc29649a9bf990017c79da11d",
      "End": "29e1c9368a0348e19b7b74a2374a1648",
      "Id": "2c98592cf68345ea84cf88ffac3795cc"
    },
    {
      "Start": "2e359ecfc29649a9bf990017c79da11d",
      "End": "139354eab1d44026a0d109769091c20e",
      "Id": "674c39a6934d4fada17604a6a743f7bc"
    },
    {
      "Start": "2e359ecfc29649a9bf990017c79da11d",
      "End": "da4a7dcdbee340ef8614945680df7839",
      "Id": "4d3c1cdbff21447ab7fc50a742eb18a5"
    },
    {
      "Start": "963b16ab1c6142a89ffa4850926eedbe",
      "End": "eef2a7ae14df47bdb7a00987526eda20",
      "Id": "bbf65ab6580443709f858488a82cae3b"
    },
    {
      "Start": "2286fdefbe504f129115d0cb935df9fe",
      "End": "be4ca5840ee94b6db861f37cebd00c40",
      "Id": "37d30f8fc8af493aaacdb0591c6047d7"
    },
    {
      "Start": "bceac5e2948c4f189e15c6f2e69c8ea3",
      "End": "81226f489d8d4c36ad0e2f6bef94d961",
      "Id": "19e392af59d64219b853ca0193c4600e"
    },
    {
      "Start": "08d30e05562c446c92f90e3d149e0119",
      "End": "be182f24fe6b48ec8eeda0389231b3dc",
      "Id": "59d9fea8df1f414195c2e26bf08390a0"
    },
    {
      "Start": "0f6d721c6db64e53983444e53eb38888",
      "End": "50a5595f6c0a4f178c6bc08dc0cf3d4d",
      "Id": "0d05561036b344e9a4eb78d36946b9ec"
    },
    {
      "Start": "5be13821d05140ecaa2907b901ee964d",
      "End": "7f50b439fc434fcabef6008eeb17ca52",
      "Id": "4fbced6225bf4f4b996e8216f435e880"
    },
    {
      "Start": "8c1079a1c9484dc681f85b82ef5ffcd6",
      "End": "30a0ff7d0b954b11a6c72c7393628ed2",
      "Id": "5e89bd0c785b49d0bcf6a4930a19c5bc"
    },
    {
      "Start": "8c1079a1c9484dc681f85b82ef5ffcd6",
      "End": "5ef491baff7f400aaeccba0903037ac5",
      "Id": "28753ce9828d46ab854af754a56bb6bd"
    },
    {
      "Start": "8c1079a1c9484dc681f85b82ef5ffcd6",
      "End": "1ea1c326ea0b481aa777d9f5cac7b127",
      "Id": "935440b22999473fb9117446116ddf4e"
    },
    {
      "Start": "8c1079a1c9484dc681f85b82ef5ffcd6",
      "End": "7aeaab734cf44684bef890697bddb689",
      "Id": "02c864dd40224e579d25d75490c69ab9"
    },
    {
      "Start": "0008873d459a439daad9536df81b255d",
      "End": "a06f3977ee684b40813dd5458de8598c",
      "Id": "51f4f90c5f534655a9bcdd98c4001c40"
    },
    {
      "Start": "397fb47e05744f3ab38401acacc847f2",
      "End": "fcea568012b643499c415282ecf1dd68",
      "Id": "2d2ab2b672bc45bd9ea7d29056413a74"
    },
    {
      "Start": "778503540a44480586926cbb22fbe481",
      "End": "be8ca6ec0447451bafd277af7cdfd703",
      "Id": "d22a9429b21243089a63cdfcdb79b9d1"
    },
    {
      "Start": "9b82221ac48845ae92bf00a68150f36c",
      "End": "037faf60332c434daf0e3460b9e18eb5",
      "Id": "f1c1d8feae654725960a149655c9a9b5"
    },
    {
      "Start": "6914c79ae0574d78bd40dfd65bae52a2",
      "End": "b416c6eec6ac46d4b34aa0f8e932d6db",
      "Id": "9c41b4c19d0744f7957c253f37b813dc"
    },
    {
      "Start": "fae1d90e40f04da29c68b72182a98e05",
      "End": "b0e6fbdd4a2c46bd8a00171e0b87949a",
      "Id": "b3ff60890ddd49888af05df03db4511f"
    },
    {
      "Start": "5ab8574e181d4842b19fbe2ff8ee0f69",
      "End": "f03b116aa4e04c04b946a2a09a28c93b",
      "Id": "afb447640c9c4cba82278e02e275eb61"
    },
    {
      "Start": "dcc842849e6540a68f587c213965c456",
      "End": "41242a71670146c285c458951ac6b2f0",
      "Id": "3d5882c8b6ba4ac3ad8aff27360b3e08"
    },
    {
      "Start": "6020b4260ce64d178725848ea92e3166",
      "End": "8164fd3479c64798a23726e6fff7e562",
      "Id": "b049de9934284217a9a95a8c2050a609"
    },
    {
      "Start": "4d92ed6a495a4112bf4071b091b652ee",
      "End": "6df780ed24fc4174b6ad2da0d70f00f9",
      "Id": "6b2f6e194e6e4897b3fed20de84c2112"
    },
    {
      "Start": "2991d5ffc4d6472ba7e04fddf79b5782",
      "End": "fbaea39771f04e19a0ef3b179f33a436",
      "Id": "8211dab39eaf49d99bcdd99a87ecaad6"
    },
    {
      "Start": "a90a2278d5bd4675a28b20e2539ad3c5",
      "End": "b0c1f3dfce6c45f0a5ae1cf8ccd55f74",
      "Id": "0d3383b21c5b46dda9ad7f459243676f"
    },
    {
      "Start": "7c0ca9fa24694d578745421fe4a77c29",
      "End": "150cfe9b5e5a4a59a818c1793d876fe4",
      "Id": "66e099985571490e96b38ca5a1bce434"
    },
    {
      "Start": "88d09fef52034b89b4c27cabb36c1940",
      "End": "f28ac87cc2574c26bd1aeb3fec7ca9f0",
      "Id": "2ca8ff9fb2d346a4a9ba659fcd600118"
    },
    {
      "Start": "51db872441e14504b74e11bf180e1074",
      "End": "b92225dbb469451d8643ac48e1942ac3",
      "Id": "716a289e18bb461aa837c0d5894b7662"
    },
    {
      "Start": "3d37d27fd506432ab12f5d12c1d1b7aa",
      "End": "c01c020be3864110880de02ba72efcf4",
      "Id": "ba742eb1e4c14805b60e09175b1bf849"
    },
    {
      "Start": "77b855ef519047f3a9f0a00ea1c527d6",
      "End": "54837ebb0ba74bada3a1a5a61d9c9fb9",
      "Id": "3419a4743e97406cbed03e9b1d099255"
    },
    {
      "Start": "49ca707e6a74406ea1ecb7ee549394fa",
      "End": "d1b5b2c6bc0b4f8a84c36ce2f12bb3aa",
      "Id": "f2db1ec65ff34909bb5a92c5be49984e"
    },
    {
      "Start": "79ce0d7792a442388dbe36d378ed9e7b",
      "End": "cab5a7e583f649038a8a0eb2be34a76e",
      "Id": "7cb772e531144dc8b2b5e5d14f3fdab6"
    },
    {
      "Start": "735f3dba8a4f4cb8bb6ba1dfeabcc7bd",
      "End": "b489d4777525421e9e00bb8db0321a98",
      "Id": "e6fc2f4d7e904702810797439a2b92cb"
    },
    {
      "Start": "29dcddc045df416cbd16b87b7dbbca8e",
      "End": "f46fbc824bdc4856aab8ff3a02168025",
      "Id": "da033dbb1b3b43d0b0c8af64097ed40d"
    },
    {
      "Start": "4781bd0137d94618a130c3e2e2bc19cc",
      "End": "fefc87766d30492f80c1c749713d96e1",
      "Id": "a101fd66498d4a769b73cee5fd6e9f28"
    },
    {
      "Start": "8fee5092f23b4cd1a4f5707f97236d99",
      "End": "1e7d38c6ef884fa1807c142fee73a3b6",
      "Id": "bf705cb7a30f42c5958311b145eff54e"
    },
    {
      "Start": "37d1b01941304dbd91768e2d44111363",
      "End": "f334efabd3044bf6a4badae344494aef",
      "Id": "f682d8736c08410e9deadcf08e2f09da"
    },
    {
      "Start": "00930e1e718c44698216b2a0bf1cc751",
      "End": "3e4921cad0c84d308aaebc41dda47b28",
      "Id": "09d77c6dbd404189a66508e8f31b338a"
    },
    {
      "Start": "a75a38196458460cafaef6f9ca819109",
      "End": "8ce484a39d5d4db2b137f602ef9fb3fd",
      "Id": "ebeb436ce2d44a65ad024256b1951c74"
    },
    {
      "Start": "163cad64302842d8a401c45c8b462430",
      "End": "10ed7048a0ea4770b513496cb7503cd6",
      "Id": "50c66bd1cead4d849046f141702e4987"
    },
    {
      "Start": "163cad64302842d8a401c45c8b462430",
      "End": "31c48935707b4178b0c1fa996df956a7",
      "Id": "530c9d97547f4ff5ab7ffb7f2287b83b"
    },
    {
      "Start": "a8878950d10d4204a0b790bffa830ef8",
      "End": "99feac228b4d40cb8de4199758951b9f",
      "Id": "153ab5e09a0446809bc74165d1f8a1e1"
    },
    {
      "Start": "1ab9980e7a134df88a6b1dd2f4a50c45",
      "End": "60bf926d4a354a41bb0101ce4f445fbc",
      "Id": "eff810ec22d44c85b0c38dc643c44144"
    },
    {
      "Start": "07ebe3e9f8d144ec88df0d1839f61be7",
      "End": "92e4e8bbbc834b42b4d0f73a4f127939",
      "Id": "b73d9567aa0e48d8b1559f766f634878"
    },
    {
      "Start": "07ebe3e9f8d144ec88df0d1839f61be7",
      "End": "bc0fb31970ab435cb093a9ab2a381326",
      "Id": "574eafb5d7f64ccdaa87f039016a3f91"
    },
    {
      "Start": "fe88bc714dc043548c8e2e060825bf55",
      "End": "bd3dec8a10104bea83399c62c4013c93",
      "Id": "97bd83a31dc646a98bfdb8b95df6c3ed"
    },
    {
      "Start": "3cf476594a1044a6ad224c3ec837b699",
      "End": "ab6e599d9fa94613b5b93d9314cad8e1",
      "Id": "54326fc2323c4c3da840038c563f0c1b"
    },
    {
      "Start": "32b1bea5567445ab921794eeb79c6807",
      "End": "9a6ac3bfac114941a310309ecf6373f5",
      "Id": "c276e51f008e4b43b4d8cb9c05337b5e"
    },
    {
      "Start": "9e894d6b55e4468e9c63793db0d1d043",
      "End": "b6b62bd840b242088a8ce0bf82cff101",
      "Id": "b8f14c61860c472fbb18d5c663cd2186"
    },
    {
      "Start": "a09e607174a44acc8e2f7d11ebc534b0",
      "End": "364d6f9036154053bc550d42d5497cf9",
      "Id": "9f3cb772ca6a4f71b5521678584c7971"
    },
    {
      "Start": "df6ee5fb091e4f118d1fe151a88eb920",
      "End": "986504f470f3402186dce41cf8063d98",
      "Id": "8b462596e24c4593aca0133b171f6462"
    },
    {
      "Start": "fa4674f1acf94d2e9ea4df0dc0698732",
      "End": "d770130d8c044ab79bb3c6027fbfae79",
      "Id": "e0895158856e43febf22e8dd64926c75"
    },
    {
      "Start": "d6d2d0f607624f118fd6aaeeaef12d15",
      "End": "22e726ba537840ddaa4a23dcca39f491",
      "Id": "2c6674bc93974edea7ff6c2f3ecf71ee"
    },
    {
      "Start": "e631571921b847aca8d3e5ff7eb85c85",
      "End": "190ff922ba10449b969e3c17623e0516",
      "Id": "ccb6d32c862e428ba789644c6137f648"
    },
    {
      "Start": "93db42dc86b44fc8b342a5aa3ad3b046",
      "End": "86f29f511b2e452bb4020c60f4974257",
      "Id": "81f977fcb48d497bb30716ebc91ac739"
    },
    {
      "Start": "12215b5ce86a4de8b856e59c2a72a0d7",
      "End": "3bd4ad26a0b04f3682edc7253c8caf89",
      "Id": "b5179be93b65430d93de2a465fa3b147"
    },
    {
      "Start": "6ac6d8364028446e93820f043894ecab",
      "End": "55cb6aa78db840f693f71924707ab06b",
      "Id": "bca6eafadf3a4680b1e4ab96c7365f58"
    },
    {
      "Start": "8e354b5abc304d6b8d3c99bd575aafe4",
      "End": "57b750ab1db0444786aa3416c9e19760",
      "Id": "38ba8703808c486c86de17f901d7c2f0"
    },
    {
      "Start": "8e354b5abc304d6b8d3c99bd575aafe4",
      "End": "6ed9b2aa28d04e4695b519046fe15743",
      "Id": "c0e849f9c5a441ba855aae143ca8bfea"
    },
    {
      "Start": "8e354b5abc304d6b8d3c99bd575aafe4",
      "End": "5819c0cac1684c9f961656ce4292b3e8",
      "Id": "5ac63d027fe34fdd83da1198e1e6c286"
    },
    {
      "Start": "8e354b5abc304d6b8d3c99bd575aafe4",
      "End": "acc862d6b598468299698abc9d260f4e",
      "Id": "6ab7c00842914b4ab5790d8490217903"
    },
    {
      "Start": "8e354b5abc304d6b8d3c99bd575aafe4",
      "End": "106182b8d1ee4d70a2bd880812378cf7",
      "Id": "8a6dc24a6f604687a426664c7fccea5a"
    },
    {
      "Start": "c42c96df09224995bb08a2eab46525a3",
      "End": "19bd90730ad5488ca0555b67ba7556d4",
      "Id": "50383104fd5d4b608c83ccffe0d986e1"
    },
    {
      "Start": "302b61f27f024bcc8f2896bb70294f48",
      "End": "b2fd041d878d46b0b367e8ed825fd0f5",
      "Id": "f350685dd09f4b38800dc49c0d37e82e"
    },
    {
      "Start": "302b61f27f024bcc8f2896bb70294f48",
      "End": "3dd51b343ee44f2081d4eb05defb0454",
      "Id": "30e3d1348be1401a974a188a03d92b42"
    },
    {
      "Start": "15d4e8f5891d46ad90ea85ffe0d8eafa",
      "End": "c243ecddfd9c4d30947a591f4afdde0b",
      "Id": "ebcdacc6ca764cc0970861a7ea82ce56"
    },
    {
      "Start": "15d4e8f5891d46ad90ea85ffe0d8eafa",
      "End": "d68f41abf293491b94d2fa9e23d882b7",
      "Id": "e236fa79bbae43db86cbf183c40cc389"
    },
    {
      "Start": "2f641b0be17a4a44be33a72b16a080af",
      "End": "6a14aa53f15f459c8b2c18bc61742cb5",
      "Id": "6a580c1bbcd349e780fc3506ec15ba91"
    },
    {
      "Start": "f613890bf90e4f60a10de5d5647a6968",
      "End": "6d93044310d24af78f1853ee08397755",
      "Id": "e7b9f838e9c1444da6f3d8cc74c5e7cc"
    },
    {
      "Start": "a01f851559c74678b5acdf8b8d51aad3",
      "End": "eea2562ed95346c49d74ab88e9758487",
      "Id": "5f1a6a92a27f4993a149d083779c9b07"
    },
    {
      "Start": "09e016440d2c4e0a96bb466f01ad01cc",
      "End": "76a3b1dffb63418bb79c35730846dd8f",
      "Id": "197f909034404fecb804b505391e0493"
    },
    {
      "Start": "98fe8765f27d4c968c0f4690071a0543",
      "End": "120d73cfc3e34e29bcef5fb4b8fb3d57",
      "Id": "d119107e097844a8b1102e74f52dcfe7"
    },
    {
      "Start": "98fe8765f27d4c968c0f4690071a0543",
      "End": "0ffb1bc586914d139266f99c88dc638a",
      "Id": "59a7ea1811d54e1196deed35384129a6"
    },
    {
      "Start": "f77815ff2d5c43e1ad8d2626d079c238",
      "End": "7932d446df2543f2a67971d16cbfb910",
      "Id": "a9368a9c9dc2418caa6a252d5f8327ff"
    },
    {
      "Start": "f77815ff2d5c43e1ad8d2626d079c238",
      "End": "27201ef7a2f04d4d9411999667165c5d",
      "Id": "05bf9a0db942472f89381dddad48e19c"
    },
    {
      "Start": "0887aaaac4644241a53684becf1c2b3c",
      "End": "1175cefaca074dab8f84a1ac320b0afb",
      "Id": "07fc5bba709148c48cddb12133a4d45c"
    },
    {
      "Start": "31111a1222414e55b7a7a69fab8199b4",
      "End": "927e12a6962d470991f6e1da33633d6e",
      "Id": "d16ec879e9b048c592ccc1e5e948e633"
    },
    {
      "Start": "673af44d2b254e849e5e05a2bae823ac",
      "End": "8b6b3a23d9ef4714ae44990f94b75d96",
      "Id": "2969d38fe8e64ccc8a7baf69afa3fede"
    },
    {
      "Start": "b4d4fda06a6a4e1281731ae1deebaa6c",
      "End": "20be1fa6f32a40f6a30a12e2053936a2",
      "Id": "7f5a7cebdeea4f008164f849f1b1673d"
    },
    {
      "Start": "0712ad1e0c654b8c941a1a758005418b",
      "End": "378342aaa4e84180b983964470f9d27f",
      "Id": "1b8e38467307471385e524ec562af858"
    },
    {
      "Start": "820e41025c8f4b8a9f29cf14447c2ea6",
      "End": "b42fa692b6f6471ca8555e0944c11479",
      "Id": "2263e2cc3ca049a08bbe7e0967efceaa"
    },
    {
      "Start": "97c94248db354e9cbc65b698ac12875f",
      "End": "31b39f27f4334438946fa7e08a8bdb57",
      "Id": "a5350f3ccdee49caaa2e4b49f9c5d73a"
    },
    {
      "Start": "97c94248db354e9cbc65b698ac12875f",
      "End": "2c60e017bef14b54b2753c283bcbadaa",
      "Id": "52a62d5685d943b4849e29dcce5fc50d"
    },
    {
      "Start": "7b1e2bf96d4c46eebea80ab1b5b7d476",
      "End": "fa8ad06ffdfa43088c9f89fb08626c28",
      "Id": "70b47f8b1ce944beae105e54e3b1bc23"
    },
    {
      "Start": "a497fad2a9194c25a2fb72648c153cc3",
      "End": "bc0e77dca85b44ee981403be54333ab8",
      "Id": "84357aa8e7b3421197cd2aaa44ac398c"
    },
    {
      "Start": "a497fad2a9194c25a2fb72648c153cc3",
      "End": "98395b1321864a23a8ee8638c89fe6af",
      "Id": "52cbdf6e3ccb426ca1829ae32ff1b635"
    },
    {
      "Start": "4d94c391a8c245a09361ea07b65c204c",
      "End": "f054a9d3e6df4729bd14a20caf3eebec",
      "Id": "2390809c98e243b689933a53da7fe72b"
    },
    {
      "Start": "44baa87651d34e2a8eb3144f524ba62d",
      "End": "debd8dc74bee49809a49671d06a30b06",
      "Id": "ffc1c95ff6d749b987e13657c719c291"
    },
    {
      "Start": "44baa87651d34e2a8eb3144f524ba62d",
      "End": "afca03386dfb4d2f97c53561b8ae1d75",
      "Id": "0c3c52031f8b4f94a1f872fb875f0711"
    },
    {
      "Start": "c5b0c5343fc4412685a0cd66148be443",
      "End": "cbef253306f5468c91409c033aefa7e6",
      "Id": "d2e7dd19e58047b2a88717b12a9d7e44"
    },
    {
      "Start": "288ce0bd72674cf7bb5f1266a95a1710",
      "End": "7a6e4c15f8954f9799650e93286c8c24",
      "Id": "fbee3c8887cb45b99eeb503e38ff877e"
    },
    {
      "Start": "6ec9c94c754042c5a16d4d65c8959d0c",
      "End": "185eca8d84fa402ba846d70c38dd6c99",
      "Id": "a16864cf187648d08059de552bdbc23c"
    },
    {
      "Start": "3f5e3fca1d064973ac15f53be14cb59b",
      "End": "052ba8c4753e46b3aac54ec52bce01d9",
      "Id": "1c082b8000634e3da0e197f7622726fa"
    },
    {
      "Start": "a1e6d97db6f5438aaa97de294bb0380f",
      "End": "1c7481c5d66c492abc0ae158ccbccfde",
      "Id": "96d684bc03aa4a16ab7f6d87597d8c48"
    },
    {
      "Start": "dc59ff3dfe704e26b8406eb13907091e",
      "End": "98844aff40144045a440115f0d8452b4",
      "Id": "8f521cde69be484fa0c7792e0b0f760e"
    },
    {
      "Start": "4c37e2697e964bf491d22f8ad0ad6c36",
      "End": "89bedf6ba9544fb98d24c2513abd47a1",
      "Id": "6390578d35b1426c8a231f6d61a7313b"
    },
    {
      "Start": "4c37e2697e964bf491d22f8ad0ad6c36",
      "End": "93d7b195f18d4ca3be0b93d09d28b2a7",
      "Id": "2e2050a5bb41489cabe92856b2895de7"
    },
    {
      "Start": "4c37e2697e964bf491d22f8ad0ad6c36",
      "End": "bbd60fcc93344cb193aa15273c65fd2d",
      "Id": "e72f7eafb93a49bfb941a91bee078264"
    },
    {
      "Start": "4c37e2697e964bf491d22f8ad0ad6c36",
      "End": "c18e7d5419a14a7e998eb1ac2558badd",
      "Id": "2325b5b70d014f95ad6169ef2bd0c17b"
    },
    {
      "Start": "4c37e2697e964bf491d22f8ad0ad6c36",
      "End": "7d91257b88ab440abccf0b1984e5adca",
      "Id": "1fef5e1b004941c3b689f3168f4607e6"
    },
    {
      "Start": "4c37e2697e964bf491d22f8ad0ad6c36",
      "End": "e5397077258644218b8a05126530d5c1",
      "Id": "e20aad56c470410f9a9c0ecc63d2dd36"
    },
    {
      "Start": "4c37e2697e964bf491d22f8ad0ad6c36",
      "End": "d6a26b633a5d4491bba61316da40af91",
      "Id": "8166045ea363491da7044aedc8ff1368"
    },
    {
      "Start": "6e4c8abdbb51404aa62ce3564d0c46b1",
      "End": "5ab513cd827843109e22968be714129a",
      "Id": "463b892e5e0344b984515bbd2315e852"
    },
    {
      "Start": "29282f29c50f4f7d9ad76d89b58c13ad",
      "End": "a9e23f3044a8429fb36ea2d92a312fb5",
      "Id": "ccf279cf2c3f40678f9e990e8accdf32"
    },
    {
      "Start": "51c21e5639b1459683360ea632a5e115",
      "End": "ee6161b39022486e9b9a60a14ded8924",
      "Id": "a96a13c8d58e4f4ea913d19fad9a46d4"
    },
    {
      "Start": "3d77f326f5bd477787837f06a4e00176",
      "End": "431172885cf8497497911b3215c2ca1b",
      "Id": "5e010e87180a495bb19818281c654290"
    },
    {
      "Start": "3d77f326f5bd477787837f06a4e00176",
      "End": "0981a652af724a6a8b9a8eb1a08a6cba",
      "Id": "e25c1e3d628d4602b249a33c63fb58cb"
    },
    {
      "Start": "8c2ba91556594ec2aab1bcca7f7dcb48",
      "End": "d16755affa384fab9cdec78c1700d3df",
      "Id": "2fa996c5194b4996b57f7ad8d90198a9"
    },
    {
      "Start": "dd567dead89e494c8a434b1f7d068a63",
      "End": "cb2113fc73914d5dbe9c9e07566086d0",
      "Id": "f32375fc8f2b48eca438c7be85251e1e"
    },
    {
      "Start": "c6bdb61eb3b543cdb9070667965544ab",
      "End": "aa8fb83d7deb41f8b0eb3f8663a7d24a",
      "Id": "c7fa41e350bf4fa0a023ca71872cb8a3"
    },
    {
      "Start": "0ba9950f5fc641138baf20bb2c72d200",
      "End": "35a2f53ff75f4b8b94b33810609dafd3",
      "Id": "abaf7a76603c45449a95c44b1b1800be"
    },
    {
      "Start": "aebf257d12f0489e97e17b8f19ef3625",
      "End": "bb30a907808847e0a45733c8eabaeb9f",
      "Id": "c15476304f6b4e50a919e8a061db533b"
    },
    {
      "Start": "492e0e7f88c54a57bf71472c2f88bce9",
      "End": "4610e98fec524e3c9c9831ab31b8156e",
      "Id": "0c7b1d89db2c43119664fb91e2bc5130"
    },
    {
      "Start": "c46f883cfa55460c8735938bb85be0b4",
      "End": "ae4ab9ce9d8b47739174240baa143e10",
      "Id": "329384e38ab74ea18bea66bb06123f54"
    },
    {
      "Start": "09da0960ef1a49a48f0191aeffa70961",
      "End": "a4c1eabc7c8345cd88923c6f67fb0094",
      "Id": "49380a87d99244c1ae155782d19622d0"
    },
    {
      "Start": "c95d439b22574e7188855ce40e344331",
      "End": "62b7646c6df64d97bfea5a4c23f673b8",
      "Id": "e283cb1fff7e4f319d855dcdc58f7dee"
    },
    {
      "Start": "614bbef2bf5e4d9a83fceb100c6e6be3",
      "End": "0cc55e4ee6fb4fa59ad099ff8f9f3b0a",
      "Id": "fac0340f3aeb4739a15618714d55d17a"
    },
    {
      "Start": "8337e93175ab4b82924dd34f847eb613",
      "End": "e582d72f3c2a42ee9e1f802f647d317f",
      "Id": "f748f614cf67461cbd864e9a1b2d986b"
    },
    {
      "Start": "5020755b81a341108f1d08afab87cc90",
      "End": "a61746960d18416c872069991ac1246d",
      "Id": "ae20e1658a0f42cbaf395dd9770889f9"
    },
    {
      "Start": "89490b63b5c44a9597170d12897dd869",
      "End": "5043ccab43a444cca2cb5c39209e53d9",
      "Id": "2001eef82d734391b8c518e81c7c5812"
    },
    {
      "Start": "33a010a5b11c49deb4e9edc113ec4f97",
      "End": "af41b93656d147ca95583c55c666ed4f",
      "Id": "f33f4824558a4fe0be3056d339327d47"
    },
    {
      "Start": "c028006ff86f44778236d1a394c11f6d",
      "End": "7f2251a63b954fbc9784b82104a93a8e",
      "Id": "0eb096c087484e33a9273491974a3f73"
    },
    {
      "Start": "874102367ad3498b8542acef84b25b33",
      "End": "77025160d4174ba385780353915de4cb",
      "Id": "410edea6228f47d0b2c5e3faeaad8a58"
    },
    {
      "Start": "467ab02897574ef6b2c518cd9608a0b9",
      "End": "5531845cf3254979b24d7b5a00161bfb",
      "Id": "5078caa43f664f9b9abcc72958fe40ea"
    },
    {
      "Start": "73ee75a7cc184b7eace35a03177b5234",
      "End": "1fbba57eaff647d38edd1869ba8edd49",
      "Id": "e94daab2e4a8493b918ace2b60d3ede0"
    },
    {
      "Start": "152aab43166d4224b3c2b7ea820143bf",
      "End": "64729a251d174342b38e4a6efdf78f42",
      "Id": "b6655988206b47eb8abbb16f02740bf1"
    },
    {
      "Start": "cea8ffdbaa4d464f82f209c3fd5dde4c",
      "End": "d9d97afb3f554469816052df3348451d",
      "Id": "758c5a73864c4bf6a3fb301dd33682a7"
    },
    {
      "Start": "10eb2e5bdd474f57995becdcddc5eac2",
      "End": "3b829b72d66e4a2280e7e1c0b3a1c51c",
      "Id": "0eb407a605bf4229a2a22f6623ea47fe"
    },
    {
      "Start": "c0bb021d86eb4eb4873c80b50c3f997c",
      "End": "c01091a079c447d793f1aef213d4902a",
      "Id": "6428e59bb41344e4a57f0540103411ac"
    },
    {
      "Start": "5adfe0789b9a4e96abe63f072ce31c49",
      "End": "bcbacba1bb8a4c3cbae8349e288a6f7b",
      "Id": "cadf3f27e1c64401b4f2c5bb45f05159"
    },
    {
      "Start": "1b70368d073c422ca10192ccf99c6a72",
      "End": "1a56db0ce2904da08462164b2cb97eeb",
      "Id": "20749921b3d34eac9efe5179ae983577"
    },
    {
      "Start": "d8eff37166db4dfbb4697a8d8769c15c",
      "End": "615513351ef34f558e58a0b15f1a9a58",
      "Id": "2caa3789359d42db80d6d68c640da378"
    },
    {
      "Start": "80c884d0c138496bb00d4d1ec064fc58",
      "End": "d8951a0565ed4a158f2f9572d25187c6",
      "Id": "1614823597764706950544660ca10f2d"
    },
    {
      "Start": "5b8bc3bc76d34b60a661ac3c14d224a3",
      "End": "f202c3ba2a3342adb3cf5c7599fe1515",
      "Id": "4b421400539e47eab9ffa8528fe56e5b"
    },
    {
      "Start": "2ceb9ecefebe4069ad6d5df6ada65fa6",
      "End": "c894d1819c1a4f949b53081f269f45e9",
      "Id": "ddd004f7a6bc40dfb41f3c8d71d6387a"
    },
    {
      "Start": "8c8cb6e12ae241a89c4f566fe1cfda39",
      "End": "dd1a66d2bd624953b528104bdb33c960",
      "Id": "8dbf454126fd4141b5d44f6d788d2b81"
    },
    {
      "Start": "26b2b6ce44de429abaf6c74152f58477",
      "End": "1651e3ac02264949b9d6fb45ad029043",
      "Id": "89f035d5e69c4704a08566d1e7c3fe70"
    },
    {
      "Start": "bcf1df27503d46d0bfc80454cad057c9",
      "End": "35cb218c8aba4bd694c6678ecaadc4c0",
      "Id": "fd00293af54d476994c3b7a0fd017868"
    },
    {
      "Start": "7b70238633ae4b91a88e7e5792dd96db",
      "End": "ecde43936598467e8d8d98473c81bd86",
      "Id": "a538b22e120e456bb8f6dbe32995a104"
    },
    {
      "Start": "30684ccfc7fb441c8da233ac2a0e3be0",
      "End": "a7715fecc6eb4483b3bbfd6b52babef4",
      "Id": "688d7035cf6b4897a429e88309dd9260"
    },
    {
      "Start": "2d93fc3b88134df4bf345da9fdb707e8",
      "End": "39623d6458294cdeb35632f6c60333df",
      "Id": "c4eea1c653c741c38e2ec9dd4dc289b7"
    },
    {
      "Start": "2d93fc3b88134df4bf345da9fdb707e8",
      "End": "bec77cae20a145588fcfeeca92effa73",
      "Id": "2cee79bff6504325aed750a1fd627bc3"
    },
    {
      "Start": "2d93fc3b88134df4bf345da9fdb707e8",
      "End": "5b7bea5dae9b4392923a9c0431c92200",
      "Id": "a919e8fe1f444792acb3550df99a596e"
    },
    {
      "Start": "2d93fc3b88134df4bf345da9fdb707e8",
      "End": "f79f85aca55d41a685607a537a19cf2f",
      "Id": "f4cfdb291c44415188d40b72a5f67168"
    },
    {
      "Start": "3ae18900572544a8a03186ea9f7e19e5",
      "End": "a94ac7941d844bc382192c52c22aff92",
      "Id": "c318318c003d42f6af7f3d0dbc2289b0"
    },
    {
      "Start": "3ae18900572544a8a03186ea9f7e19e5",
      "End": "5ca7d33a4a32444da53db6f32ac56879",
      "Id": "658a923443ef49e188e8d62014a987b9"
    },
    {
      "Start": "3ae18900572544a8a03186ea9f7e19e5",
      "End": "f092f3289fba4af596fad2f828baeba3",
      "Id": "455d17cdc10947919d85baf570063616"
    },
    {
      "Start": "ebb097e16de84bf5b1d85909e211d3b9",
      "End": "674811c7029d4c8d83bff8b9b8d582a3",
      "Id": "cb4bc008b2dc4944bc2fcfb4b8e17cb2"
    },
    {
      "Start": "a93782aed25442aeb58524fa81f35f28",
      "End": "fc12eb3620b24e88872f9a97a2cdbeb8",
      "Id": "f2066d5d323e44a494d9fb64e3603c2d"
    },
    {
      "Start": "4baf7598ccf048b193d4cccc0007b946",
      "End": "82e22d29756b4cc4ac4c60e3c7cf851b",
      "Id": "eb38cf0e0652433c9dbb55d392f5d7c6"
    },
    {
      "Start": "4baf7598ccf048b193d4cccc0007b946",
      "End": "832874c0293c4bcebbad30bcfe39e715",
      "Id": "2018c3d6e86144359b234d4c96640d37"
    },
    {
      "Start": "4baf7598ccf048b193d4cccc0007b946",
      "End": "0282e6a454b74bb69516ca1275c15d79",
      "Id": "d24f94a95a514f53a45c612644f3407f"
    },
    {
      "Start": "254e287ce5ca41239959ffaa91c4a9c0",
      "End": "b4109d46216141fd912b6bbc9bc92aff",
      "Id": "d6e5d3771c704766bd009b25bab65da8"
    },
    {
      "Start": "4b195c0bd30442a0a927fd38c770915a",
      "End": "2e4ec9e8e88f43c19d265e27a6b016e8",
      "Id": "5a264be0d6ee4dc09c2fc09dd1a1e444"
    },
    {
      "Start": "0a32869a2d9740f8bf5fe9329a3d7f5e",
      "End": "408087d336504fcb9bed2151dea8fbd9",
      "Id": "2ec36b7f502e47218e9979d781a95ed5"
    },
    {
      "Start": "c964913b217e4b42a6452cf9186884c1",
      "End": "cf92068362ef497686b68b021bf2b808",
      "Id": "db5e5c0cdfb44d4ca965d92f7aa42b4c"
    },
    {
      "Start": "55dd040d3f364803897f7df89c9e2023",
      "End": "eb15ec9f65f547b09a2ce480f84c04ba",
      "Id": "f3da6dc530bc48288ce582ae00ba8eef"
    },
    {
      "Start": "72c79c75557942be9de56d5cc3b6bd1d",
      "End": "cb0b5355a2584bd6b47aff5a93db5ade",
      "Id": "a2426005fda8431ca4d4a711e776dcf4"
    },
    {
      "Start": "1c4f113ba7154f818b7133825a994a0b",
      "End": "ddceddf6372942899f4d491e47e65e6a",
      "Id": "aeaf33af920a42358e45f0f058545ea4"
    },
    {
      "Start": "e62559fd2cc942caa6a207b65e6fde14",
      "End": "ffefd5ad52df40cfb676736e8a3d1cdb",
      "Id": "21805b4692a6473496e0c4443a45433a"
    },
    {
      "Start": "cc3b0e09973d499d8fd978672f38d8dd",
      "End": "b089bcb4d5354c5a83cb7722bc80fb83",
      "Id": "663a9bb8568a41aea4214f6c59d67e21"
    },
    {
      "Start": "313131decc944ac9abfad1f6ab2073ce",
      "End": "2f82ed3f099e4c3193b4cca3c1406734",
      "Id": "adf946fdda6e493a90c9a7b26779d1cf"
    },
    {
      "Start": "67f397eefd7e417c8992c2dfa4f408db",
      "End": "249699bdb3f74faa89411677774e8dca",
      "Id": "d926207856fc483f9f36452a780e7e1c"
    },
    {
      "Start": "4ed41c1962184b68aea4d4d0a6d51173",
      "End": "fc42d8cb77d145c6aaf971ec149034c1",
      "Id": "24006ff13c71497b941e84bf00588558"
    },
    {
      "Start": "0522b459dbdc434c89715064376376da",
      "End": "933b91dd9c4747e4b34e2039cb0999c7",
      "Id": "470371352fca41919967bd42dab23c8d"
    },
    {
      "Start": "46e2e8ded1a644789e5b01f79ed7766d",
      "End": "3295707014144970a34ba6988a3c4f60",
      "Id": "096f64aeea2a4a86a60bc7684670953e"
    },
    {
      "Start": "4e44533c5e2e41d5a52fd1707a113641",
      "End": "aca0b6ce036846d09cca804103fcce56",
      "Id": "f054c6a75351442281cac88a7a151bc1"
    },
    {
      "Start": "1182f80400714ab4800e4ac0b7973489",
      "End": "501eb41ee7ec4d1898989acb0cdc348a",
      "Id": "47f98c5c473e4cb9931aed1dd1e3de51"
    },
    {
      "Start": "384f9cb3d89240558766a78a8ccad96f",
      "End": "9d0ceab660b440fcbda0a8c6590643f0",
      "Id": "955fb300ee0f434d8126b09bda82a6bc"
    },
    {
      "Start": "d15f034e9d2d4fbcac59104c35d15aaf",
      "End": "d3e2f9bf83824d069cf21117c01bc0ff",
      "Id": "921deb2281ae4336989d7934e6cc4003"
    },
    {
      "Start": "abbbf70041c345e3a9addf0e1ab31e86",
      "End": "cf98b272bffc49d69a3604794d1f85ec",
      "Id": "060afcddd5c245da90d406b5b0674d8c"
    },
    {
      "Start": "55822aeb844f4b198e3149be5a50176b",
      "End": "c31e22e598cd49dbb38617513f9d47d8",
      "Id": "81f630a452e2426aaf2ea30255c90ab3"
    },
    {
      "Start": "3e6c976237944eac8c96294f240866af",
      "End": "b123aa6eecea484f8648ae60694b8c9d",
      "Id": "18c831ca09a241c9b1bd281a7688b07b"
    },
    {
      "Start": "63d9e956a8b0418ca7043e703413d5cd",
      "End": "762ce87608134c1990ec106940ede643",
      "Id": "d154f3cde49d459e8575a350049b750f"
    },
    {
      "Start": "46a08f2ee98a4a919030332cc3bac296",
      "End": "41a3a5bccb3147d7b99f675f32faae93",
      "Id": "b91f1a1b5c4545dcacf70654a3a79b1d"
    },
    {
      "Start": "44d654664f564ad4b042e5313fb3a12b",
      "End": "42142085bf98480fba1ec16059e25718",
      "Id": "6599440a8fe6438982f02547272c2f5c"
    },
    {
      "Start": "5d2df50e0eb544288161def826211b1c",
      "End": "6d847b6e2de74d8faf93dcf74878d6e3",
      "Id": "8adf111440c04d908981f13f475f2e71"
    },
    {
      "Start": "ea122749408d42f9b5517fa28ed84c19",
      "End": "8bb0eab4d0364c37a74275b9aaed0193",
      "Id": "ba5abc89e5804a2d81eeaf5379ede699"
    },
    {
      "Start": "2ddd14d7533448eb90712b9cf4fc0e1f",
      "End": "973ee42e9987484dafd98fa95528557c",
      "Id": "6d930bfadd0f4df19933abf530a9b864"
    },
    {
      "Start": "5b53858c4e9d4bd0ba011a831e774283",
      "End": "97b1231eaa39437c8ddd9441a7d2e3d8",
      "Id": "bd2b327c989c4d038cd7121257f9bced"
    },
    {
      "Start": "9d6e06afc472485995f27c48be9adee1",
      "End": "8537ab1e640640d09f962de9d54e5253",
      "Id": "951ff228ab094793b4723165981b30c7"
    },
    {
      "Start": "8aa0e8ba32f44db195fca370ab81f28b",
      "End": "235604bd0deb423d8e24286401d23c3d",
      "Id": "494dad3ea6b24ecb8089b1de33841776"
    },
    {
      "Start": "cb57901cd0a640858689b1ddc454465f",
      "End": "075bda9c70e449a088d386fddbf5e821",
      "Id": "aa8ad1246d634630b5face04281a89de"
    },
    {
      "Start": "0dcaa44481124430bd693400c2ae02f6",
      "End": "8d45070174d84d6da9bd923e03109161",
      "Id": "5182a2a637fa43fa8a8a15974dffeaa8"
    },
    {
      "Start": "077cf3f22cb54026b0dc58bad550810d",
      "End": "af7f1458b5484b598535c436f73fd1e3",
      "Id": "6c2e419daca74b869918d017c5fd02b3"
    },
    {
      "Start": "575fe2d1a4204d69a8ae2b1be04e37c3",
      "End": "6604e9d1768944a3bca991e2ba7316be",
      "Id": "6b01f2aac962418b8b66644995547a51"
    },
    {
      "Start": "ff4b7f6fc3f44c9392ec75c3e4901dd6",
      "End": "902618cf43ce47a8809690025a971650",
      "Id": "f935029c88c348dbb0d35495acde4a7f"
    },
    {
      "Start": "179d1947a8264c769c86c435050219d4",
      "End": "3aa363e6a2d24d348e780c8042e83aa5",
      "Id": "7a6393ee02f34c558687572393c30021"
    }
  ],
  "Dependencies": [
    "4796d57c-a1a0-4676-b524-57abb5fa73be",
    "f3228c78-e4a0-42f0-8ec3-a19daf7157bb"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "bimorphNodes",
      "Version": "3.0.3",
      "ReferenceType": "Package",
      "Nodes": [
        "06713f3e186843d7b4822a40e82755d8",
        "7752a4e89dd64076a54148b16354c704",
        "c262b70c7f564d42bba05c4efae029ec",
        "b3126314765e4bccbbe68e0ae6c2b6ea",
        "e8a5dd27f51b4709a816e7adf4f28dbd",
        "2e7dc57e12e6458f95aac49dea4cd8c1",
        "e1cbc1f0706d401bb6f9e62ce6b03342",
        "cdbea3a49f7b477ebbe18aafd5268b9f",
        "77e4a37d435548618ec170edd4aa7da7",
        "d2587c439594406faec50a2b7cdf7e63",
        "7abdb1674e9d49ba94d54d81c629ba93",
        "d48b84c11ad74d2ca2565a7fb95baf60",
        "45c3c5800d4d4f9f9a4bfc4508c484e6",
        "9c6b1c855882482ab7c73e5db7f281d2",
        "27ecb7caa00e4864af32f13df41b1442",
        "b6332398b39b48ca9f1182c7a1122b20",
        "75bcee57b2d44b399da50889b1b612ab",
        "2bccd166993e421d91c4872b5e376dc2",
        "b5ce41cad8f746e0aa1fd3e753c31bd5",
        "cadd633393f04e95b49cef30046dc70f",
        "f808aa3c4a8b4d28b510cc86443a9311",
        "cad10da8642d4f5c8235f52fa6b87d78"
      ]
    },
    {
      "Name": "Clockwork for Dynamo 2.x",
      "Version": "2.3.0",
      "ReferenceType": "Package",
      "Nodes": [
        "5c59b9bb7de34ad289c31255aa069721",
        "b61f9389425b4ef7ae704498f0b094e5"
      ]
    },
    {
      "Name": "Genius Loci",
      "Version": "2021.9.29",
      "ReferenceType": "Package",
      "Nodes": [
        "dda32d1a3f804734a6eca8fceb165905",
        "b24d6cb364bc4f438f6513f303647b5d",
        "1adf7a29f0cc48ef96495a8106814b22"
      ]
    },
    {
      "Name": "archi-lab.net",
      "Version": "2021.25.2521",
      "ReferenceType": "Package",
      "Nodes": [
        "1884d708f2c943d9a8e8c78d71002e90",
        "0130339e07f3456bbb8c8919ad0ecd91"
      ]
    }
  ],
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 10000.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.6.1.8786",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Фоновый просмотр",
      "EyeX": -2181.4648627881061,
      "EyeY": 11422.92026592768,
      "EyeZ": -18031.446261516914,
      "LookX": 409.85639388631353,
      "LookY": -2404.0399906131097,
      "LookZ": -2847.9493148731744,
      "UpX": 0.06577391307875842,
      "UpY": 0.88701083317824969,
      "UpZ": -0.45704001376552933
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "коды ссылок для анализа",
        "Id": "f84108b986ab442fa1a9a3e4fe6d965e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -588.85772426274661,
        "Y": 7076.7547261305244
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Category",
        "Id": "2f69c25b9086405096b51b83ac49dd32",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1784.7868773927194,
        "Y": 6304.7943213320959
      },
      {
        "ShowGeometry": true,
        "Name": "Categories",
        "Id": "436fea4d82ea46c589c32644834e0a14",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1789.3318132233499,
        "Y": 6220.258096792526
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Type",
        "Id": "de901e6228fe4443924db1d4680425b6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -286.56854195628966,
        "Y": 6388.3885970511164
      },
      {
        "ShowGeometry": true,
        "Name": "Element Types",
        "Id": "f5aa30a9606c4aea8a849d9abb2b8bb9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -276.12208328977113,
        "Y": 6323.2637710891449
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Name",
        "Id": "a223f2e4eeff45ab9f06e215479fd57d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -296.33806336205635,
        "Y": 6618.330188179154
      },
      {
        "ShowGeometry": true,
        "Name": "Element.ElementType",
        "Id": "e110eb485b4c4fb3a40282cdd917b883",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -610.35462453482114,
        "Y": 6513.4676526498642
      },
      {
        "ShowGeometry": true,
        "Name": "String.Contains",
        "Id": "b2286d7ac15a40e99d110bb238c8f655",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -302.31671712143725,
        "Y": 6781.6259430040227
      },
      {
        "ShowGeometry": true,
        "Name": "List.AllFalse",
        "Id": "a49ca1a4713143b88dbcb3e24cf98bb5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -256.79193886288704,
        "Y": 6955.5514206703228
      },
      {
        "ShowGeometry": true,
        "Name": "List.FilterByBoolMask",
        "Id": "e47048782ae24816b2716ab7177e3a8e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 27.93039479615345,
        "Y": 6685.3062371534943
      },
      {
        "ShowGeometry": true,
        "Name": "Categories",
        "Id": "4a0300e2c53143e583e5c2b9cf8d17e8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1790.0360154908694,
        "Y": 6399.1254727437954
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Category",
        "Id": "3df89a2902e746199b306d89d6216c17",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1786.1952819277694,
        "Y": 6492.1121244936539
      },
      {
        "ShowGeometry": true,
        "Name": "List.Join",
        "Id": "6ea14ab69f974716b63d433d9cc6e8cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2702.84250412417,
        "Y": 6373.7564503027261
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "d54bfccc2d8f4c8e909ee5542d98355f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1835.95659701986,
        "Y": 6607.6685766402852
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "661a95a8bc4b40e6a2e27ec0dd88ce31",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2297.7438553085303,
        "Y": 6500.5151197752339
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "94672cdf4ade4b1cabc8943bd55ed952",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1992.2041706640302,
        "Y": 6580.6633155196441
      },
      {
        "ShowGeometry": false,
        "Name": "Code Block",
        "Id": "0cff9d8c818a4c4d8ee2e818780b77fe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3084.4222283437148,
        "Y": 6490.34288487098
      },
      {
        "ShowGeometry": false,
        "Name": "Element.GetLocation",
        "Id": "721e24b9705241bab99276278965d699",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3040.5440545292468,
        "Y": 6341.1590848287806
      },
      {
        "ShowGeometry": true,
        "Name": "Curve.Length",
        "Id": "7322bedb0c76439a935079155bc054f8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3344.5669217328232,
        "Y": 6341.73824932373
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "dfab32748ac146ccaf4e2b72237ca3c5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2130.780190585986,
        "Y": 7372.2224628386257
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Name",
        "Id": "4f83a11eb6b54df4b8474d73cc09a308",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2310.4697240963196,
        "Y": 7251.5073494870858
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "f05dc3803d42422ca6e5136af20b072e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2485.1417206921906,
        "Y": 6896.2804592739349
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.OfCategory",
        "Id": "06713f3e186843d7b4822a40e82755d8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2186.8086127561037,
        "Y": 6902.2263673421958
      },
      {
        "ShowGeometry": true,
        "Name": "Categories",
        "Id": "f7d0a7510796458cb05af8a72731d42d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1988.0867980071798,
        "Y": 6992.6127934351944
      },
      {
        "ShowGeometry": true,
        "Name": "Categories",
        "Id": "272c9a8e373947e3b05de94b3d00da98",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1788.6578383015303,
        "Y": 6037.2534906077453
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Category",
        "Id": "63a64d5aa0d44c539c2a068612114680",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1784.1129024708998,
        "Y": 6121.7897151473153
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.Element",
        "Id": "7752a4e89dd64076a54148b16354c704",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2326.8659159407844,
        "Y": 7055.7591316726548
      },
      {
        "ShowGeometry": true,
        "Name": "Element.ElementType+",
        "Id": "5c59b9bb7de34ad289c31255aa069721",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2365.1290428740595,
        "Y": 7147.2496918171755
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "d752164309ff4ba0a33764d597ef808a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2540.7660741464042,
        "Y": 7253.4769129223541
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "b2e8e485e36a4a74bd79f0d4b21ee98c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7114.9557628872708,
        "Y": 4733.7900149505585
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.OfCategory",
        "Id": "c262b70c7f564d42bba05c4efae029ec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7070.2600217735007,
        "Y": 4613.4678551849083
      },
      {
        "ShowGeometry": true,
        "Name": "Categories",
        "Id": "c2fb2a4d66714f38a85b2df69e629a78",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7078.8451255736009,
        "Y": 4524.2703864341784
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.Element",
        "Id": "b3126314765e4bccbbe68e0ae6c2b6ea",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7077.399535021802,
        "Y": 4858.8773679901788
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyInstance.GetFamily",
        "Id": "dc8ce536f5e84f9aae179010f58801a7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7092.4620214648012,
        "Y": 4960.498914624568
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Name",
        "Id": "78bd9da1e856429a9fe8061e06078770",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7118.8711885368912,
        "Y": 5059.1858021044782
      },
      {
        "ShowGeometry": true,
        "Name": "List.Join задания",
        "Id": "2c656fd0f0bb490db709ebc03d0e2c05",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8997.6518392711987,
        "Y": 7350.0025588865656
      },
      {
        "ShowGeometry": true,
        "Name": "List.Join задания отработанные и не актуальные",
        "Id": "89fe93ee50eb4cdfbe452387ffb13533",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 17882.7555388125,
        "Y": 7482.7222498765441
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "a894a806b28d4580a7576f47ab6e76c9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 19841.334737086989,
        "Y": 7690.9142343342046
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ddbdd124e6a345539a95d4ab945d08e5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 19851.831167505989,
        "Y": 7594.3385590430644
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e4f7bdb1b9da4e71a40f4bfc62474a60",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 19571.611201192387,
        "Y": 7239.3069003536639
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "5bc8ed4c43134eaab5ecbd6e9b6b8b82",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 19502.343434832765,
        "Y": 7335.6242581177112
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "7e9753cf12e9447db51dcfb5806e42e5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 19896.495539580588,
        "Y": 7363.6740285709839
      },
      {
        "ShowGeometry": true,
        "Name": "List.SetDifference",
        "Id": "88118973411f49d294b7ce7cc84638f1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 18492.604121303142,
        "Y": 7472.9694928142626
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "c6d9f781d5e04b0caa014db95ff0bf96",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8350.78379350821,
        "Y": 4554.049036041708
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "264a947abf1d4eadb4e8dbc64f6f2351",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8364.940432039446,
        "Y": 4666.6936381623664
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e60995124cbe4aea8cc60d3985707ae3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8359.87436194178,
        "Y": 4785.16934286556
      },
      {
        "ShowGeometry": true,
        "Name": "List.Join",
        "Id": "c90f22494a994163b6c8d3d00dac1fae",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9286.0168911364381,
        "Y": 4613.8571837051331
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.Location",
        "Id": "e8a5dd27f51b4709a816e7adf4f28dbd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9091.9163134842747,
        "Y": 10407.983872206307
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.XAxis",
        "Id": "e8f76166f00e48f2a9fad1ecf6a19e8e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8946.2711999497915,
        "Y": 10478.435825414179
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Id",
        "Id": "0778048fd18243d0a2ece200d6e66110",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8467.0484360992778,
        "Y": 10006.297387761004
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "167cf29bf05a4a3f93092554f0359368",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9179.9403598398385,
        "Y": 10125.486086864561
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "3605d70956b94ad0bf9c61220ff0e320",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9345.1847952680982,
        "Y": 10049.94631187296
      },
      {
        "ShowGeometry": true,
        "Name": "Element Host",
        "Id": "dda32d1a3f804734a6eca8fceb165905",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8472.7210688608284,
        "Y": 9905.7151193761038
      },
      {
        "ShowGeometry": false,
        "Name": "Python Script",
        "Id": "401d5a48043b49a5961dcdaabf73a954",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9156.3106955045878,
        "Y": 10021.213580982061
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ef8c860960e64635aabad6c0a2de95f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 5069.0913409332989,
        "Y": 9717.7397958219281
      },
      {
        "ShowGeometry": false,
        "Name": "Python Script",
        "Id": "1657c510a32745d783bd208ebd2e3f9d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8859.0946098639288,
        "Y": 9837.2096525397028
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "2f7f529281b04a83b5e4c95281e8a911",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3908.4065798503789,
        "Y": 10037.184374287132
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.OfCategory",
        "Id": "2e7dc57e12e6458f95aac49dea4cd8c1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3863.7108387366088,
        "Y": 9916.86221452143
      },
      {
        "ShowGeometry": true,
        "Name": "Categories",
        "Id": "be754a17dc6e401285bd12acbb8ab9b4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3872.2959425367089,
        "Y": 9827.6647457707313
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.Element",
        "Id": "e1cbc1f0706d401bb6f9e62ce6b03342",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3870.8503519849091,
        "Y": 10162.27172732673
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyInstance.GetFamily",
        "Id": "feb21ca536d04dd6a50d19ccdc9b0f6e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3885.9128384279093,
        "Y": 10263.89327396113
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Name",
        "Id": "b9589d09063049118f1f7006663b476f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3896.0085930843989,
        "Y": 10353.879674819431
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.TotalTransform",
        "Id": "cdbea3a49f7b477ebbe18aafd5268b9f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8623.3283278645176,
        "Y": 10588.394220209406
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.ZAxis",
        "Id": "c0ecaee5745b4f6e87b2e2097d8361f8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8998.527934307569,
        "Y": 10737.672982438866
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.AngleAboutAxis",
        "Id": "ac2917d4d79d4a9ab9d70f7f879703ce",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9163.2530287124173,
        "Y": 10598.951864061806
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "62901d2ea12e47d98881abb3d858d23f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8946.83406571021,
        "Y": 10607.318922316179
      },
      {
        "ShowGeometry": true,
        "Name": "Наименование типа семейства",
        "Id": "57339e0c785946bc9a5875e4581d1962",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6874.7097928541434,
        "Y": 7558.4517280492619
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyType.ByName",
        "Id": "2317b43360d94d5f924761d5d75fd8e7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6963.7302425619137,
        "Y": 7653.1707131096609
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Family Type",
        "Id": "c47623009412409ea7bdbd78f711f68b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6972.2675031414337,
        "Y": 7733.7847820648021
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "e5e89beb3bfe4a14aa5637d3194a5078",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9394.1266269049756,
        "Y": 9363.77456892473
      },
      {
        "ShowGeometry": false,
        "Name": "List.Flatten",
        "Id": "28ca23cf37b44ad189259323570ad30a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10931.812640214725,
        "Y": 10321.645329008759
      },
      {
        "ShowGeometry": false,
        "Name": "Element.Solids",
        "Id": "b5a2cee5dad74e6a938d56d804feed7b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10791.095272202932,
        "Y": 10192.097106950952
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b5b97c5c46e3433d9cddbb7489868303",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11790.104967035195,
        "Y": 9495.3058994060375
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "4eb6323f17c74384a878471d93f76320",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11774.202322362396,
        "Y": 9601.3943357887965
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "c50a48c769a943858172500321cd7241",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12070.324933348797,
        "Y": 9850.337558095438
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "8cde88eac19a4532ab8624ed6eba673c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12114.989305423396,
        "Y": 9619.6730276233575
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "792f95e5c919426eb588d08309e06de7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11999.070175931238,
        "Y": 9928.96190950064
      },
      {
        "ShowGeometry": false,
        "Name": "LinkElement.Solids",
        "Id": "77e4a37d435548618ec170edd4aa7da7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4373.9456652157041,
        "Y": 10776.018726860648
      },
      {
        "ShowGeometry": true,
        "Name": "List.FilterByBoolMask",
        "Id": "d363fc10220340b58b8a18bfde066a61",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4384.4322714304644,
        "Y": 11031.848429826068
      },
      {
        "ShowGeometry": true,
        "Name": "List.IsEmpty",
        "Id": "d82098c7322645ecbdc40c77bac9827d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4379.4240546161645,
        "Y": 10856.891812295929
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "805d8a304eb847b9aa3482744d8d2624",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 4388.9794176473642,
        "Y": 10939.573828003198
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ab1491871e194ab1a34614d85a4e35dc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3963.1343253425121,
        "Y": 10890.065260682724
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "212fb647625e4c2f9bef67a91ea39a39",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3462.6801027833326,
        "Y": 10995.246289940475
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "4fe530680ed64cf0b569db6f3633190a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3906.0303369689418,
        "Y": 10531.389172114945
      },
      {
        "ShowGeometry": true,
        "Name": "Element.ElementType+",
        "Id": "b61f9389425b4ef7ae704498f0b094e5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3881.7880053312219,
        "Y": 10783.995504592895
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Name",
        "Id": "60b8b6f1337240cbb960181bd0f3aae3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3694.5235918421422,
        "Y": 10911.172561348714
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.OfCategory",
        "Id": "d2587c439594406faec50a2b7cdf7e63",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3605.6212799053119,
        "Y": 10536.297105619444
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.Element",
        "Id": "7abdb1674e9d49ba94d54d81c629ba93",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3747.754532217532,
        "Y": 10690.867844513665
      },
      {
        "ShowGeometry": true,
        "Name": "Categories",
        "Id": "0f3bcef79662439dbb3b1fbbee7c907c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3408.975414283932,
        "Y": 10627.721506276204
      },
      {
        "ShowGeometry": false,
        "Name": "Python Script",
        "Id": "63bc6c8ee041415fb8fcfdde8ed771c2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11265.478693452364,
        "Y": 4636.4142932596324
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.Location",
        "Id": "d48b84c11ad74d2ca2565a7fb95baf60",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10532.724363531155,
        "Y": 4759.3532448909164
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.TotalTransform",
        "Id": "45c3c5800d4d4f9f9a4bfc4508c484e6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10035.553069545036,
        "Y": 4940.631367879816
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.AngleAboutAxis",
        "Id": "6cb5c58f8f6240af813d6845a07c84f7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10575.477770392945,
        "Y": 4951.1890117321163
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.ZAxis",
        "Id": "3ab0a1b03ee84e95944d47bf17d7a250",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10414.424907216646,
        "Y": 5051.3517022094165
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.XAxis",
        "Id": "59a962fbac9e4bf3bcadc42f2dd1afe1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10356.659826016044,
        "Y": 4821.4923950132161
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "2d328a9ce8824e2bbefe6ec2ef8de253",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10383.248761041328,
        "Y": 4968.7012533586467
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "f4516cb20e4d485097ab8db3b6cdd381",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9669.2258652650271,
        "Y": 4511.2352905401522
      },
      {
        "ShowGeometry": false,
        "Name": "Python Script",
        "Id": "1973514e77d041fe82c6f23928d61d63",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10887.929231113396,
        "Y": 4467.7087242167736
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Id",
        "Id": "e482c82e66c94b698c8ba3d094f383ba",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10071.567800682667,
        "Y": 4422.760914603653
      },
      {
        "ShowGeometry": false,
        "Name": "Python Script",
        "Id": "d933b6c142e1435c913fe99e24eb7a69",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10408.865739588027,
        "Y": 4220.2159247461123
      },
      {
        "ShowGeometry": true,
        "Name": "Element Host",
        "Id": "b24d6cb364bc4f438f6513f303647b5d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10077.240433444227,
        "Y": 4322.1786462187529
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "46d8f7a2335f4ff5843a1907f1dce395",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15281.015934790228,
        "Y": 3449.1883098887934
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "f04e193837064b0b864c7c0819344ff4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15291.512365209228,
        "Y": 3352.6126345976932
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "d48a9fd5e21147f7b03cfeaf5afe00e0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15336.176737283828,
        "Y": 3121.9481041255926
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "d908e15e2a064d12a739443a28dc61ff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14995.389754222828,
        "Y": 3103.6694122910935
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "9b37b4c302fb4911a99f4ebd6c6851ef",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15011.29239889563,
        "Y": 2997.5809759082927
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "88526819623249a881be13cda3851031",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14829.127081323748,
        "Y": 4658.0802455363319
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "f013859cc7104119a97ddbbf5e024bf3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14559.403545429146,
        "Y": 4206.47291155583
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "dfab9b683b154afcb362111333293bb5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14543.500900756348,
        "Y": 4312.561347938632
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "693c378008f84c2c89de65fa95f3affa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14839.623511742748,
        "Y": 4561.5045702452317
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "817d43c93b88494aa74d62d5febde1ba",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14884.287883817347,
        "Y": 4330.8400397731311
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "f49d002bbf4248b5a7aa3127227a6a9b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14358.931551850481,
        "Y": 3214.0001715941448
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "91788e67384747ed8578cacb5a85e2db",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14029.559502128946,
        "Y": 3218.1617875438392
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "8e40832771094586be8d185f08085b4d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8368.0739600965862,
        "Y": 3963.4682085560889
      },
      {
        "ShowGeometry": true,
        "Name": "Наименование типа семейства",
        "Id": "d668ff4a6163496f9392fb136f35bf44",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6900.6170512039735,
        "Y": 6507.4278927234027
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyType.ByName",
        "Id": "402226d2250447aebcde0048373096c7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6989.6375009117455,
        "Y": 6602.1468777838036
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Family Type",
        "Id": "1098ff3e2bfa439da1e0eb3719cb2c7e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 6998.1747614912656,
        "Y": 6682.760946739003
      },
      {
        "ShowGeometry": false,
        "Name": "Python Script",
        "Id": "02c33796c7cc48a588baf4c89a7eb6fe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9560.0504580604356,
        "Y": 10579.166076352256
      },
      {
        "ShowGeometry": false,
        "Name": "Element.IntersectsSolid",
        "Id": "9c6b1c855882482ab7c73e5db7f281d2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9673.6599037086344,
        "Y": 10892.238032944748
      },
      {
        "ShowGeometry": false,
        "Name": "актуальные",
        "Id": "fd1dd4c80eb848a3885727c3f3eed986",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10992.043225155014,
        "Y": 10784.139036438923
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "1f97062e385f43ca8bd088a410592b9f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10388.041221318163,
        "Y": 11183.381482968603
      },
      {
        "ShowGeometry": false,
        "Name": "отработанные",
        "Id": "02670742e5424f4d8eb38f903072ca10",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11003.266336101879,
        "Y": 10622.499663360051
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "f025f3279811477481492023c4ce49fe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11593.274538667167,
        "Y": 10693.04109897813
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "3ce897f30624477691772bac3c3ac5c7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11577.371893994365,
        "Y": 10799.129535360929
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b7b55cd2b2f54c7eae45199063270714",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11873.494504980765,
        "Y": 11048.072757667529
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "b9e7875170fb4029b11559aa5957f555",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11918.158877055364,
        "Y": 10817.40822719543
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "0a30fd3d95d0416fb66ae96e79708863",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11862.998074561765,
        "Y": 11144.648432958629
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "fa000d12a0624a68930b4befba71f80e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15739.354383852984,
        "Y": 3533.3921868987904
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "c3ed735afb974749b85cd26446f8dd52",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 15201.885463457809,
        "Y": 4665.5813663180452
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "05b9993eb51b4f309d1848fef7571dc2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13387.475470421818,
        "Y": 10631.542035008872
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "6751bd1a3de64fff9d2b4f45ec5b580e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12516.275803878358,
        "Y": 11261.032373596805
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "1953c272a7cf43ca8adc891ca046f9e3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14288.223669319566,
        "Y": 2808.0274688010545
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "0613adaebdd841a9a0050484031f9a4c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13960.915227409248,
        "Y": 2676.5540894527908
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "972a9031e7c64de19681f006f74298f2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14240.388772946568,
        "Y": 2643.7762921486551
      },
      {
        "ShowGeometry": false,
        "Name": "Element.Solids",
        "Id": "5ca27c3742ae4e08a3e8a248ebddf90e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14221.153887226366,
        "Y": 2514.2280700908545
      },
      {
        "ShowGeometry": false,
        "Name": "Python Script",
        "Id": "24567a432c334c4cbc5e3fd403d278f3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12544.913442372461,
        "Y": 2094.8520721495884
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.Location",
        "Id": "27ecb7caa00e4864af32f13df41b1442",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11810.216605835372,
        "Y": 2217.7910237808787
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.AngleAboutAxis",
        "Id": "44e090e933b24aaaad5160dc412e67a3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11852.970012697071,
        "Y": 2409.6267906220787
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.ZAxis",
        "Id": "cee9a552f2794f2680529a60c8d6ebf3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11691.91714952077,
        "Y": 2509.7894810993789
      },
      {
        "ShowGeometry": true,
        "Name": "Vector.XAxis",
        "Id": "a707d17a2fa049b3b43125bfefb6262b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11634.152068320171,
        "Y": 2279.9301739031785
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "3c1ee00ed927486f924e4a9cb0b207e2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11637.528094864545,
        "Y": 2416.1577332621787
      },
      {
        "ShowGeometry": false,
        "Name": "Python Script",
        "Id": "5c041bed4ad54e78a1cced02acd86497",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12165.421473417569,
        "Y": 1926.1465031067287
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "5f29b82ecc83439baeea1f6aa9c9ebe7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11686.357981892172,
        "Y": 1678.6537036360692
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.TotalTransform",
        "Id": "b6332398b39b48ca9f1182c7a1122b20",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11313.045311849171,
        "Y": 2399.0691467697784
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Id",
        "Id": "0a8df9811e9d4fe39fec71267742fedb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11349.060042986872,
        "Y": 1881.198693493609
      },
      {
        "ShowGeometry": true,
        "Name": "Element Host",
        "Id": "1adf7a29f0cc48ef96495a8106814b22",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11354.732675748372,
        "Y": 1780.6164251087089
      },
      {
        "ShowGeometry": true,
        "Name": "List.Join",
        "Id": "0e90807c3025420190d3bbe393aa51f5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10563.50913344061,
        "Y": 2072.2949625950891
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "0a8b9efbc7794a5bbe7f336b93cf308d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9628.2760358123815,
        "Y": 2012.4868149316685
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "bdb14ad903754c6c8f09eb9276626c79",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9642.4326743436213,
        "Y": 2125.1314170523287
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "3b1a5c599248487c87e03afe97c7bd99",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9645.5662024007615,
        "Y": 1421.9059874460486
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.OfCategory",
        "Id": "75bcee57b2d44b399da50889b1b612ab",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8347.75226407767,
        "Y": 2071.9056340748689
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.Element",
        "Id": "2bccd166993e421d91c4872b5e376dc2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8354.89177732597,
        "Y": 2317.3151468801384
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyInstance.GetFamily",
        "Id": "ac2565c081ca472db4639bf0bf7f38c7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8369.95426376897,
        "Y": 2418.9366935145285
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Name",
        "Id": "c3c8cef03f7143978ef0f9b8ea4610fe",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8396.3634308410619,
        "Y": 2517.6235809944387
      },
      {
        "ShowGeometry": true,
        "Name": "List.Flatten",
        "Id": "12ebe0a8785b4d50a919edf1724cfefb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8392.44800519144,
        "Y": 2192.2277938405191
      },
      {
        "ShowGeometry": true,
        "Name": "Categories",
        "Id": "8f32ebebed024a489085d566d277cd1f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8356.3373678777716,
        "Y": 1982.7081653241389
      },
      {
        "ShowGeometry": true,
        "Name": "Element.Name",
        "Id": "7a1e40e7721749018526b31b54587ef4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11021.118132007765,
        "Y": 2739.5211450701509
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyInstance.GetFamily",
        "Id": "9c31c434a2a54288aa475d3b732bda31",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11011.022377351275,
        "Y": 2649.5347442118509
      },
      {
        "ShowGeometry": true,
        "Name": "LinkElement.Element",
        "Id": "b5ce41cad8f746e0aa1fd3e753c31bd5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10995.959890908274,
        "Y": 2547.9131975774408
      },
      {
        "ShowGeometry": true,
        "Name": "BIM. Трубы/воздуховоды",
        "Id": "d578e9522cfc459b86bb94e8dcc25dac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3399.0448094285975,
        "Y": 6894.2508279711847
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "919bb92bebed43ee9c5dc38f7bf9b62a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7633.0,
        "Y": 4404.0
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b07be767b3484e34af9e49f2e522058d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8971.6754174147718,
        "Y": 1843.1917462219446
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "af4a1c3141b9418c93e2a108102c6a01",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 22563.402241462842,
        "Y": 6839.6773301155863
      },
      {
        "ShowGeometry": true,
        "Name": "Наименование типа семейства",
        "Id": "aec3891052194133a8d84cec24abd138",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 20814.102229988828,
        "Y": 7202.62875249002
      },
      {
        "ShowGeometry": true,
        "Name": "Наименование типа семейства",
        "Id": "9b23960a92d443e4814b2f4f7a25f45d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 20838.553332457803,
        "Y": 6819.9785326260662
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyType.ByName",
        "Id": "2d1afebcbb764051aa6356f6db2d3641",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 20927.573782165571,
        "Y": 6914.6975176864662
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyType.ByName",
        "Id": "52ec96be8f7b4c499b9f267a2a1a5913",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 20903.122679696597,
        "Y": 7297.34773755041
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Family Type",
        "Id": "096db61fae004dcb810a46589e5f9b55",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 20911.659940276117,
        "Y": 7377.96180650556
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Family Type",
        "Id": "305732086bdc4135b7336942d77f1659",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 20936.111042745091,
        "Y": 6995.3115866416665
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "b263d35f05004e3bacec6edc06dafee4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 22423.7446373577,
        "Y": 7046.93305352193
      },
      {
        "ShowGeometry": true,
        "Name": "List.Join задания",
        "Id": "339b94ac10f34bd2972cd694f5486235",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 21819.5572188187,
        "Y": 7262.0239782648
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "45db054d44d34958a0e27f4a4cadff1a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 21988.402737582717,
        "Y": 7365.2888454112917
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "b48057e59cc345768e7aaf84b458617e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 21976.343858401058,
        "Y": 7458.4132127995736
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "f52869c06dd040918ce11ce2ed5888b7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7725.62786809372,
        "Y": 8258.0571551717985
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "fcaf9de1965843c588a5a1cf2f0179ed",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8300.5290188549079,
        "Y": 6775.1063417824253
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e2d00a732ea34016a05d88993f3764ba",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7751.282745686568,
        "Y": 8157.71921743481
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ccbcec393a8f4cf9a6d67bf482a0b11f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8322.493376694174,
        "Y": 6682.3845050692044
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "873cf9619554427e8c1a9ca0f26233b8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8102.7289137457974,
        "Y": 8236.9423961472221
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "62ec4e646fa64fcdbc68c8b23fc829c0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8276.906264802441,
        "Y": 8240.9820942932
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "f6bd4e069c18467b802ac59376535f7d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8977.8170482715541,
        "Y": 6261.112101749296
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "ee89ac01f4e34553a217ab43bc749fcc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8745.9762834647227,
        "Y": 6272.4493139366959
      },
      {
        "ShowGeometry": true,
        "Name": "List.Join",
        "Id": "b8f9f9f875374e81ad4372f5b5547800",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10034.281211945752,
        "Y": 6965.1158830975974
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "54723206a7d54c5bb282baf01a81efba",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10553.816316338036,
        "Y": 6953.7061587157268
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "62747ea5e3ac49589e743cb147fdaeeb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9976.10345898382,
        "Y": 7108.101283794299
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "b70d0588336346e084c6e1be94c207ff",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9931.5800248777141,
        "Y": 7193.1071216252967
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "aace12e3703e465c870a37ad01b60195",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10357.336233941171,
        "Y": 7106.69281541138
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "9c179574703b4b27887cdee87495d854",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10499.088216427015,
        "Y": 7271.8367010658858
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "c4fa282441ff42babbb8598391e378ca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10535.574321043192,
        "Y": 7185.8724466294825
      },
      {
        "ShowGeometry": true,
        "Name": "List.Join задания",
        "Id": "105fe69bf71e401e9234abafae1db177",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10614.569196453775,
        "Y": 6557.5647990489942
      },
      {
        "ShowGeometry": true,
        "Name": "Element.IntersectsElement",
        "Id": "cadd633393f04e95b49cef30046dc70f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11905.065013620489,
        "Y": 6574.0296894197
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "90ad685864a14c69a2278131a416cf6d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12757.119156772398,
        "Y": 6973.0948972326878
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "2498abe53d854a149b834509827b573a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13228.143210913438,
        "Y": 7079.5998055304
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "d149a93c519c4f51a2e7e6e5b9778f63",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13212.240566240636,
        "Y": 7185.68824191316
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "bf7863d1184044b6b1e7b89f0c4d9f78",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13508.363177227036,
        "Y": 7434.6314642197985
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "e992778b704f4d1ab325235b51ff650c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13553.027549301636,
        "Y": 7203.96693374772
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "d1ed490bfc574eedaeb9201d40c5cf0b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13497.866746808037,
        "Y": 7531.2071395109388
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "547e18aa47d5440ea566588df335ab8a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12949.545756791314,
        "Y": 6980.2972932422917
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "5b2a554c76114ad1af0dee409d952905",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13250.386473505721,
        "Y": 6082.9817278431074
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "5165d6f8baf343bf93ec89bfa4f41b72",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13234.483828832921,
        "Y": 6189.0701642259064
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "9bdc70fb192a4d4d9a458be930b81afc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13530.606439819321,
        "Y": 6438.0133865325079
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "eaf81894168e4aedb6c5832f2331411b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13575.270811893921,
        "Y": 6207.3488560604073
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "3ea38b5fea144ce188ef63c5977d634c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13520.110009400321,
        "Y": 6534.5890618236081
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "313211fc1928424f94791f5ed53ef702",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9632.2832222979723,
        "Y": 5885.3942421308975
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "4ddd058d478f436c92557bf8656759e8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9697.59976899807,
        "Y": 5761.53144093058
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "6ca3f26d12bb45858fe3df53cac483cc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9926.0357236165182,
        "Y": 5726.1216649292792
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "1518d9269d43484e830d765ed665498e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9113.5754163780675,
        "Y": 5659.9541982933524
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "ad88ba75727d45f0b3f6a6bbf3860a7d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9317.9351290961022,
        "Y": 5749.3116857827763
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "f81771e1d9134be483caa77f2bf8b2bc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8101.4710717123744,
        "Y": 8469.2372079451288
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "6e0d21db157b401086150ab34570a220",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8030.0564495464023,
        "Y": 8559.57851432933
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "f3174af321a44e96a7a2a85bb1e9ab90",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8553.5517982383353,
        "Y": 8739.1754459408967
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "d4072765902e447c9d8cc30f0f66f9ce",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8756.4682916517759,
        "Y": 8702.441018317837
      },
      {
        "ShowGeometry": true,
        "Name": "Ducts.Location",
        "Id": "1884d708f2c943d9a8e8c78d71002e90",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10534.625958847884,
        "Y": 3595.0867880882565
      },
      {
        "ShowGeometry": false,
        "Name": "Curve.SolidIntersection",
        "Id": "f808aa3c4a8b4d28b510cc86443a9311",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12333.993523766552,
        "Y": 2977.122902748622
      },
      {
        "ShowGeometry": false,
        "Name": "Python Script",
        "Id": "6496918750214eb791df464286cbbb24",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11222.671554369275,
        "Y": 3921.2527071763161
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "0cf641bb2f1e442a8cb3f653aebbcd8c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12760.891228819253,
        "Y": 3299.0089387609719
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "07e338ff970643e9974b1c227b14584c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12449.740893537934,
        "Y": 3148.1210458449086
      },
      {
        "ShowGeometry": true,
        "Name": "List.FilterByBoolMask",
        "Id": "4867046d7d78402eb9dcb316554c96cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12769.442944778853,
        "Y": 3397.2128764932017
      },
      {
        "ShowGeometry": true,
        "Name": "List.FilterByBoolMask",
        "Id": "cb729885c36f4495b6795cef2d6fde68",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10431.03811796091,
        "Y": 10073.156366002571
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "8b3cb7cfba5447438606800a2698c8d4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10348.13908442383,
        "Y": 9562.2265633871557
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "1b03ea7d81d24527ac138ac6cbd2553c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9919.146992571561,
        "Y": 9475.50951340957
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "e59c0f3b8cda423c8e5a9011e822d570",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10350.482270923429,
        "Y": 9475.376511059716
      },
      {
        "ShowGeometry": true,
        "Name": "Curve.SolidIntersection",
        "Id": "cad10da8642d4f5c8235f52fa6b87d78",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9912.87335055687,
        "Y": 9319.2184292980764
      },
      {
        "ShowGeometry": false,
        "Name": "Python Script",
        "Id": "7612c9382e7c463c85f17a6e3c6c772a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9424.4629036232818,
        "Y": 9089.2518968436816
      },
      {
        "ShowGeometry": true,
        "Name": "Ducts.Location",
        "Id": "0130339e07f3456bbb8c8919ad0ecd91",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9669.14224931388,
        "Y": 9339.9338750952556
      },
      {
        "ShowGeometry": true,
        "Name": "List.Join",
        "Id": "174821945a0f429fb2c1d94bbd108fd0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14697.207934796439,
        "Y": 3084.8298474791854
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "73ee69d3009f42b8b708cde0c7d5aad1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7975.5525222496717,
        "Y": 10014.089958709725
      },
      {
        "ShowGeometry": true,
        "Name": "1.1 Число актуальных заданий (стало)",
        "Id": "4ed993b1f81645598251f1b65bc05453",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 18768.259925727445,
        "Y": 7800.8608817230543
      },
      {
        "ShowGeometry": true,
        "Name": "List.Join",
        "Id": "5f9bd529c2cc4ca3932213b3ca215c54",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 17813.576420076159,
        "Y": 8195.08513482233
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "1f3cf8a698c544e78df6e16b6d3a559e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 13580.112507493239,
        "Y": 7675.919944351177
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "9930dc78ddb84cbbb8a237b65164a21d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 14261.622811282339,
        "Y": 6522.4140507111779
      },
      {
        "ShowGeometry": true,
        "Name": "1.2 Число отработанных заданий (стало)",
        "Id": "286397b9004e4e87bdceeab57edf1e82",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 18107.0188810424,
        "Y": 8403.0228846982845
      },
      {
        "ShowGeometry": true,
        "Name": "1.3 Число не актуальных заданий (стало)",
        "Id": "fca0f2d2da704e05a2c305c62bf58639",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 18123.332385969115,
        "Y": 8764.2392466187775
      },
      {
        "ShowGeometry": true,
        "Name": "List.Join",
        "Id": "28c7ce4f5f354de5a4628d12e5128c2d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 17793.707419813039,
        "Y": 8544.78970639308
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "8207413f4ccd4f6bbcb87a2c617d1640",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10971.070819161085,
        "Y": 2013.919943557034
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "2d15da64ee8148f3a2f28c4da2bb645a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 18016.760916082534,
        "Y": 8218.1527992113115
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "c2fb6dd622874b80b5e51e65acb41fb2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11682.827691464894,
        "Y": 6159.5468327696726
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "2d8060d150504ccd98aea2b16c966230",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11741.738272385493,
        "Y": 6051.1581020288631
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "1a8b1cd4694e4119bc4af0a25088bc90",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11693.589765939294,
        "Y": 5865.7374246021227
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "74c43c74bac147c99dcb280746d4bdb4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11395.025180361105,
        "Y": 5916.4660775542725
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "3336452c425b4ad280b95c618253a56c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11745.872719397594,
        "Y": 5716.4929384706629
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "3d11919bbf7148c8ad2ee68758ba9ffb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10776.493928808928,
        "Y": 5455.2994460144264
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "0d1ff2ff46cc481d956fdd3a866230e0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10714.603534701562,
        "Y": 5950.3577743342976
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "aa0fe778feca48068609187dd45a64cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10516.335768019555,
        "Y": 5704.9237565316234
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "bbdb1e366f3040f9ba9a1c37a4d008de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10456.76824111393,
        "Y": 6027.9851902285063
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "713e4a22da7c42a788b6f08b049d0223",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10871.859530385016,
        "Y": 8802.6309004104878
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "97f7b04c45974a078582e7bbec362067",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10930.770111305617,
        "Y": 8694.24216966968
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "c24bb35a8bd045da9a90d7b0d4661bf6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10882.621604859416,
        "Y": 8508.82149224294
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "7c0185b7d627423eba3cec1edc73b675",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10584.057019281217,
        "Y": 8559.5501451950877
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "4399a9370fe540bea6f142da25fcb670",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10934.904558317716,
        "Y": 8359.5770061114781
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "8b87deed7e85426ba5cfb4efe388a5a6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9965.5257677290174,
        "Y": 8098.3835136552489
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "879050bcdd704f06802772c8e7f22e0d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9942.2166972245159,
        "Y": 8542.7968438302887
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "c3989fdc3c514a54b1b641ad3c5bca08",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9705.367606939717,
        "Y": 8348.0078241724368
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b9e88aa4eda24ac69951812d9ba98431",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 9677.898506763664,
        "Y": 8590.144563981612
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "55ec1fe1b3a340a4b94fbf3ade266dfa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12532.629867305714,
        "Y": 8343.6262372859383
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "9fa40cc2836042f0992406e70376adf5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12591.540448226313,
        "Y": 8235.237506545127
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "00c3f3be990c4772891a8f9562cfc13c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12543.391941780113,
        "Y": 8049.8168291183856
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ef5a7c5cb9df468ca7e865a00c510c32",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12304.18118760361,
        "Y": 8385.9317125088237
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "06302a7a9101490591c8873a9de3bdd5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12595.674895238413,
        "Y": 7900.5723429869277
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "591d9a6fe42b45899ea300b0ef1e4946",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11626.296104649702,
        "Y": 7639.3788505306957
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "50322e7c5b2d4034b3295d0fdb932fe3",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11602.987034145202,
        "Y": 8083.7921807057346
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "bafc962e6b694d9cb864ba74ae8db0cb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11366.137943860404,
        "Y": 7889.0031610478864
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "3ab11115e9ba4da1b606d6e2c1c26a84",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11380.668694040003,
        "Y": 8138.6065409202847
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "79b0dd291dc54ec18be392cf2ba16a1c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 17980.438737907174,
        "Y": 8561.0333486143172
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "c5a25e617c6241d1a88c6790f731be81",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 18587.700009216267,
        "Y": 7800.2690453967525
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "2d7f406e24e0416890ec19d9740ae4ee",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11179.898624727286,
        "Y": 5966.0943498969
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "f8187566d6f34e4e9844e0891d2a819c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 8412.1685052757221,
        "Y": 8518.24164222354
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "a128047b686f494eb912ca312b1d45a8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10313.0062047297,
        "Y": 8665.3285358547
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "468bd683a0f64e978e01fefe9b39d490",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12014.230816156876,
        "Y": 8146.0373483670155
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "6f4e4a05d94046edaa8c5d9ac74496bc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 10285.34864116077,
        "Y": 6788.4858457434648
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "8ab91da05d224583a7d0974cb49751c4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3817.9871463449308,
        "Y": 6439.6960744740554
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "f8aa5b4fb841466ea68a2d3915b690a5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4182.30322009213,
        "Y": 6199.0559945852156
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "5f5d244cd09b40a2924518d81c2408cc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4632.5654385954331,
        "Y": 6262.0176452483356
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "d67815dd8b414cedb4089ea6da841c85",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4001.5244530428317,
        "Y": 6248.6238984323154
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "31ac6966676947ffa3983518a23a11ab",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3845.3177281710305,
        "Y": 6121.0371979645352
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyType.ByName",
        "Id": "61e2f16dac0c48169dc0f8dade6dc0f7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5222.24556509473,
        "Y": 5871.6641213372059
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Family Type",
        "Id": "6fe17454c94340c9bd34ef2d1ef2ff1c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5213.7083045152322,
        "Y": 5952.2781902923653
      },
      {
        "ShowGeometry": true,
        "Name": "Наименование типа семейства",
        "Id": "842f4d0d043f436b9b31ab97cff519c0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5311.2660148025316,
        "Y": 5776.9451362768159
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Family Type",
        "Id": "5c2d1ccba7b1440ba250b0cc0b7c7a76",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4775.324725650833,
        "Y": 5947.6039513992555
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyType.ByName",
        "Id": "952a86142a21465296b7ba54ab0c59b6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4783.8619862303312,
        "Y": 5866.9898824440552
      },
      {
        "ShowGeometry": true,
        "Name": "Наименование типа семейства",
        "Id": "ccd85f55448c414eb94b22d122269a2f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4872.8824359381324,
        "Y": 5772.2708973836552
      },
      {
        "ShowGeometry": true,
        "Name": "List.Join",
        "Id": "6486f03e5bd4411588f1537e6a55d1fb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4848.5716165823324,
        "Y": 6122.8002499672557
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "612a030f30454520bed2a5a79e83cf3e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4608.6763220685316,
        "Y": 6125.9799693476152
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "442e68fa94f34d338785b71adef8c6cf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4943.6857124884336,
        "Y": 6232.0735337897158
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "89f61a78e88d40f6a45d1b0939383bcd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4941.9755564899315,
        "Y": 6350.6286022402655
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "c3dc640f8a5646e3888e3fc72dd2d6ec",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 11456.466678191677,
        "Y": 6349.0744654229266
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "d073079e0d68428d873a73fd3f503db6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 12273.374825457278,
        "Y": 8124.1646414662837
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "f041a3ab1c82410d8449bc0ab1fb9cc6",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7463.77912753058,
        "Y": 6317.453258246238
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "661faf71e6f54c9fbe7990d47b554658",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7485.7434853698405,
        "Y": 6224.731421533008
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "09344451f06347ffa87ac22c02650835",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7776.5346554482885,
        "Y": 6434.461898601905
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "c93b54fbc3e44ede9438c3ba3566134e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7913.8254361181371,
        "Y": 6743.1702861647354
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "a2a48546ee6348d8b191b377ca8a0fed",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7758.9379547983644,
        "Y": 7853.080285085166
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "c745b52d663949c3a135078cad8eaf17",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7822.8856858364807,
        "Y": 7668.1309484588874
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "62693f1cd0f342f8b08e8b4f46af2eb2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7510.13015791877,
        "Y": 7551.1223081032267
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "01d565efca4a46298ddeb0bc83491326",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 7532.09451575803,
        "Y": 7458.4004713899967
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "1556165fd0054db49a69234639dac772",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2433.1599281428244,
        "Y": 5530.0918923513627
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "9c15196999854fb1af9880289ce606de",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5004.8676756562145,
        "Y": 3311.6297446369886
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "622466c828614eafa544aa31829a34a0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5803.2020296903538,
        "Y": 3478.5853105902725
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "47e37e5d5c1643e888a9710284d8b0fc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5630.8635504005042,
        "Y": 3478.0770998953349
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "c0a1b26109974b83a937b37f5d87f84a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6530.869272369484,
        "Y": 3422.0300605108137
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "66f620ad482b44f58862c4409b5e4848",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6397.1992380930742,
        "Y": 3365.8652787827646
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "6720c5bab35342c9b3b4c6f5a2861165",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6218.7089636723449,
        "Y": 3060.0892198509368
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "ed9b3cb62fba44ac89576e9341f5c821",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6526.6218498471544,
        "Y": 2948.3777810999395
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "5b16cf5addfd4637af5a8455807b8aaf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6540.5802240232842,
        "Y": 3239.7037335327104
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "4b315991cc1a436a9ee7f58c3bb68cbf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6517.2406833228042,
        "Y": 3183.4062695378025
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "5dd851805f71408e9bff1eeb6940f05f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5303.3099590530837,
        "Y": 2864.8951851444585
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "2dec2f6e15ec4a7c90aa30e08a02023f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4925.2816385616343,
        "Y": 2859.6110977885255
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "90cce1ffa29043e7bf292316b7b27db7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4587.9557628632938,
        "Y": 2865.6986711522386
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "2d03d46dd0c14003bab2a97effc99163",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6533.7085496897444,
        "Y": 2802.3638716694586
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "1e56a0b4f0224be58647b004b64b9693",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7235.9685282485443,
        "Y": 2988.5659418950277
      },
      {
        "ShowGeometry": true,
        "Name": "Element.GetParameterValueByName",
        "Id": "f7681e6e94b2416db7ea92ac15d87c25",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7635.7879490848045,
        "Y": 3134.2042593630708
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "ad2b4e269a0a435ab4022162f9ca28bf",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7603.2459992776512,
        "Y": 3077.5825257162669
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "c86b263d05fc4b2796eeff5c9a53b035",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -7823.3160577269837,
        "Y": 2918.3512024125857
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Family Type",
        "Id": "96ef37bdd4304734b28e0fe31ee9363b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8302.0393543236,
        "Y": 2844.8198928145757
      },
      {
        "ShowGeometry": true,
        "Name": "FamilyType.ByName",
        "Id": "a87fe1bebb9a49f8a1d59fc47dd3fc90",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8315.7484257320411,
        "Y": 2720.2838203956589
      },
      {
        "ShowGeometry": true,
        "Name": "Наименование типа семейства",
        "Id": "b414778ceded429aa044f99a7e080df8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -8405.4395836221865,
        "Y": 2595.6663159262289
      },
      {
        "ShowGeometry": true,
        "Name": "All Elements of Category",
        "Id": "6bb4efb0df7c48d99131af801936f302",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6691.0355351139042,
        "Y": 3662.9964374450046
      },
      {
        "ShowGeometry": true,
        "Name": "Categories",
        "Id": "e967f4c9bf774ccfb494b78de7cc315d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6686.7967739339147,
        "Y": 3581.1996076235037
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "4e22fb14422b436b93a9d73235340f3f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -5013.7250970366349,
        "Y": 3508.0901962430257
      },
      {
        "ShowGeometry": true,
        "Name": "Element.SetParameterByName",
        "Id": "e5be5178d3bf44c5a893d10042976b4e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -4998.9435111896546,
        "Y": 3727.1170551511946
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "b618304b2107432498603019f119f4a8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -6300.0605232473545,
        "Y": 3715.70473195618
      },
      {
        "ShowGeometry": true,
        "Name": "2.1 Число актуальных заданий (было)",
        "Id": "a2af0dbf64724b3a94807f74d2be4e85",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 22829.847304714323,
        "Y": 6633.647555045879
      },
      {
        "ShowGeometry": true,
        "Name": "2.2 Число отработанных заданий (было)",
        "Id": "1ee9fde82a174dcbbfc53285cbe8ed65",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 22829.694836952578,
        "Y": 6735.0197649015836
      },
      {
        "ShowGeometry": true,
        "Name": "2.3 Число не актуальных заданий (было)",
        "Id": "d967513b7265498d9caf2b0b566c2963",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 22834.618603071707,
        "Y": 6844.5139489666844
      },
      {
        "ShowGeometry": true,
        "Name": "Напоминание:",
        "Id": "b72b167db48349a6b85b51b51aa42de3",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Excluded": false,
        "X": 2877.9819318821446,
        "Y": 5557.544518316653
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "d7e964476ee74acbb0e7cf647ce88e72",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2111.0839197995047,
        "Y": 8514.1418207274455
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "ccb06fa941b74dbcb435eca95511a342",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2069.3975721085044,
        "Y": 8655.6243643596445
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "0257ff1c454940688fc9389f410df008",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2071.245565654699,
        "Y": 8591.994014177295
      },
      {
        "ShowGeometry": true,
        "Name": "List Create",
        "Id": "d4ab8275b94e4d08b7e8dca9042df1c2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2334.6529994441044,
        "Y": 8396.0120446098954
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "37f50008639f43c4a10b63e7709d02b8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2095.7065545892,
        "Y": 8423.1979860527954
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "e74802cf33d34ef28ca39369ec676f2d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2122.2006858182031,
        "Y": 8347.6363940289866
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "b5d8c7ce19114c3998b087902acfbba2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2177.3961389492706,
        "Y": 8267.7508072758046
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "1577c12912d447aeae5cd0d1b2d4d00c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3223.56242670162,
        "Y": 8364.9603772967857
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "5edf2cbac9334296816f3824d43176ca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3182.5800630958138,
        "Y": 8582.0822816325963
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "2512a1633b5340f782ab73781ce054ca",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3157.6999344178139,
        "Y": 8500.9285180552761
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "acb859ebdc854914aad7cd86dae86269",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3264.4466176260189,
        "Y": 9173.0938582410563
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "63043272426f4635924d90311535ba72",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3166.8621779708133,
        "Y": 9381.2785926743363
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "e74c2b22ef554eaf8d9a26946bd23ec2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3141.9820492927188,
        "Y": 9300.1248290970161
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "b571aaf9073b4259a4d085355a18d5c5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3253.4480964672589,
        "Y": 9569.8792517239781
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "08c6716e4ff44708841fd262c05b9d35",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3155.8636568120605,
        "Y": 9778.0639861572581
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "0a7fc7a2876a449ca99fb9897ef8a500",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3288.9652101183642,
        "Y": 9686.116443065479
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "95fdfabf984340ba97d64b5dd1b61fcb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3147.2755530670056,
        "Y": 8153.2351483330494
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "914802fdb597467484fc9c5cc02c55ef",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3122.3954243889038,
        "Y": 8072.0813847557292
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "5fafcf63c0554715b2d538549e8b3827",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3224.1301104446047,
        "Y": 7977.29983684637
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "5783f1b94aef46ba82e1c8cb3162f785",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3352.0402967918153,
        "Y": 8062.2216490505662
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "6ad0115819324571b36c619c8330f198",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3259.7433216113927,
        "Y": 8765.9968615182788
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "aefd3d0c704b4d449af7fe398e234e8f",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3162.1588819561925,
        "Y": 8974.1815959515588
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "b88399e2b64c48e7afc3971d01464e04",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3137.2787532780926,
        "Y": 8893.0278323742386
      },
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "1556f5a7edc94a5fafdf68dcc68e6ab5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1414.6769187681421,
        "Y": 7043.2785089299523
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "bb00391fbf694d049e7b681d3f856326",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -975.0,
        "Y": 7273.0
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "53859906d59d4dd59018a03c67bdfdac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 2326.0,
        "Y": 6720.0
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "8958eea8a9174ac2bcf18ac9956e64f4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3088.5647483387697,
        "Y": 6771.1883826340136
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "d0c21748a5d64a79909158a607edd22c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 3784.9023260821536,
        "Y": 6820.9346113234105
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "6fac5e56484140fca18347be5fd01a64",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 26961.289064451772,
        "Y": 7499.2465938936348
      },
      {
        "ShowGeometry": true,
        "Name": "Boolean",
        "Id": "e0659da033fd4e90882e8c3309093ab8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 26919.602716760772,
        "Y": 7357.7640502614358
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "19308be5b9344708a0f38e3990695aed",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 26959.441070905574,
        "Y": 7435.6162437112853
      },
      {
        "ShowGeometry": true,
        "Name": "List Create",
        "Id": "81430e6f3ad044de8d6b391a5023f356",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 26241.324157289775,
        "Y": 7183.5654622028851
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "0501ca69557b4f2e9631283b7a347328",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 26859.271473270874,
        "Y": 7125.1752883325662
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "c40b48c96e104b1486f167a63cb14f45",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 26939.491543761575,
        "Y": 7281.4968656815236
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "3aed0aba4ad542d399a39fbdaf875085",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25176.870430956977,
        "Y": 6719.1717581223656
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "aaffd024789a40458216a809703858eb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25204.234351602976,
        "Y": 7120.2304170243351
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "d2fa2418a2614efab3f9b85441cf060b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25164.163617553375,
        "Y": 7508.9744043828068
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "ec81f0a807f44c1bb71fbb21e10b75d2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25148.038225750373,
        "Y": 7894.8439292675866
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "8e362073cbb74a438948827345fa24af",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25124.959483198974,
        "Y": 8643.7651985611737
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "b07d17e85c7c41b59059d935cc94d50c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25133.457295134674,
        "Y": 8291.3051862660468
      },
      {
        "ShowGeometry": true,
        "Name": "String from Object",
        "Id": "17f31ac3cd3048b09b47df7073d13549",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25082.274791507276,
        "Y": 6882.1234727409555
      },
      {
        "ShowGeometry": true,
        "Name": "String from Object",
        "Id": "01540912acf247b9a49fa07d4c571295",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25172.960302542375,
        "Y": 7308.8399615516355
      },
      {
        "ShowGeometry": true,
        "Name": "String from Object",
        "Id": "1cbde5db25154a7da47f69e5154b2afa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25096.390668204174,
        "Y": 7722.1798352255064
      },
      {
        "ShowGeometry": true,
        "Name": "String from Object",
        "Id": "e3ed0b6a2080429db44c647c72ec2bc5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25046.874563247875,
        "Y": 8063.6657795362371
      },
      {
        "ShowGeometry": true,
        "Name": "String from Object",
        "Id": "0aeee9ba21034e94811c1a8fa788388e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25018.345050462874,
        "Y": 8423.4895001649857
      },
      {
        "ShowGeometry": true,
        "Name": "String from Object",
        "Id": "fe177b8cf8bf46e99231d470bc8c4a32",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 24954.933159481574,
        "Y": 8766.0632054603047
      },
      {
        "ShowGeometry": true,
        "Name": "String",
        "Id": "f1fd4c47c6be46daa422ecf4375e73e9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 26599.485418692781,
        "Y": 7145.4380808478
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "96727535e4a74abda7d3e39a8dbc9b86",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2979.5925425437213,
        "Y": 8057.3987506686935
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "35b83891a35844c781cd0a36953a4c7b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -3010.2512059949458,
        "Y": 8487.3773031032415
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "afead0da1be74553b367c2fb6de22f4d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2990.4200070971237,
        "Y": 8877.3947061996
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "ab9aa454bb444d1b8dbf4b833754d5f8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2991.410708305908,
        "Y": 9286.2720991682763
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "5ba6bb2ab6794a20a3e43ba975d7a3f2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -2985.7829142885494,
        "Y": 9688.9735085793945
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "c2d5f1ad99f247fdb6a40ac6a2d53e28",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1649.6181818930706,
        "Y": 8313.8132390120718
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "08e9026470f04151af978e2a464f01f2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 27268.982680284615,
        "Y": 7140.2579776895818
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "16932f0068dd4ac0a9b49bba8159f5eb",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25425.250032085773,
        "Y": 6791.5085956798521
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "00eb0c98fd0548028f216d3fd27cd58a",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25414.63331388004,
        "Y": 7240.6134203631818
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "a459182b49b04c6b95807f7034b52262",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25378.975174991694,
        "Y": 7633.0491669886915
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "1ce0f5dc94b24d51b13ab0fc19b6e613",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25364.129821945535,
        "Y": 8013.5902282846355
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "f9539ce593d6492aa6c1ae233389b344",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25409.292002121976,
        "Y": 8404.0472982155225
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "ff346bd3136b4844b1de90649d3d855e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 25436.710519418313,
        "Y": 8759.5320889223531
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "6555689cfef148e0ab7b37991bccfb4d",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1911.4929243512197,
        "Y": 8554.4646217560985
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "b0e5633ae5bd40d69f1ad3ead5734365",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 27104.188019450554,
        "Y": 7375.8217254003166
      },
      {
        "ShowGeometry": true,
        "Name": "Code Block",
        "Id": "081813152be0426eb3c21a7323173d71",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": -1447.0,
        "Y": 8289.0
      }
    ],
    "Annotations": [
      {
        "Id": "493414e007f9448f97a32f83cf6e3d21",
        "Title": "отбираем только нужные внешние ссылки",
        "Nodes": [
          "f84108b986ab442fa1a9a3e4fe6d965e",
          "de901e6228fe4443924db1d4680425b6",
          "f5aa30a9606c4aea8a849d9abb2b8bb9",
          "a223f2e4eeff45ab9f06e215479fd57d",
          "e110eb485b4c4fb3a40282cdd917b883",
          "b2286d7ac15a40e99d110bb238c8f655",
          "a49ca1a4713143b88dbcb3e24cf98bb5",
          "e47048782ae24816b2716ab7177e3a8e"
        ],
        "Left": -620.35462453482114,
        "Top": 6270.2637710891449,
        "Width": 829.28501933097459,
        "Height": 926.49095504137949,
        "FontSize": 36.0,
        "InitialTop": 6323.2637710891449,
        "InitialHeight": 898.49095504137949,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "58a89317409e4ec18e1b0cb656599511",
        "Title": "получаем воздуховоды и трубы, лотки",
        "Nodes": [
          "2f69c25b9086405096b51b83ac49dd32",
          "436fea4d82ea46c589c32644834e0a14",
          "4a0300e2c53143e583e5c2b9cf8d17e8",
          "3df89a2902e746199b306d89d6216c17",
          "6ea14ab69f974716b63d433d9cc6e8cb",
          "d54bfccc2d8f4c8e909ee5542d98355f",
          "661a95a8bc4b40e6a2e27ec0dd88ce31",
          "94672cdf4ade4b1cabc8943bd55ed952",
          "272c9a8e373947e3b05de94b3d00da98",
          "63a64d5aa0d44c539c2a068612114680"
        ],
        "Left": 1774.1129024708998,
        "Top": 5984.2534906077453,
        "Width": 1048.72960165327,
        "Height": 716.41508603253988,
        "FontSize": 36.0,
        "InitialTop": 6037.2534906077453,
        "InitialHeight": 715.41508603253988,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "4aef02e29e1c4e82b0858c5979fe0743",
        "Title": "Исключаем короткие участки труб и вздуховодов",
        "Nodes": [
          "0cff9d8c818a4c4d8ee2e818780b77fe",
          "721e24b9705241bab99276278965d699",
          "7322bedb0c76439a935079155bc054f8"
        ],
        "Left": 3030.5440545292468,
        "Top": 6245.1590848287806,
        "Width": 549.878173814468,
        "Height": 366.18380004219944,
        "FontSize": 36.0,
        "InitialTop": 6341.1590848287806,
        "InitialHeight": 294.18380004219944,
        "TextblockHeight": 86.0,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "63a88b7fd7dd40e18879bdd423767aa9",
        "Title": "получаем стены из всех ссылок",
        "Nodes": [
          "dfab32748ac146ccaf4e2b72237ca3c5",
          "4f83a11eb6b54df4b8474d73cc09a308",
          "f05dc3803d42422ca6e5136af20b072e",
          "06713f3e186843d7b4822a40e82755d8",
          "f7d0a7510796458cb05af8a72731d42d",
          "7752a4e89dd64076a54148b16354c704",
          "5c59b9bb7de34ad289c31255aa069721",
          "d752164309ff4ba0a33764d597ef808a"
        ],
        "Left": 1978.0867980071798,
        "Top": 6843.2804592739349,
        "Width": 884.6933925788062,
        "Height": 631.94200356469082,
        "FontSize": 36.0,
        "InitialTop": 6896.2804592739349,
        "InitialHeight": 620.94200356469082,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "98ffd78073f1470796a87992dffad206",
        "Title": "ВК/ОВК. Задание на отверстия в перекрытиях.",
        "Nodes": [
          "975758dbb9f34d1eb7e14b643f363fc0",
          "ba2a47102684492fbb6edaa98c7d5471"
        ],
        "Left": -456.08472131813051,
        "Top": 7590.8886353287453,
        "Width": 314.0,
        "Height": 551.53573985587354,
        "FontSize": 36.0,
        "InitialTop": 7730.8886353287453,
        "InitialHeight": 291.53573985587354,
        "TextblockHeight": 130.0,
        "Background": "#FF848484"
      },
      {
        "Id": "2a374da78db8405bb1828ed9cddbfbfe",
        "Title": "Запись в версию \"актуальное\"",
        "Nodes": [
          "e4f7bdb1b9da4e71a40f4bfc62474a60",
          "5bc8ed4c43134eaab5ecbd6e9b6b8b82",
          "ddbdd124e6a345539a95d4ab945d08e5",
          "7e9753cf12e9447db51dcfb5806e42e5",
          "a894a806b28d4580a7576f47ab6e76c9"
        ],
        "Left": 19492.343434832765,
        "Top": 7186.3069003536639,
        "Width": 628.99130225422414,
        "Height": 649.60733398054072,
        "FontSize": 36.0,
        "InitialTop": 7239.3069003536639,
        "InitialHeight": 596.60733398054072,
        "TextblockHeight": 43.0,
        "Background": "#FFBB87C6"
      },
      {
        "Id": "b17eef7556fb4418a4be4ac4f96b228f",
        "Title": "Все отверстия",
        "Nodes": [
          "b2e8e485e36a4a74bd79f0d4b21ee98c",
          "c262b70c7f564d42bba05c4efae029ec",
          "c2fb2a4d66714f38a85b2df69e629a78",
          "b3126314765e4bccbbe68e0ae6c2b6ea",
          "dc8ce536f5e84f9aae179010f58801a7",
          "78bd9da1e856429a9fe8061e06078770"
        ],
        "Left": 7060.2600217735007,
        "Top": 4471.2703864341784,
        "Width": 294.0,
        "Height": 680.91541567029981,
        "FontSize": 36.0,
        "InitialTop": 4524.2703864341784,
        "InitialHeight": 679.91541567029981,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "bbcb5bb4366040b68389ef3030075dbc",
        "Title": "Отверстия АР",
        "Nodes": [
          "c6d9f781d5e04b0caa014db95ff0bf96",
          "264a947abf1d4eadb4e8dbc64f6f2351",
          "e60995124cbe4aea8cc60d3985707ae3",
          "c90f22494a994163b6c8d3d00dac1fae"
        ],
        "Left": 8340.78379350821,
        "Top": 4501.049036041708,
        "Width": 1065.2330976282283,
        "Height": 387.12030682385193,
        "FontSize": 36.0,
        "InitialTop": 4554.049036041708,
        "InitialHeight": 376.12030682385193,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "5e55ade8a9c14627be954f66951b05d3",
        "Title": "Получение угла поворота системы кординат элемента\r\n",
        "Nodes": [
          "cdbea3a49f7b477ebbe18aafd5268b9f",
          "ac2917d4d79d4a9ab9d70f7f879703ce",
          "c0ecaee5745b4f6e87b2e2097d8361f8",
          "e8f76166f00e48f2a9fad1ecf6a19e8e",
          "62901d2ea12e47d98881abb3d858d23f"
        ],
        "Left": 8613.3283278645176,
        "Top": 10338.435825414179,
        "Width": 793.92470084789966,
        "Height": 492.23715702468689,
        "FontSize": 36.0,
        "InitialTop": 10478.435825414179,
        "InitialHeight": 404.23715702468689,
        "TextblockHeight": 130.0,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "2997f822b49e475581c5878809e88095",
        "Title": "Solid перекрытия",
        "Nodes": [
          "dda32d1a3f804734a6eca8fceb165905",
          "1657c510a32745d783bd208ebd2e3f9d",
          "0778048fd18243d0a2ece200d6e66110"
        ],
        "Left": 8457.0484360992778,
        "Top": 9784.2096525397028,
        "Width": 536.046173764651,
        "Height": 315.08773522130105,
        "FontSize": 36.0,
        "InitialTop": 9837.2096525397028,
        "InitialHeight": 314.08773522130105,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "bc4dc712463d42d6a24f83a42dd85955",
        "Title": "получаем толщину перекрытий",
        "Nodes": [
          "3605d70956b94ad0bf9c61220ff0e320",
          "167cf29bf05a4a3f93092554f0359368",
          "401d5a48043b49a5961dcdaabf73a954"
        ],
        "Left": 9146.3106955045878,
        "Top": 9925.2135809820611,
        "Width": 471.87409976351046,
        "Height": 293.2725058824999,
        "FontSize": 36.0,
        "InitialTop": 10021.213580982061,
        "InitialHeight": 249.2725058824999,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "d158750b468c42f4b581640cfdc6b0d8",
        "Title": "Выбор всех заданий полы",
        "Nodes": [
          "57339e0c785946bc9a5875e4581d1962",
          "2317b43360d94d5f924761d5d75fd8e7",
          "c47623009412409ea7bdbd78f711f68b"
        ],
        "Left": 6864.7097928541434,
        "Top": 7462.4517280492619,
        "Width": 409.0,
        "Height": 364.33305401554026,
        "FontSize": 36.0,
        "InitialTop": 7558.4517280492619,
        "InitialHeight": 320.33305401554026,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "22851556223942e9ad1178bf416d1fe8",
        "Title": "Трубы",
        "Nodes": [
          "e5e89beb3bfe4a14aa5637d3194a5078"
        ],
        "Left": 9384.1266269049756,
        "Top": 9310.77456892473,
        "Width": 216.0,
        "Height": 431.0,
        "FontSize": 36.0,
        "InitialTop": 9363.77456892473,
        "InitialHeight": 145.0,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "0f472aca879f48fe8f718b03a6713798",
        "Title": "Запись в версию \"не актуально\"",
        "Nodes": [
          "b5b97c5c46e3433d9cddbb7489868303",
          "4eb6323f17c74384a878471d93f76320",
          "c50a48c769a943858172500321cd7241",
          "8cde88eac19a4532ab8624ed6eba673c",
          "792f95e5c919426eb588d08309e06de7"
        ],
        "Left": 11764.202322362396,
        "Top": 9399.3058994060375,
        "Width": 532.1226109864001,
        "Height": 674.65601009460261,
        "FontSize": 36.0,
        "InitialTop": 9495.3058994060375,
        "InitialHeight": 578.65601009460261,
        "TextblockHeight": 86.0,
        "Background": "#FFBB87C6"
      },
      {
        "Id": "89759caff27642baad63386820b8df59",
        "Title": "Исключение нулевых геометрий",
        "Nodes": [
          "77e4a37d435548618ec170edd4aa7da7",
          "d363fc10220340b58b8a18bfde066a61",
          "d82098c7322645ecbdc40c77bac9827d",
          "805d8a304eb847b9aa3482744d8d2624"
        ],
        "Left": 4363.9456652157041,
        "Top": 10680.018726860648,
        "Width": 337.3695809016732,
        "Height": 470.82970296542044,
        "FontSize": 36.0,
        "InitialTop": 10776.018726860648,
        "InitialHeight": 400.82970296542044,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "c1348f466dd043df871dfff5371fb363",
        "Title": "получаем перекрытия из всех ссылок",
        "Nodes": [
          "212fb647625e4c2f9bef67a91ea39a39",
          "60b8b6f1337240cbb960181bd0f3aae3",
          "4fe530680ed64cf0b569db6f3633190a",
          "d2587c439594406faec50a2b7cdf7e63",
          "0f3bcef79662439dbb3b1fbbee7c907c",
          "7abdb1674e9d49ba94d54d81c629ba93",
          "b61f9389425b4ef7ae704498f0b094e5",
          "ab1491871e194ab1a34614d85a4e35dc"
        ],
        "Left": 3398.975414283932,
        "Top": 10478.389172114945,
        "Width": 826.15891105858009,
        "Height": 619.85711782552971,
        "FontSize": 36.0,
        "InitialTop": 10531.389172114945,
        "InitialHeight": 608.85711782552971,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "32335e36090048a3a7475689996364bb",
        "Title": "",
        "Nodes": [
          "2c656fd0f0bb490db709ebc03d0e2c05"
        ],
        "Left": 8987.6518392711987,
        "Top": 7297.0025588865656,
        "Width": 184.0,
        "Height": 172.0,
        "FontSize": 36.0,
        "InitialTop": 7350.0025588865656,
        "InitialHeight": 145.0,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "c8abf52204584096bd1b7cd7374645f1",
        "Title": "Все отверстия",
        "Nodes": [
          "2f7f529281b04a83b5e4c95281e8a911",
          "2e7dc57e12e6458f95aac49dea4cd8c1",
          "be754a17dc6e401285bd12acbb8ab9b4",
          "e1cbc1f0706d401bb6f9e62ce6b03342",
          "feb21ca536d04dd6a50d19ccdc9b0f6e",
          "b9589d09063049118f1f7006663b476f"
        ],
        "Left": 3853.7108387366088,
        "Top": 9774.6647457707313,
        "Width": 294.0,
        "Height": 672.21492904869956,
        "FontSize": 36.0,
        "InitialTop": 9827.6647457707313,
        "InitialHeight": 671.21492904869956,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "b358ad388eaa400b9d7026038f58c5b6",
        "Title": "Solid отверстия",
        "Nodes": [
          "63bc6c8ee041415fb8fcfdde8ed771c2"
        ],
        "Left": 11255.478693452364,
        "Top": 4540.4142932596324,
        "Width": 175.34333333333333,
        "Height": 293.0,
        "FontSize": 36.0,
        "InitialTop": 4636.4142932596324,
        "InitialHeight": 145.0,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "ad69edc6462f4addbfe7f5b617eb27d9",
        "Title": "Получение угла поворота системы кординат элемента\r\n",
        "Nodes": [
          "45c3c5800d4d4f9f9a4bfc4508c484e6",
          "6cb5c58f8f6240af813d6845a07c84f7",
          "3ab0a1b03ee84e95944d47bf17d7a250",
          "59a962fbac9e4bf3bcadc42f2dd1afe1",
          "2d328a9ce8824e2bbefe6ec2ef8de253"
        ],
        "Left": 10025.553069545036,
        "Top": 4681.4923950132161,
        "Width": 793.92470084790875,
        "Height": 462.85930719620046,
        "FontSize": 36.0,
        "InitialTop": 4821.4923950132161,
        "InitialHeight": 374.85930719620046,
        "TextblockHeight": 130.0,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "d364bf6b04ab495f8a25c93991ead92b",
        "Title": "получаем толщину стен",
        "Nodes": [
          "1973514e77d041fe82c6f23928d61d63"
        ],
        "Left": 10877.929231113396,
        "Top": 4327.7087242167736,
        "Width": 171.01333333333335,
        "Height": 233.0,
        "FontSize": 36.0,
        "InitialTop": 4467.7087242167736,
        "InitialHeight": 145.0,
        "TextblockHeight": 130.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "48d09668582b4a6fbe5094c68b2b45d7",
        "Title": "Solid стен",
        "Nodes": [
          "e482c82e66c94b698c8ba3d094f383ba",
          "d933b6c142e1435c913fe99e24eb7a69",
          "b24d6cb364bc4f438f6513f303647b5d"
        ],
        "Left": 10061.567800682667,
        "Top": 4167.2159247461123,
        "Width": 481.29793890535984,
        "Height": 348.54498985754071,
        "FontSize": 36.0,
        "InitialTop": 4220.2159247461123,
        "InitialHeight": 347.54498985754071,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "8eb6eac70a904e10b17022495404bd19",
        "Title": "Запись в версию \"отработано\"",
        "Nodes": [
          "9b37b4c302fb4911a99f4ebd6c6851ef",
          "d908e15e2a064d12a739443a28dc61ff",
          "f04e193837064b0b864c7c0819344ff4",
          "d48a9fd5e21147f7b03cfeaf5afe00e0",
          "46d8f7a2335f4ff5843a1907f1dce395"
        ],
        "Left": 14985.389754222828,
        "Top": 2944.5809759082927,
        "Width": 575.6261805674003,
        "Height": 649.6073339805007,
        "FontSize": 36.0,
        "InitialTop": 2997.5809759082927,
        "InitialHeight": 596.6073339805007,
        "TextblockHeight": 43.0,
        "Background": "#FFBB87C6"
      },
      {
        "Id": "42278e8fe5974630a8613b1d713ac599",
        "Title": "Запись в версию \"не актуально\"",
        "Nodes": [
          "f013859cc7104119a97ddbbf5e024bf3",
          "dfab9b683b154afcb362111333293bb5",
          "693c378008f84c2c89de65fa95f3affa",
          "817d43c93b88494aa74d62d5febde1ba",
          "88526819623249a881be13cda3851031"
        ],
        "Left": 14533.500900756348,
        "Top": 4153.47291155583,
        "Width": 575.6261805674003,
        "Height": 649.60733398050161,
        "FontSize": 36.0,
        "InitialTop": 4206.47291155583,
        "InitialHeight": 596.60733398050161,
        "TextblockHeight": 43.0,
        "Background": "#FFBB87C6"
      },
      {
        "Id": "fca7c3ab2b0c44deb7011ad42eaa154b",
        "Title": "Трубы",
        "Nodes": [
          "8e40832771094586be8d185f08085b4d"
        ],
        "Left": 8358.0739600965862,
        "Top": 3910.4682085560889,
        "Width": 216.0,
        "Height": 431.0,
        "FontSize": 36.0,
        "InitialTop": 3963.4682085560889,
        "InitialHeight": 145.0,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "ec5bda881e3b40d092bb47e693feed3b",
        "Title": "Выбор всех заданий стены",
        "Nodes": [
          "d668ff4a6163496f9392fb136f35bf44",
          "402226d2250447aebcde0048373096c7",
          "1098ff3e2bfa439da1e0eb3719cb2c7e"
        ],
        "Left": 6890.6170512039735,
        "Top": 6411.4278927234027,
        "Width": 368.0,
        "Height": 364.33305401560028,
        "FontSize": 36.0,
        "InitialTop": 6507.4278927234027,
        "InitialHeight": 320.33305401560028,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "08679c2f65a24ad899f6a547f1d0234a",
        "Title": "Запись в версию \"отработано\"",
        "Nodes": [
          "f025f3279811477481492023c4ce49fe",
          "3ce897f30624477691772bac3c3ac5c7",
          "b7b55cd2b2f54c7eae45199063270714",
          "b9e7875170fb4029b11559aa5957f555",
          "0a30fd3d95d0416fb66ae96e79708863"
        ],
        "Left": 11567.371893994365,
        "Top": 10640.04109897813,
        "Width": 575.6261805674003,
        "Height": 649.60733398049888,
        "FontSize": 36.0,
        "InitialTop": 10693.04109897813,
        "InitialHeight": 596.60733398049888,
        "TextblockHeight": 43.0,
        "Background": "#FFBB87C6"
      },
      {
        "Id": "0ad5b633da0d43d5ad2816882dff368b",
        "Title": "Solid отверстия",
        "Nodes": [
          "24567a432c334c4cbc5e3fd403d278f3"
        ],
        "Left": 12534.913442372461,
        "Top": 1998.8520721495884,
        "Width": 175.34333333333333,
        "Height": 319.0,
        "FontSize": 36.0,
        "InitialTop": 2094.8520721495884,
        "InitialHeight": 145.0,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "9b06bcd400244985b6e90bda1fb3ea12",
        "Title": "Получение угла поворота системы кординат элемента\r\n",
        "Nodes": [
          "b6332398b39b48ca9f1182c7a1122b20",
          "44e090e933b24aaaad5160dc412e67a3",
          "cee9a552f2794f2680529a60c8d6ebf3",
          "a707d17a2fa049b3b43125bfefb6262b",
          "3c1ee00ed927486f924e4a9cb0b207e2"
        ],
        "Left": 11303.045311849171,
        "Top": 2139.9301739031785,
        "Width": 793.92470084789966,
        "Height": 462.85930719620046,
        "FontSize": 36.0,
        "InitialTop": 2279.9301739031785,
        "InitialHeight": 374.85930719620046,
        "TextblockHeight": 130.0,
        "Background": "#FFFFAA45"
      },
      {
        "Id": "e035da7573784ce1bf08ece5777b9a88",
        "Title": "получаем толщину стен",
        "Nodes": [
          "5c041bed4ad54e78a1cced02acd86497"
        ],
        "Left": 12155.421473417569,
        "Top": 1786.1465031067287,
        "Width": 171.01333333333335,
        "Height": 233.0,
        "FontSize": 36.0,
        "InitialTop": 1926.1465031067287,
        "InitialHeight": 145.0,
        "TextblockHeight": 130.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "89d21ebe7521412288034f096a45cfe4",
        "Title": "Solid стен",
        "Nodes": [
          "0a8df9811e9d4fe39fec71267742fedb",
          "5f29b82ecc83439baeea1f6aa9c9ebe7",
          "1adf7a29f0cc48ef96495a8106814b22"
        ],
        "Left": 11339.060042986872,
        "Top": 1625.6537036360692,
        "Width": 481.29793890529982,
        "Height": 348.5449898575398,
        "FontSize": 36.0,
        "InitialTop": 1678.6537036360692,
        "InitialHeight": 347.5449898575398,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "eb472d02e1b74adba05e666c8fa054e4",
        "Title": "Отверстия КЖ",
        "Nodes": [
          "0a8b9efbc7794a5bbe7f336b93cf308d",
          "bdb14ad903754c6c8f09eb9276626c79",
          "0e90807c3025420190d3bbe393aa51f5"
        ],
        "Left": 9618.2760358123815,
        "Top": 1959.4868149316685,
        "Width": 1065.2330976282283,
        "Height": 268.64460212066024,
        "FontSize": 36.0,
        "InitialTop": 2012.4868149316685,
        "InitialHeight": 257.64460212066024,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "b4c8662e86634ffbb6d3d63b3b4ee73d",
        "Title": "Трубы",
        "Nodes": [
          "3b1a5c599248487c87e03afe97c7bd99"
        ],
        "Left": 9635.5662024007615,
        "Top": 1368.9059874460486,
        "Width": 216.0,
        "Height": 431.0,
        "FontSize": 36.0,
        "InitialTop": 1421.9059874460486,
        "InitialHeight": 145.0,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "34ad79c921a843069519ce3b3f4e76b2",
        "Title": "Все отверстия",
        "Nodes": [
          "12ebe0a8785b4d50a919edf1724cfefb",
          "75bcee57b2d44b399da50889b1b612ab",
          "8f32ebebed024a489085d566d277cd1f",
          "2bccd166993e421d91c4872b5e376dc2",
          "ac2565c081ca472db4639bf0bf7f38c7",
          "c3c8cef03f7143978ef0f9b8ea4610fe"
        ],
        "Left": 8337.75226407767,
        "Top": 1929.7081653241389,
        "Width": 294.0,
        "Height": 680.91541567029981,
        "FontSize": 36.0,
        "InitialTop": 1982.7081653241389,
        "InitialHeight": 679.91541567029981,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "b0b5dfa6ae3e404a814e0f8af127767b",
        "Title": "Выбор всех заданий полы",
        "Nodes": [
          "aec3891052194133a8d84cec24abd138",
          "52ec96be8f7b4c499b9f267a2a1a5913",
          "096db61fae004dcb810a46589e5f9b55"
        ],
        "Left": 20804.102229988828,
        "Top": 7106.62875249002,
        "Width": 409.0,
        "Height": 364.33305401554026,
        "FontSize": 36.0,
        "InitialTop": 7202.62875249002,
        "InitialHeight": 320.33305401554026,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "4ad1c8c4a2e0402eac7dd9f6fe1cd5f4",
        "Title": "Выбор всех заданий стены",
        "Nodes": [
          "9b23960a92d443e4814b2f4f7a25f45d",
          "2d1afebcbb764051aa6356f6db2d3641",
          "305732086bdc4135b7336942d77f1659"
        ],
        "Left": 20828.553332457803,
        "Top": 6723.9785326260662,
        "Width": 368.0,
        "Height": 364.33305401560028,
        "FontSize": 36.0,
        "InitialTop": 6819.9785326260662,
        "InitialHeight": 320.33305401560028,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "347a934d67dd4f26a529f452f0f40611",
        "Title": "нахождение заданий ",
        "Nodes": [
          "339b94ac10f34bd2972cd694f5486235",
          "b48057e59cc345768e7aaf84b458617e",
          "45db054d44d34958a0e27f4a4cadff1a"
        ],
        "Left": 21809.5572188187,
        "Top": 7209.0239782648,
        "Width": 439.78663958235848,
        "Height": 368.389234534774,
        "FontSize": 36.0,
        "InitialTop": 7262.0239782648,
        "InitialHeight": 341.389234534774,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "fd8c42fe80e145af8e47448e07b8c3c3",
        "Title": "",
        "Nodes": [
          "105fe69bf71e401e9234abafae1db177"
        ],
        "Left": 10604.569196453775,
        "Top": 6504.5647990489942,
        "Width": 184.0,
        "Height": 172.0,
        "FontSize": 36.0,
        "InitialTop": 6557.5647990489942,
        "InitialHeight": 145.0,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "27e99510a2a045608bdc54519fd88d2b",
        "Title": "Запись в версию \"актуальное\"",
        "Nodes": [
          "2498abe53d854a149b834509827b573a",
          "d149a93c519c4f51a2e7e6e5b9778f63",
          "bf7863d1184044b6b1e7b89f0c4d9f78",
          "e992778b704f4d1ab325235b51ff650c",
          "d1ed490bfc574eedaeb9201d40c5cf0b"
        ],
        "Left": 13202.240566240636,
        "Top": 7026.5998055304,
        "Width": 575.6261805674003,
        "Height": 649.6073339805389,
        "FontSize": 36.0,
        "InitialTop": 7079.5998055304,
        "InitialHeight": 596.6073339805389,
        "TextblockHeight": 43.0,
        "Background": "#FFBB87C6"
      },
      {
        "Id": "0da101fdb251430c8bcf86f733fc8fea",
        "Title": "Запись в версию \"отработано\"",
        "Nodes": [
          "5b2a554c76114ad1af0dee409d952905",
          "5165d6f8baf343bf93ec89bfa4f41b72",
          "9bdc70fb192a4d4d9a458be930b81afc",
          "eaf81894168e4aedb6c5832f2331411b",
          "3ea38b5fea144ce188ef63c5977d634c"
        ],
        "Left": 13224.483828832921,
        "Top": 6029.9817278431074,
        "Width": 575.6261805674003,
        "Height": 649.6073339805007,
        "FontSize": 36.0,
        "InitialTop": 6082.9817278431074,
        "InitialHeight": 596.6073339805007,
        "TextblockHeight": 43.0,
        "Background": "#FFBB87C6"
      },
      {
        "Id": "9edfc47185e84b07b9a4949f7856ce1d",
        "Title": "задания",
        "Nodes": [
          "6496918750214eb791df464286cbbb24"
        ],
        "Left": 11212.671554369275,
        "Top": 3868.2527071763161,
        "Width": 144.0,
        "Height": 250.0,
        "FontSize": 36.0,
        "InitialTop": 3921.2527071763161,
        "InitialHeight": 145.0,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "5ad92857f23d4c2198e5b9289bd4c2dc",
        "Title": "задания",
        "Nodes": [
          "7612c9382e7c463c85f17a6e3c6c772a"
        ],
        "Left": 9414.4629036232818,
        "Top": 9036.2518968436816,
        "Width": 144.0,
        "Height": 250.0,
        "FontSize": 36.0,
        "InitialTop": 9089.2518968436816,
        "InitialHeight": 145.0,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "a22b182d1d164618b8539f2d341e9c3f",
        "Title": "пересечение трубопровода и точки в задании",
        "Nodes": [
          "f808aa3c4a8b4d28b510cc86443a9311",
          "0cf641bb2f1e442a8cb3f653aebbcd8c",
          "07e338ff970643e9974b1c227b14584c",
          "4867046d7d78402eb9dcb316554c96cb"
        ],
        "Left": 12323.993523766552,
        "Top": 2881.122902748622,
        "Width": 626.44942101230117,
        "Height": 635.08997374457977,
        "FontSize": 36.0,
        "InitialTop": 2977.122902748622,
        "InitialHeight": 565.08997374457977,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "ec7a992656a14e3498e9deb97300a370",
        "Title": "находится ли задание в отверстии нахождение отработанных",
        "Nodes": [
          "f49d002bbf4248b5a7aa3127227a6a9b",
          "91788e67384747ed8578cacb5a85e2db"
        ],
        "Left": 14019.559502128946,
        "Top": 3074.0001715941448,
        "Width": 473.37204972153449,
        "Height": 285.0,
        "FontSize": 36.0,
        "InitialTop": 3214.0001715941448,
        "InitialHeight": 149.16161594969435,
        "TextblockHeight": 130.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "4fb04fe6ba6c40adbe16b201f5c7dd55",
        "Title": "нахождение отработанных",
        "Nodes": [
          "1953c272a7cf43ca8adc891ca046f9e3",
          "0613adaebdd841a9a0050484031f9a4c",
          "972a9031e7c64de19681f006f74298f2",
          "5ca27c3742ae4e08a3e8a248ebddf90e"
        ],
        "Left": 13950.915227409248,
        "Top": 2461.2280700908545,
        "Width": 484.4735455373193,
        "Height": 491.79939871019997,
        "FontSize": 36.0,
        "InitialTop": 2514.2280700908545,
        "InitialHeight": 438.79939871019997,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "730b0cf8f15f44069471a28238597aed",
        "Title": "пересечение трубопровода и точки в задании",
        "Nodes": [
          "8b3cb7cfba5447438606800a2698c8d4",
          "1b03ea7d81d24527ac138ac6cbd2553c",
          "e59c0f3b8cda423c8e5a9011e822d570",
          "cad10da8642d4f5c8235f52fa6b87d78"
        ],
        "Left": 9902.87335055687,
        "Top": 9223.2184292980764,
        "Width": 579.26573386695964,
        "Height": 630.29108411149355,
        "FontSize": 36.0,
        "InitialTop": 9319.2184292980764,
        "InitialHeight": 388.00813408907925,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "908bdb4c542444ea99992dee0972b052",
        "Title": "Заполнение истории перемещения и параметра перемещено",
        "Nodes": [
          "c2fb6dd622874b80b5e51e65acb41fb2",
          "2d8060d150504ccd98aea2b16c966230",
          "1a8b1cd4694e4119bc4af0a25088bc90",
          "74c43c74bac147c99dcb280746d4bdb4",
          "3336452c425b4ad280b95c618253a56c",
          "3d11919bbf7148c8ad2ee68758ba9ffb",
          "0d1ff2ff46cc481d956fdd3a866230e0",
          "aa0fe778feca48068609187dd45a64cb",
          "bbdb1e366f3040f9ba9a1c37a4d008de"
        ],
        "Left": 10446.76824111393,
        "Top": 5402.2994460144264,
        "Width": 1553.9700312715631,
        "Height": 902.24738675524623,
        "FontSize": 36.0,
        "InitialTop": 5455.2994460144264,
        "InitialHeight": 849.24738675524623,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "50dce5a8c5ad44bcb73b630c5e26e832",
        "Title": "Заполнение истории перемещения и параметра перемещено",
        "Nodes": [
          "713e4a22da7c42a788b6f08b049d0223",
          "97f7b04c45974a078582e7bbec362067",
          "c24bb35a8bd045da9a90d7b0d4661bf6",
          "7c0185b7d627423eba3cec1edc73b675",
          "4399a9370fe540bea6f142da25fcb670",
          "8b87deed7e85426ba5cfb4efe388a5a6",
          "879050bcdd704f06802772c8e7f22e0d",
          "c3989fdc3c514a54b1b641ad3c5bca08",
          "b9e88aa4eda24ac69951812d9ba98431"
        ],
        "Left": 9667.898506763664,
        "Top": 8045.3835136552489,
        "Width": 1521.8716045419533,
        "Height": 902.247386755239,
        "FontSize": 36.0,
        "InitialTop": 8098.3835136552489,
        "InitialHeight": 849.247386755239,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "0afbb03be8df4f449dfdc0998711cef1",
        "Title": "Заполнение истории перемещения и параметра перемещено",
        "Nodes": [
          "55ec1fe1b3a340a4b94fbf3ade266dfa",
          "9fa40cc2836042f0992406e70376adf5",
          "00c3f3be990c4772891a8f9562cfc13c",
          "ef5a7c5cb9df468ca7e865a00c510c32",
          "06302a7a9101490591c8873a9de3bdd5",
          "591d9a6fe42b45899ea300b0ef1e4946",
          "50322e7c5b2d4034b3295d0fdb932fe3",
          "bafc962e6b694d9cb864ba74ae8db0cb",
          "3ab11115e9ba4da1b606d6e2c1c26a84"
        ],
        "Left": 11356.137943860404,
        "Top": 7586.3788505306957,
        "Width": 1494.4025043659094,
        "Height": 902.552861978128,
        "FontSize": 36.0,
        "InitialTop": 7639.3788505306957,
        "InitialHeight": 891.552861978128,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "1da70ebb3777445a97a165e246f29b3a",
        "Title": "Выбор всех заданий полы",
        "Nodes": [
          "61e2f16dac0c48169dc0f8dade6dc0f7",
          "6fe17454c94340c9bd34ef2d1ef2ff1c",
          "842f4d0d043f436b9b31ab97cff519c0"
        ],
        "Left": -5321.2660148025316,
        "Top": 5680.9451362768159,
        "Width": 409.0,
        "Height": 364.33305401554935,
        "FontSize": 36.0,
        "InitialTop": 5776.9451362768159,
        "InitialHeight": 320.33305401554935,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "0d949ed63c164f48858faae44c85b65f",
        "Title": "Выбор всех заданий стены",
        "Nodes": [
          "5c2d1ccba7b1440ba250b0cc0b7c7a76",
          "952a86142a21465296b7ba54ab0c59b6",
          "ccd85f55448c414eb94b22d122269a2f"
        ],
        "Left": -4882.8824359381324,
        "Top": 5676.2708973836552,
        "Width": 368.0,
        "Height": 364.33305401560028,
        "FontSize": 36.0,
        "InitialTop": 5772.2708973836552,
        "InitialHeight": 320.33305401560028,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "3e1f489cd93649449d694dfa0f48a0d4",
        "Title": "Выбор АР/КЖ",
        "Nodes": [
          "a2a48546ee6348d8b191b377ca8a0fed",
          "c745b52d663949c3a135078cad8eaf17",
          "62693f1cd0f342f8b08e8b4f46af2eb2",
          "01d565efca4a46298ddeb0bc83491326"
        ],
        "Left": 7500.13015791877,
        "Top": 7405.4004713899967,
        "Width": 456.75552791771042,
        "Height": 540.67981369516929,
        "FontSize": 36.0,
        "InitialTop": 7458.4004713899967,
        "InitialHeight": 539.67981369516929,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "f997f7f916f1470d8ab6771b0533603d",
        "Title": "Выбор АР/КЖ",
        "Nodes": [
          "f041a3ab1c82410d8449bc0ab1fb9cc6",
          "661faf71e6f54c9fbe7990d47b554658",
          "09344451f06347ffa87ac22c02650835",
          "c93b54fbc3e44ede9438c3ba3566134e"
        ],
        "Left": 7453.77912753058,
        "Top": 6171.731421533008,
        "Width": 556.04630858755718,
        "Height": 664.43886463172748,
        "FontSize": 36.0,
        "InitialTop": 6224.731421533008,
        "InitialHeight": 663.43886463172748,
        "TextblockHeight": 43.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "76a76dd14a6045a08bd8b3023123f525",
        "Title": "создание линий",
        "Nodes": [
          "6bb4efb0df7c48d99131af801936f302",
          "2d03d46dd0c14003bab2a97effc99163",
          "e967f4c9bf774ccfb494b78de7cc315d",
          "622466c828614eafa544aa31829a34a0",
          "c0a1b26109974b83a937b37f5d87f84a",
          "66f620ad482b44f58862c4409b5e4848",
          "6720c5bab35342c9b3b4c6f5a2861165",
          "ed9b3cb62fba44ac89576e9341f5c821",
          "9c15196999854fb1af9880289ce606de",
          "47e37e5d5c1643e888a9710284d8b0fc",
          "4e22fb14422b436b93a9d73235340f3f",
          "5b16cf5addfd4637af5a8455807b8aaf",
          "4b315991cc1a436a9ee7f58c3bb68cbf",
          "e5be5178d3bf44c5a893d10042976b4e",
          "5dd851805f71408e9bff1eeb6940f05f",
          "2dec2f6e15ec4a7c90aa30e08a02023f",
          "90cce1ffa29043e7bf292316b7b27db7",
          "b618304b2107432498603019f119f4a8"
        ],
        "Left": -6701.0355351139042,
        "Top": 2749.3638716694586,
        "Width": 2337.0797722506104,
        "Height": 1122.753183481736,
        "FontSize": 36.0,
        "InitialTop": 2802.3638716694586,
        "InitialHeight": 1069.753183481736,
        "TextblockHeight": 43.0,
        "Background": "#FFFFC999"
      },
      {
        "Id": "c4aec5a0cad04697afdf436ef80c6091",
        "Title": "Интерфейс",
        "Nodes": [
          "d7e964476ee74acbb0e7cf647ce88e72",
          "ccb06fa941b74dbcb435eca95511a342",
          "0257ff1c454940688fc9389f410df008",
          "37f50008639f43c4a10b63e7709d02b8",
          "b5d8c7ce19114c3998b087902acfbba2"
        ],
        "Left": -2187.3961389492706,
        "Top": 8214.7508072758046,
        "Width": 228.0,
        "Height": 561.87355708383984,
        "FontSize": 36.0,
        "InitialTop": 8267.7508072758046,
        "InitialHeight": 532.87355708383984,
        "TextblockHeight": 43.0,
        "Background": "#FFBB87C6"
      },
      {
        "Id": "315b3061279344f38e69d103ccc73b03",
        "Title": "Вводной параметр",
        "Nodes": [
          "1577c12912d447aeae5cd0d1b2d4d00c",
          "5edf2cbac9334296816f3824d43176ca",
          "2512a1633b5340f782ab73781ce054ca"
        ],
        "Left": -3233.56242670162,
        "Top": 8268.9603772967857,
        "Width": 206.74417438286048,
        "Height": 381.12190433581054,
        "FontSize": 36.0,
        "InitialTop": 8364.9603772967857,
        "InitialHeight": 362.12190433581054,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "d84d2626ac7f4d629e0b62597715e61a",
        "Title": "Вводной параметр",
        "Nodes": [
          "acb859ebdc854914aad7cd86dae86269",
          "63043272426f4635924d90311535ba72",
          "e74c2b22ef554eaf8d9a26946bd23ec2"
        ],
        "Left": -3274.4466176260189,
        "Top": 9077.0938582410563,
        "Width": 252.58443965520564,
        "Height": 372.18473443328,
        "FontSize": 36.0,
        "InitialTop": 9173.0938582410563,
        "InitialHeight": 353.18473443328,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "77e020bb73864c8785e5cae0673d5c55",
        "Title": "Вводной параметр",
        "Nodes": [
          "b571aaf9073b4259a4d085355a18d5c5",
          "08c6716e4ff44708841fd262c05b9d35",
          "0a7fc7a2876a449ca99fb9897ef8a500"
        ],
        "Left": -3298.9652101183642,
        "Top": 9473.8792517239781,
        "Width": 288.10155330630369,
        "Height": 372.18473443328,
        "FontSize": 36.0,
        "InitialTop": 9569.8792517239781,
        "InitialHeight": 353.18473443328,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "4e7dfc74365f43478b2c83dc68beb22a",
        "Title": "параметр вводной",
        "Nodes": [
          "95fdfabf984340ba97d64b5dd1b61fcb",
          "914802fdb597467484fc9c5cc02c55ef",
          "5fafcf63c0554715b2d538549e8b3827"
        ],
        "Left": -3234.1301104446047,
        "Top": 7881.29983684637,
        "Width": 231.85455737759912,
        "Height": 339.935311486679,
        "FontSize": 36.0,
        "InitialTop": 7977.29983684637,
        "InitialHeight": 320.935311486679,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "33a83b869d3b4c03bde6887fa86fdf9d",
        "Title": "Вводной параметр",
        "Nodes": [
          "6ad0115819324571b36c619c8330f198",
          "aefd3d0c704b4d449af7fe398e234e8f",
          "b88399e2b64c48e7afc3971d01464e04"
        ],
        "Left": -3269.7433216113927,
        "Top": 8669.9968615182788,
        "Width": 252.58443965520019,
        "Height": 372.18473443328,
        "FontSize": 36.0,
        "InitialTop": 8765.9968615182788,
        "InitialHeight": 353.18473443328,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "c1e9e506055e4e31aa6a47e82dcb1b6d",
        "Title": "Вводной параметр",
        "Nodes": [
          "d2fa2418a2614efab3f9b85441cf060b"
        ],
        "Left": 25154.163617553375,
        "Top": 7412.9744043828068,
        "Width": 196.0,
        "Height": 179.0,
        "FontSize": 36.0,
        "InitialTop": 7508.9744043828068,
        "InitialHeight": 145.0,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "1e86e0f257b140b7b0d374f68d2ba257",
        "Title": "Вводной параметр",
        "Nodes": [
          "ec81f0a807f44c1bb71fbb21e10b75d2"
        ],
        "Left": 25138.038225750373,
        "Top": 7798.8439292675866,
        "Width": 230.0,
        "Height": 179.0,
        "FontSize": 36.0,
        "InitialTop": 7894.8439292675866,
        "InitialHeight": 145.0,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "58f2042a99134859ac0a754ef4d6b3d8",
        "Title": "Вводной параметр",
        "Nodes": [
          "8e362073cbb74a438948827345fa24af"
        ],
        "Left": 25114.959483198974,
        "Top": 8547.7651985611737,
        "Width": 196.0,
        "Height": 179.0,
        "FontSize": 36.0,
        "InitialTop": 8643.7651985611737,
        "InitialHeight": 145.0,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "b01dadc22993476885d8de4e5d432211",
        "Title": "Интерфейс",
        "Nodes": [
          "6fac5e56484140fca18347be5fd01a64",
          "e0659da033fd4e90882e8c3309093ab8",
          "19308be5b9344708a0f38e3990695aed",
          "0501ca69557b4f2e9631283b7a347328",
          "c40b48c96e104b1486f167a63cb14f45"
        ],
        "Left": 26849.271473270874,
        "Top": 7072.1752883325662,
        "Width": 207.01759118089831,
        "Height": 548.07130556106858,
        "FontSize": 36.0,
        "InitialTop": 7125.1752883325662,
        "InitialHeight": 519.07130556106858,
        "TextblockHeight": 43.0,
        "Background": "#FFBB87C6"
      },
      {
        "Id": "23290cf78ae444478f18bb98cdade669",
        "Title": "Вводной параметр",
        "Nodes": [
          "aaffd024789a40458216a809703858eb"
        ],
        "Left": 25194.234351602976,
        "Top": 7024.2304170243351,
        "Width": 194.0,
        "Height": 179.0,
        "FontSize": 36.0,
        "InitialTop": 7120.2304170243351,
        "InitialHeight": 145.0,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "4705bad9971e498da2d56623b04d8359",
        "Title": "параметр вводной",
        "Nodes": [
          "3aed0aba4ad542d399a39fbdaf875085"
        ],
        "Left": 25166.870430956977,
        "Top": 6623.1717581223656,
        "Width": 230.0,
        "Height": 179.0,
        "FontSize": 36.0,
        "InitialTop": 6719.1717581223656,
        "InitialHeight": 145.0,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "3a83bc0f54dc4505aad4256d0aeac907",
        "Title": "Вводной параметр",
        "Nodes": [
          "b07d17e85c7c41b59059d935cc94d50c"
        ],
        "Left": 25123.457295134674,
        "Top": 8195.3051862660468,
        "Width": 194.0,
        "Height": 179.0,
        "FontSize": 36.0,
        "InitialTop": 8291.3051862660468,
        "InitialHeight": 145.0,
        "TextblockHeight": 86.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "975758dbb9f34d1eb7e14b643f363fc0",
        "Title": "Created by: Babuh.AP\r\nModified by: Babuh.AP\r\nVersion: 2\r\nRevit Version: 2021.1.1\r\nDate: 22.08.2022\r\nLast Change: 22.08.2022\r\nCompany: LIST Project (Tyumen, Russia)",
        "Nodes": [],
        "Left": -446.08472131813051,
        "Top": 7730.8886353287453,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      },
      {
        "Id": "ba2a47102684492fbb6edaa98c7d5471",
        "Title": "Описание скрипта\r\n\r\nVer. 2\r\n\r\nСоздание экземпляров семейства\r\n \"(Отв_Задание)_Стены_Прямоугольное\";\r\n\"(Отв_Задание)_Перекрытия_Прямоугольное\"; \r\nв точках пересечения перекрытий из связевого файла  осями воздуховодов, труб и лотков в текущем файле. С заданием габаритов отверстия. С записью параметров: подразделения, получающего задание; подразделения, выдавшего задание; текущей даты, версии создаваемого задания\r\n\r\n",
        "Nodes": [],
        "Left": -446.08472131813051,
        "Top": 7882.4243751846188,
        "Width": 0.0,
        "Height": 0.0,
        "FontSize": 36.0,
        "InitialTop": 0.0,
        "InitialHeight": 0.0,
        "TextblockHeight": 0.0,
        "Background": "#FFC1D676"
      }
    ],
    "X": -5064.1853900370761,
    "Y": -2538.7551604863625,
    "Zoom": 0.52643361765484986
  }
}